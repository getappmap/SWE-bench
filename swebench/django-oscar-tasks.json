[{"repo": "django-oscar/django-oscar", "pull_number": 3343, "instance_id": "django-oscar__django-oscar-3343", "issue_numbers": ["3344"], "base_commit": "2429ad9e88e9a432dfa60aaca703d99860f85389", "patch": "diff --git a/src/oscar/apps/offer/benefits.py b/src/oscar/apps/offer/benefits.py\n--- a/src/oscar/apps/offer/benefits.py\n+++ b/src/oscar/apps/offer/benefits.py\n@@ -275,12 +275,15 @@ def apply(self, basket, condition, offer, **kwargs):\n \n         # Cheapest line gives free product\n         discount, line = line_tuples[0]\n-        apply_discount(line, discount, 1, offer)\n+        if line.quantity_with_offer_discount(offer) == 0:\n+            apply_discount(line, discount, 1, offer)\n \n-        affected_lines = [(line, discount, 1)]\n-        condition.consume_items(offer, basket, affected_lines)\n+            affected_lines = [(line, discount, 1)]\n+            condition.consume_items(offer, basket, affected_lines)\n \n-        return BasketDiscount(discount)\n+            return BasketDiscount(discount)\n+        else:\n+            return ZERO_DISCOUNT\n \n \n # =================\n", "test_patch": "diff --git a/tests/integration/offer/test_applicator.py b/tests/integration/offer/test_applicator.py\n--- a/tests/integration/offer/test_applicator.py\n+++ b/tests/integration/offer/test_applicator.py\n@@ -29,7 +29,6 @@ def test_applies_offer_multiple_times_by_default(self):\n         add_product(self.basket, D('100'), 5)\n         offer = ConditionalOfferFactory(\n             pk=1, condition=self.condition, benefit=self.benefit)\n-        self.applicator.apply\n         self.applicator.apply_offers(self.basket, [offer])\n         line = self.basket.all_lines()[0]\n         self.assertTrue(line.quantity_with_offer_discount(offer) == 5)\ndiff --git a/tests/integration/offer/test_multibuy_benefit.py b/tests/integration/offer/test_multibuy_benefit.py\n--- a/tests/integration/offer/test_multibuy_benefit.py\n+++ b/tests/integration/offer/test_multibuy_benefit.py\n@@ -5,8 +5,11 @@\n from django.test import TestCase\n \n from oscar.apps.offer import models\n-from oscar.test import factories\n+from oscar.apps.offer.utils import Applicator\n from oscar.test.basket import add_product, add_products\n+from oscar.test.factories import (\n+    BenefitFactory, ConditionalOfferFactory, ConditionFactory,\n+    RangeFactory, create_basket)\n \n \n class TestAMultibuyDiscountAppliedWithCountCondition(TestCase):\n@@ -22,7 +25,7 @@ def setUp(self):\n             range=range,\n             type=models.Benefit.MULTIBUY)\n         self.offer = mock.Mock()\n-        self.basket = factories.create_basket(empty=True)\n+        self.basket = create_basket(empty=True)\n \n     def test_applies_correctly_to_empty_basket(self):\n         result = self.benefit.apply(self.basket, self.condition, self.offer)\n@@ -45,6 +48,22 @@ def test_applies_correctly_to_basket_which_exceeds_condition(self):\n         self.assertEqual(3, self.basket.num_items_with_discount)\n         self.assertEqual(5, self.basket.num_items_without_discount)\n \n+    def test_apply_offer_with_multibuy_benefit_and_count_condition(self):\n+        rng = RangeFactory(includes_all_products=True)\n+        condition = ConditionFactory(range=rng, type=ConditionFactory._meta.model.COUNT, value=1)\n+        benefit = BenefitFactory(range=rng, type=BenefitFactory._meta.model.MULTIBUY, value=1)\n+        offer = ConditionalOfferFactory(condition=condition, benefit=benefit)\n+\n+        add_product(self.basket, D('100'), 5)\n+\n+        applicator = Applicator()\n+        applicator.apply_offers(self.basket, [offer])\n+        line = self.basket.all_lines()[0]\n+        assert line.quantity_with_offer_discount(offer) == 1\n+\n+        self.basket.refresh_from_db()\n+        assert self.basket.total_discount == D('100')\n+\n \n class TestAMultibuyDiscountAppliedWithAValueCondition(TestCase):\n \n@@ -60,7 +79,7 @@ def setUp(self):\n             type=models.Benefit.MULTIBUY,\n             value=1)\n         self.offer = mock.Mock()\n-        self.basket = factories.create_basket(empty=True)\n+        self.basket = create_basket(empty=True)\n \n     def test_applies_correctly_to_empty_basket(self):\n         result = self.benefit.apply(self.basket, self.condition, self.offer)\n@@ -93,7 +112,7 @@ def setUp(self):\n             type=models.Condition.COUNT,\n             value=3)\n         self.offer = mock.Mock()\n-        self.basket = factories.create_basket(empty=True)\n+        self.basket = create_basket(empty=True)\n \n     def test_multibuy_range_required(self):\n         benefit = models.Benefit(\n", "problem_statement": "Issue with `apply` method of `MultibuyDiscountBenefit`\n### Issue Summary\r\n\r\n`apply` method of `MultibuyDiscountBenefit` does not work as it should. With `Count` condition it makes all items in the basket FOC.\r\n\r\n### Steps to Reproduce\r\n\r\nFailed test in PR https://github.com/django-oscar/django-oscar/pull/3342\r\n\r\n### Technical details\r\n\r\nIf in the test above we will have more than two items in the basket. E.g.\r\n```python\r\nadd_product(self.basket, D('20'), 2)\r\nadd_product(self.basket, D('100'), 5)\r\n```\r\n this loop will make 10_000 iterations:\r\nhttps://github.com/django-oscar/django-oscar/blob/2429ad9e88e9a432dfa60aaca703d99860f85389/src/oscar/apps/offer/applicator.py#L33-L40\r\n\r\nSuggested change to `apply` method, please review in PR https://github.com/django-oscar/django-oscar/pull/3343\r\n\r\n\n", "hints_text": "", "created_at": "2020-04-09T12:58:41Z", "version": "2.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithCountCondition::test_apply_offer_with_multibuy_benefit_and_count_condition"], "PASS_TO_PASS": ["tests/integration/offer/test_applicator.py::TestOfferApplicator::test_applies_offer_multiple_times_by_default", "tests/integration/offer/test_applicator.py::TestOfferApplicator::test_get_site_offers", "tests/integration/offer/test_applicator.py::TestOfferApplicator::test_respects_maximum_applications_field", "tests/integration/offer/test_applicator.py::TestOfferApplicator::test_uses_offers_in_order_of_descending_priority", "tests/integration/offer/test_applicator.py::TestOfferApplicationsWrapper::test_aggregates_results_from_same_offer", "tests/integration/offer/test_applicator.py::TestOfferApplicationsWrapper::test_is_iterable", "tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_exceeds_condition", "tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_matches_condition", "tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithCountCondition::test_applies_correctly_to_empty_basket", "tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithAValueCondition::test_applies_correctly_to_basket_which_exceeds_condition", "tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithAValueCondition::test_applies_correctly_to_basket_which_matches_condition", "tests/integration/offer/test_multibuy_benefit.py::TestAMultibuyDiscountAppliedWithAValueCondition::test_applies_correctly_to_empty_basket", "tests/integration/offer/test_multibuy_benefit.py::TestMultibuyValidation::test_multibuy_must_not_have_max_affected_items", "tests/integration/offer/test_multibuy_benefit.py::TestMultibuyValidation::test_multibuy_must_not_have_value", "tests/integration/offer/test_multibuy_benefit.py::TestMultibuyValidation::test_multibuy_range_required"], "environment_setup_commit": "2429ad9e88e9a432dfa60aaca703d99860f85389"}, {"repo": "django-oscar/django-oscar", "pull_number": 3632, "instance_id": "django-oscar__django-oscar-3632", "issue_numbers": ["3614", "3619"], "base_commit": "d98bbaccd551bb0accf78adddcc0a661396c1213", "patch": "diff --git a/src/oscar/apps/dashboard/offers/apps.py b/src/oscar/apps/dashboard/offers/apps.py\n--- a/src/oscar/apps/dashboard/offers/apps.py\n+++ b/src/oscar/apps/dashboard/offers/apps.py\n@@ -26,12 +26,12 @@ def get_urls(self):\n         urls = [\n             path('', self.list_view.as_view(), name='offer-list'),\n             # Creation\n-            path('new/name-and-description/', self.metadata_view.as_view(), name='offer-metadata'),\n+            path('new/metadata/', self.metadata_view.as_view(), name='offer-metadata'),\n             path('new/condition/', self.condition_view.as_view(), name='offer-condition'),\n             path('new/incentive/', self.benefit_view.as_view(), name='offer-benefit'),\n             path('new/restrictions/', self.restrictions_view.as_view(), name='offer-restrictions'),\n             # Update\n-            path('<int:pk>/name-and-description/', self.metadata_view.as_view(update=True), name='offer-metadata'),\n+            path('<int:pk>/metadata/', self.metadata_view.as_view(update=True), name='offer-metadata'),\n             path('<int:pk>/condition/', self.condition_view.as_view(update=True), name='offer-condition'),\n             path('<int:pk>/incentive/', self.benefit_view.as_view(update=True), name='offer-benefit'),\n             path('<int:pk>/restrictions/', self.restrictions_view.as_view(update=True), name='offer-restrictions'),\ndiff --git a/src/oscar/apps/dashboard/offers/forms.py b/src/oscar/apps/dashboard/offers/forms.py\n--- a/src/oscar/apps/dashboard/offers/forms.py\n+++ b/src/oscar/apps/dashboard/offers/forms.py\n@@ -1,6 +1,6 @@\n-import datetime\n-\n from django import forms\n+from django.conf import settings\n+from django.utils import timezone\n from django.utils.translation import gettext_lazy as _\n \n from oscar.core.loading import get_model\n@@ -11,10 +11,26 @@\n Benefit = get_model('offer', 'Benefit')\n \n \n+def get_offer_type_choices():\n+    return ((\"\", \"---------\"),) + tuple(choice for choice in ConditionalOffer.TYPE_CHOICES\n+                                        if choice[0] in [getattr(ConditionalOffer, const_name)\n+                                                         for const_name in settings.OSCAR_OFFERS_IMPLEMENTED_TYPES])\n+\n+\n class MetaDataForm(forms.ModelForm):\n+\n+    offer_type = forms.ChoiceField(label=_(\"Type\"), choices=get_offer_type_choices)\n+\n     class Meta:\n         model = ConditionalOffer\n-        fields = ('name', 'description',)\n+        fields = ('name', 'description', 'offer_type')\n+\n+    def clean_offer_type(self):\n+        data = self.cleaned_data['offer_type']\n+        if (self.instance.pk is not None) and (self.instance.offer_type == ConditionalOffer.VOUCHER) and \\\n+           ('offer_type' in self.changed_data) and self.instance.vouchers.exists():\n+            raise forms.ValidationError(_(\"This can only be changed if it has no vouchers attached to it\"))\n+        return data\n \n \n class RestrictionsForm(forms.ModelForm):\n@@ -28,8 +44,7 @@ class RestrictionsForm(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n-        today = datetime.date.today()\n-        self.fields['start_datetime'].initial = today\n+        self.fields['start_datetime'].initial = timezone.now()\n \n     class Meta:\n         model = ConditionalOffer\n@@ -188,4 +203,16 @@ def save(self, *args, **kwargs):\n \n class OfferSearchForm(forms.Form):\n     name = forms.CharField(required=False, label=_(\"Offer name\"))\n-    is_active = forms.BooleanField(required=False, label=_(\"Is active?\"))\n+    is_active = forms.NullBooleanField(required=False, label=_(\"Is active?\"), widget=widgets.NullBooleanSelect)\n+    offer_type = forms.ChoiceField(required=False, label=_(\"Offer type\"), choices=get_offer_type_choices)\n+    has_vouchers = forms.NullBooleanField(required=False, label=_(\"Has vouchers?\"), widget=widgets.NullBooleanSelect)\n+    voucher_code = forms.CharField(required=False, label=_(\"Voucher code\"))\n+\n+    basic_fields = [\n+        'name',\n+        'is_active',\n+    ]\n+\n+    @property\n+    def is_voucher_offer_type(self):\n+        return self.is_bound and (self.cleaned_data['offer_type'] == ConditionalOffer.VOUCHER)\ndiff --git a/src/oscar/apps/dashboard/offers/views.py b/src/oscar/apps/dashboard/offers/views.py\n--- a/src/oscar/apps/dashboard/offers/views.py\n+++ b/src/oscar/apps/dashboard/offers/views.py\n@@ -5,7 +5,7 @@\n from django.core import serializers\n from django.core.serializers.json import DjangoJSONEncoder\n from django.http import HttpResponseRedirect\n-from django.shortcuts import get_object_or_404\n+from django.shortcuts import get_object_or_404, redirect\n from django.urls import reverse\n from django.utils import timezone\n from django.utils.translation import gettext_lazy as _\n@@ -36,39 +36,53 @@ class OfferListView(ListView):\n     paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE\n \n     def get_queryset(self):\n-        qs = self.model._default_manager.exclude(\n-            offer_type=ConditionalOffer.VOUCHER)\n-        qs = sort_queryset(qs, self.request,\n-                           ['name', 'start_datetime', 'end_datetime',\n-                            'num_applications', 'total_discount'])\n+        self.search_filters = []\n+        qs = self.model._default_manager.all()\n+        qs = sort_queryset(qs, self.request, ['name', 'offer_type', 'start_datetime', 'end_datetime',\n+                                              'num_applications', 'total_discount'])\n \n-        self.description = _(\"All offers\")\n-\n-        # We track whether the queryset is filtered to determine whether we\n-        # show the search form 'reset' button.\n-        self.is_filtered = False\n         self.form = self.form_class(self.request.GET)\n-        if not self.form.is_valid():\n+        # This form is exactly the same as the other one, apart from having\n+        # fields with different IDs, so that they are unique within the page\n+        # (non-unique field IDs also break Select2)\n+        self.advanced_form = self.form_class(self.request.GET, auto_id='id_advanced_%s')\n+        if not all([self.form.is_valid(), self.advanced_form.is_valid()]):\n             return qs\n \n-        data = self.form.cleaned_data\n-\n-        if data['name']:\n-            qs = qs.filter(name__icontains=data['name'])\n-            self.description = _(\"Offers matching '%s'\") % data['name']\n-            self.is_filtered = True\n-        if data['is_active']:\n-            self.is_filtered = True\n-            today = timezone.now()\n-            qs = qs.filter(start_datetime__lte=today, end_datetime__gte=today)\n+        name = self.form.cleaned_data['name']\n+        offer_type = self.form.cleaned_data['offer_type']\n+        is_active = self.form.cleaned_data['is_active']\n+        has_vouchers = self.form.cleaned_data['has_vouchers']\n+        voucher_code = self.form.cleaned_data['voucher_code']\n+\n+        if name:\n+            qs = qs.filter(name__icontains=name)\n+            self.search_filters.append(_('Name matches \"%s\"') % name)\n+        if is_active is not None:\n+            now = timezone.now()\n+            if is_active:\n+                qs = qs.filter(start_datetime__lte=now, end_datetime__gte=now)\n+                self.search_filters.append(_(\"Is active\"))\n+            else:\n+                qs = qs.filter(end_datetime__lt=now)\n+                self.search_filters.append(_(\"Is inactive\"))\n+        if offer_type:\n+            qs = qs.filter(offer_type=offer_type)\n+            self.search_filters.append(_('Is of type \"%s\"') % dict(ConditionalOffer.TYPE_CHOICES)[offer_type])\n+        if has_vouchers is not None:\n+            qs = qs.filter(vouchers__isnull=not has_vouchers).distinct()\n+            self.search_filters.append(_(\"Has vouchers\") if has_vouchers else _(\"Has no vouchers\"))\n+        if voucher_code:\n+            qs = qs.filter(vouchers__code__icontains=voucher_code).distinct()\n+            self.search_filters.append(_('Voucher code matches \"%s\"') % voucher_code)\n \n         return qs\n \n     def get_context_data(self, **kwargs):\n         ctx = super().get_context_data(**kwargs)\n-        ctx['queryset_description'] = self.description\n         ctx['form'] = self.form\n-        ctx['is_filtered'] = self.is_filtered\n+        ctx['advanced_form'] = self.advanced_form\n+        ctx['search_filters'] = self.search_filters\n         return ctx\n \n \n@@ -224,10 +238,11 @@ def form_valid(self, form):\n             return super().form_valid(form)\n \n     def save_offer(self, offer):\n-        # We update the offer with the name/description from step 1\n+        # We update the offer with the name/description/offer_type from step 1\n         session_offer = self._fetch_session_offer()\n         offer.name = session_offer.name\n         offer.description = session_offer.description\n+        offer.offer_type = session_offer.offer_type\n \n         # Save the related models, then save the offer.\n         # Note than you can save already on the first page of the wizard,\n@@ -279,7 +294,7 @@ def get_instance(self):\n         return self.offer\n \n     def get_title(self):\n-        return _(\"Name and description\")\n+        return _(\"Name, description and type\")\n \n \n class OfferBenefitView(OfferWizardStepView):\n@@ -333,6 +348,13 @@ class OfferDeleteView(DeleteView):\n     template_name = 'oscar/dashboard/offers/offer_delete.html'\n     context_object_name = 'offer'\n \n+    def dispatch(self, request, *args, **kwargs):\n+        offer = self.get_object()\n+        if offer.vouchers.exists():\n+            messages.warning(request, _(\"This offer can only be deleted if it has no vouchers attached to it\"))\n+            return redirect('dashboard:offer-detail', pk=offer.pk)\n+        return super().dispatch(request, *args, **kwargs)\n+\n     def get_success_url(self):\n         messages.success(self.request, _(\"Offer deleted!\"))\n         return reverse('dashboard:offer-list')\ndiff --git a/src/oscar/apps/dashboard/views.py b/src/oscar/apps/dashboard/views.py\n--- a/src/oscar/apps/dashboard/views.py\n+++ b/src/oscar/apps/dashboard/views.py\n@@ -46,15 +46,6 @@ def get_context_data(self, **kwargs):\n         ctx.update(self.get_stats())\n         return ctx\n \n-    def get_active_site_offers(self):\n-        \"\"\"\n-        Return active conditional offers of type \"site offer\". The returned\n-        ``Queryset`` of site offers is filtered by end date greater then\n-        the current date.\n-        \"\"\"\n-        return ConditionalOffer.objects.filter(\n-            end_datetime__gt=now(), offer_type=ConditionalOffer.SITE)\n-\n     def get_active_vouchers(self):\n         \"\"\"\n         Get all active vouchers. The returned ``Queryset`` of vouchers\n@@ -188,7 +179,10 @@ def get_stats(self):\n         }\n         if user.is_staff:\n             stats.update(\n-                total_site_offers=self.get_active_site_offers().count(),\n+                offer_maps=(ConditionalOffer.objects.filter(end_datetime__gt=now())\n+                                                    .values('offer_type')\n+                                                    .annotate(count=Count('id'))\n+                                                    .order_by('offer_type')),\n                 total_vouchers=self.get_active_vouchers().count(),\n             )\n         return stats\ndiff --git a/src/oscar/apps/dashboard/vouchers/apps.py b/src/oscar/apps/dashboard/vouchers/apps.py\n--- a/src/oscar/apps/dashboard/vouchers/apps.py\n+++ b/src/oscar/apps/dashboard/vouchers/apps.py\n@@ -29,6 +29,8 @@ def ready(self):\n             'dashboard.vouchers.views', 'VoucherSetDetailView')\n         self.set_download_view = get_class(\n             'dashboard.vouchers.views', 'VoucherSetDownloadView')\n+        self.set_delete_view = get_class(\n+            'dashboard.vouchers.views', 'VoucherSetDeleteView')\n \n     def get_urls(self):\n         urls = [\n@@ -41,7 +43,8 @@ def get_urls(self):\n             path('sets/', self.set_list_view.as_view(), name='voucher-set-list'),\n             path('sets/create/', self.set_create_view.as_view(), name='voucher-set-create'),\n             path('sets/update/<int:pk>/', self.set_update_view.as_view(), name='voucher-set-update'),\n-            path('sets/<int:pk>/', self.set_detail_view.as_view(), name='voucher-set'),\n-            path('sets/<int:pk>/download/', self.set_download_view.as_view(), name='voucher-set-download'),\n+            path('sets/detail/<int:pk>/', self.set_detail_view.as_view(), name='voucher-set-detail'),\n+            path('sets/download/<int:pk>/', self.set_download_view.as_view(), name='voucher-set-download'),\n+            path('sets/delete/<int:pk>/', self.set_delete_view.as_view(), name='voucher-set-delete'),\n         ]\n         return self.post_process_urls(urls)\ndiff --git a/src/oscar/apps/dashboard/vouchers/forms.py b/src/oscar/apps/dashboard/vouchers/forms.py\n--- a/src/oscar/apps/dashboard/vouchers/forms.py\n+++ b/src/oscar/apps/dashboard/vouchers/forms.py\n@@ -1,99 +1,73 @@\n from django import forms\n+from django.db import transaction\n+from django.urls import reverse\n+from django.utils.safestring import mark_safe\n from django.utils.translation import gettext_lazy as _\n \n+from oscar.apps.voucher.utils import get_unused_code\n from oscar.core.loading import get_model\n from oscar.forms import widgets\n \n Voucher = get_model('voucher', 'Voucher')\n VoucherSet = get_model('voucher', 'VoucherSet')\n-Benefit = get_model('offer', 'Benefit')\n-Range = get_model('offer', 'Range')\n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n \n \n-class VoucherForm(forms.Form):\n+class VoucherForm(forms.ModelForm):\n     \"\"\"\n-    A specialised form for creating a voucher and offer\n-    model.\n+    A specialised form for creating a voucher model, and capturing the offers\n+    that apply to it.\n     \"\"\"\n-    name = forms.CharField(label=_(\"Name\"))\n-    code = forms.CharField(label=_(\"Code\"))\n-\n-    start_datetime = forms.DateTimeField(\n-        widget=widgets.DateTimePickerInput(),\n-        label=_(\"Start datetime\"))\n-    end_datetime = forms.DateTimeField(\n-        widget=widgets.DateTimePickerInput(),\n-        label=_(\"End datetime\"))\n-\n-    usage = forms.ChoiceField(choices=Voucher.USAGE_CHOICES, label=_(\"Usage\"))\n-\n-    benefit_range = forms.ModelChoiceField(\n-        label=_('Which products get a discount?'),\n-        queryset=Range.objects.all(),\n+    offers = forms.ModelMultipleChoiceField(\n+        label=_(\"Which offers apply for this voucher?\"),\n+        queryset=ConditionalOffer.objects.filter(offer_type=ConditionalOffer.VOUCHER),\n     )\n-    benefit_type = forms.ChoiceField(\n-        choices=Benefit.TYPE_CHOICES,\n-        label=_('Discount type'),\n-    )\n-    benefit_value = forms.DecimalField(\n-        label=_('Discount value'))\n-\n-    exclusive = forms.BooleanField(\n-        required=False,\n-        label=_(\"Exclusive offers cannot be combined on the same items\"))\n-\n-    def __init__(self, voucher=None, *args, **kwargs):\n-        self.voucher = voucher\n-        super().__init__(*args, **kwargs)\n-\n-    def clean_name(self):\n-        name = self.cleaned_data['name']\n-        try:\n-            voucher = Voucher.objects.get(name=name)\n-        except Voucher.DoesNotExist:\n-            pass\n-        else:\n-            if (not self.voucher) or (voucher.id != self.voucher.id):\n-                raise forms.ValidationError(_(\"The name '%s' is already in\"\n-                                              \" use\") % name)\n-        return name\n+\n+    class Meta:\n+        model = Voucher\n+        fields = [\n+            'name',\n+            'code',\n+            'start_datetime',\n+            'end_datetime',\n+            'usage',\n+        ]\n+        widgets = {\n+            'start_datetime': widgets.DateTimePickerInput(),\n+            'end_datetime': widgets.DateTimePickerInput(),\n+        }\n \n     def clean_code(self):\n-        code = self.cleaned_data['code'].strip().upper()\n-        if not code:\n-            raise forms.ValidationError(_(\"Please enter a voucher code\"))\n-        try:\n-            voucher = Voucher.objects.get(code=code)\n-        except Voucher.DoesNotExist:\n-            pass\n-        else:\n-            if (not self.voucher) or (voucher.id != self.voucher.id):\n-                raise forms.ValidationError(_(\"The code '%s' is already in\"\n-                                              \" use\") % code)\n-        return code\n-\n-    def clean(self):\n-        cleaned_data = super().clean()\n-        start_datetime = cleaned_data.get('start_datetime')\n-        end_datetime = cleaned_data.get('end_datetime')\n-        if start_datetime and end_datetime and end_datetime < start_datetime:\n-            raise forms.ValidationError(_(\"The start date must be before the\"\n-                                          \" end date\"))\n-        return cleaned_data\n+        return self.cleaned_data['code'].strip().upper()\n \n \n class VoucherSearchForm(forms.Form):\n     name = forms.CharField(required=False, label=_(\"Name\"))\n     code = forms.CharField(required=False, label=_(\"Code\"))\n-    is_active = forms.BooleanField(required=False, label=_(\"Is Active?\"))\n-    in_set = forms.BooleanField(\n-        required=False, label=_(\"In Voucherset?\"))\n+    offer_name = forms.CharField(required=False, label=_(\"Offer name\"))\n+    is_active = forms.NullBooleanField(required=False, label=_(\"Is active?\"), widget=widgets.NullBooleanSelect)\n+    in_set = forms.NullBooleanField(required=False, label=_(\"In voucher set?\"), widget=widgets.NullBooleanSelect)\n+    has_offers = forms.NullBooleanField(required=False, label=_(\"Has offers?\"), widget=widgets.NullBooleanSelect)\n+\n+    basic_fields = [\n+        'name',\n+        'code',\n+        'is_active',\n+        'in_set',\n+    ]\n \n     def clean_code(self):\n         return self.cleaned_data['code'].upper()\n \n \n class VoucherSetForm(forms.ModelForm):\n+    usage = forms.ChoiceField(choices=((\"\", \"---------\"),) + Voucher.USAGE_CHOICES, label=_(\"Usage\"))\n+\n+    offers = forms.ModelMultipleChoiceField(\n+        label=_(\"Which offers apply for this voucher set?\"),\n+        queryset=ConditionalOffer.objects.filter(offer_type=ConditionalOffer.VOUCHER),\n+    )\n+\n     class Meta:\n         model = VoucherSet\n         fields = [\n@@ -109,27 +83,48 @@ class Meta:\n             'end_datetime': widgets.DateTimePickerInput(),\n         }\n \n-    benefit_range = forms.ModelChoiceField(\n-        label=_('Which products get a discount?'),\n-        queryset=Range.objects.all(),\n-    )\n-    benefit_type = forms.ChoiceField(\n-        choices=Benefit.TYPE_CHOICES,\n-        label=_('Discount type'),\n-    )\n-    benefit_value = forms.DecimalField(\n-        label=_('Discount value'))\n+    def clean_count(self):\n+        data = self.cleaned_data['count']\n+        if (self.instance.pk is not None) and (data < self.instance.count):\n+            detail_url = reverse('dashboard:voucher-set-detail', kwargs={'pk': self.instance.pk})\n+            raise forms.ValidationError(mark_safe(\n+                _('This cannot be used to delete vouchers (currently %s) in this set. '\n+                  'You can do that on the <a href=\"%s\">detail</a> page.') % (self.instance.count, detail_url)))\n+        return data\n \n+    @transaction.atomic\n     def save(self, commit=True):\n         instance = super().save(commit)\n         if commit:\n-            instance.generate_vouchers()\n+            usage = self.cleaned_data['usage']\n+            offers = self.cleaned_data['offers']\n+            if instance is not None:\n+                # Update vouchers in this set\n+                for i, voucher in enumerate(instance.vouchers.order_by('date_created')):\n+                    voucher.name = \"%s - %d\" % (instance.name, i + 1)\n+                    voucher.usage = usage\n+                    voucher.start_datetime = instance.start_datetime\n+                    voucher.end_datetime = instance.end_datetime\n+                    voucher.save()\n+                    voucher.offers.set(offers)\n+            # Add vouchers to this set\n+            vouchers_added = False\n+            for i in range(instance.vouchers.count(), instance.count):\n+                voucher = Voucher.objects.create(name=\"%s - %d\" % (instance.name, i + 1),\n+                                                 code=get_unused_code(length=instance.code_length),\n+                                                 voucher_set=instance,\n+                                                 usage=usage,\n+                                                 start_datetime=instance.start_datetime,\n+                                                 end_datetime=instance.end_datetime)\n+                voucher.offers.add(*offers)\n+                vouchers_added = True\n+            if vouchers_added:\n+                instance.update_count()\n         return instance\n \n \n class VoucherSetSearchForm(forms.Form):\n     code = forms.CharField(required=False, label=_(\"Code\"))\n-    is_active = forms.BooleanField(required=False, label=_(\"Is Active?\"))\n \n     def clean_code(self):\n         return self.cleaned_data['code'].upper()\ndiff --git a/src/oscar/apps/dashboard/vouchers/views.py b/src/oscar/apps/dashboard/vouchers/views.py\n--- a/src/oscar/apps/dashboard/vouchers/views.py\n+++ b/src/oscar/apps/dashboard/vouchers/views.py\n@@ -3,14 +3,13 @@\n from django.conf import settings\n from django.contrib import messages\n from django.db import transaction\n-from django.http import HttpResponse, HttpResponseRedirect\n-from django.shortcuts import get_object_or_404\n-from django.urls import reverse\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404, redirect\n+from django.urls import reverse, reverse_lazy\n from django.utils import timezone\n from django.utils.translation import gettext_lazy as _\n from django.views import generic\n \n-from oscar.apps.voucher.utils import get_offer_name\n from oscar.core.loading import get_class, get_model\n from oscar.core.utils import slugify\n from oscar.views import sort_queryset\n@@ -21,9 +20,6 @@\n VoucherSearchForm = get_class('dashboard.vouchers.forms', 'VoucherSearchForm')\n Voucher = get_model('voucher', 'Voucher')\n VoucherSet = get_model('voucher', 'VoucherSet')\n-ConditionalOffer = get_model('offer', 'ConditionalOffer')\n-Benefit = get_model('offer', 'Benefit')\n-Condition = get_model('offer', 'Condition')\n OrderDiscount = get_model('order', 'OrderDiscount')\n \n \n@@ -32,62 +28,80 @@ class VoucherListView(generic.ListView):\n     context_object_name = 'vouchers'\n     template_name = 'oscar/dashboard/vouchers/voucher_list.html'\n     form_class = VoucherSearchForm\n-    description_template = _(\"%(main_filter)s %(name_filter)s %(code_filter)s\")\n     paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE\n \n     def get_queryset(self):\n-        qs = self.model.objects.all().order_by('-date_created')\n+        self.search_filters = []\n+        qs = self.model._default_manager.all()\n         qs = sort_queryset(qs, self.request,\n                            ['num_basket_additions', 'num_orders',\n                             'date_created'],\n                            '-date_created')\n-        self.description_ctx = {'main_filter': _('All vouchers'),\n-                                'name_filter': '',\n-                                'code_filter': ''}\n \n-        # If form not submitted, return early\n-        is_form_submitted = 'name' in self.request.GET\n-        if not is_form_submitted:\n-            self.form = self.form_class()\n+        # If form is not submitted, perform a default filter, and return early\n+        if not self.request.GET:\n+            self.form = self.form_class(initial={'in_set': False})\n+            # This form is exactly the same as the other one, apart from having\n+            # fields with different IDs, so that they are unique within the page\n+            # (non-unique field IDs also break Select2)\n+            self.advanced_form = self.form_class(initial={'in_set': False}, auto_id='id_advanced_%s')\n+            self.search_filters.append(_(\"Not in a set\"))\n             return qs.filter(voucher_set__isnull=True)\n \n         self.form = self.form_class(self.request.GET)\n-        if not self.form.is_valid():\n+        # This form is exactly the same as the other one, apart from having\n+        # fields with different IDs, so that they are unique within the page\n+        # (non-unique field IDs also break Select2)\n+        self.advanced_form = self.form_class(self.request.GET, auto_id='id_advanced_%s')\n+        if not all([self.form.is_valid(), self.advanced_form.is_valid()]):\n             return qs\n \n-        data = self.form.cleaned_data\n-        if data['name']:\n-            qs = qs.filter(name__icontains=data['name'])\n-            self.description_ctx['name_filter'] \\\n-                = _(\"with name matching '%s'\") % data['name']\n-        if data['code']:\n-            qs = qs.filter(code=data['code'])\n-            self.description_ctx['code_filter'] \\\n-                = _(\"with code '%s'\") % data['code']\n-        if data['is_active']:\n+        name = self.form.cleaned_data['name']\n+        code = self.form.cleaned_data['code']\n+        offer_name = self.form.cleaned_data['offer_name']\n+        is_active = self.form.cleaned_data['is_active']\n+        in_set = self.form.cleaned_data['in_set']\n+        has_offers = self.form.cleaned_data['has_offers']\n+\n+        if name:\n+            qs = qs.filter(name__icontains=name)\n+            self.search_filters.append(_('Name matches \"%s\"') % name)\n+        if code:\n+            qs = qs.filter(code=code)\n+            self.search_filters.append(_('Code is \"%s\"') % code)\n+        if offer_name:\n+            qs = qs.filter(offers__name__icontains=offer_name)\n+            self.search_filters.append(_('Offer name matches \"%s\"') % offer_name)\n+        if is_active is not None:\n             now = timezone.now()\n-            qs = qs.filter(start_datetime__lte=now, end_datetime__gte=now)\n-            self.description_ctx['main_filter'] = _('Active vouchers')\n-        if not data['in_set']:\n-            qs = qs.filter(voucher_set__isnull=True)\n+            if is_active:\n+                qs = qs.filter(start_datetime__lte=now, end_datetime__gte=now)\n+                self.search_filters.append(_(\"Is active\"))\n+            else:\n+                qs = qs.filter(end_datetime__lt=now)\n+                self.search_filters.append(_(\"Is inactive\"))\n+        if in_set is not None:\n+            qs = qs.filter(voucher_set__isnull=not in_set)\n+            self.search_filters.append(_(\"In a set\") if in_set else _(\"Not in a set\"))\n+        if has_offers is not None:\n+            qs = qs.filter(offers__isnull=not has_offers).distinct()\n+            self.search_filters.append(_(\"Has offers\") if has_offers else _(\"Has no offers\"))\n \n         return qs\n \n     def get_context_data(self, **kwargs):\n         ctx = super().get_context_data(**kwargs)\n-        if self.form.is_bound:\n-            description = self.description_template % self.description_ctx\n-        else:\n-            description = _(\"Vouchers\")\n-        ctx['description'] = description\n         ctx['form'] = self.form\n+        ctx['advanced_form'] = self.advanced_form\n+        ctx['search_filters'] = self.search_filters\n         return ctx\n \n \n-class VoucherCreateView(generic.FormView):\n+class VoucherCreateView(generic.CreateView):\n     model = Voucher\n     template_name = 'oscar/dashboard/vouchers/voucher_form.html'\n     form_class = VoucherForm\n+    success_url = reverse_lazy('dashboard:voucher-list')\n \n     def get_context_data(self, **kwargs):\n         ctx = super().get_context_data(**kwargs)\n@@ -95,44 +109,19 @@ def get_context_data(self, **kwargs):\n         return ctx\n \n     def get_initial(self):\n-        return dict(\n-            exclusive=True\n-        )\n+        initial = super().get_initial()\n+        initial['start_datetime'] = timezone.now()\n+        return initial\n \n     @transaction.atomic()\n     def form_valid(self, form):\n-        # Create offer and benefit\n-        condition = Condition.objects.create(\n-            range=form.cleaned_data['benefit_range'],\n-            type=Condition.COUNT,\n-            value=1\n-        )\n-        benefit = Benefit.objects.create(\n-            range=form.cleaned_data['benefit_range'],\n-            type=form.cleaned_data['benefit_type'],\n-            value=form.cleaned_data['benefit_value']\n-        )\n-        name = form.cleaned_data['name']\n-        offer = ConditionalOffer.objects.create(\n-            name=get_offer_name(name),\n-            offer_type=ConditionalOffer.VOUCHER,\n-            benefit=benefit,\n-            condition=condition,\n-            exclusive=form.cleaned_data['exclusive'],\n-        )\n-        voucher = Voucher.objects.create(\n-            name=name,\n-            code=form.cleaned_data['code'],\n-            usage=form.cleaned_data['usage'],\n-            start_datetime=form.cleaned_data['start_datetime'],\n-            end_datetime=form.cleaned_data['end_datetime'],\n-        )\n-        voucher.offers.add(offer)\n-        return HttpResponseRedirect(self.get_success_url())\n+        response = super().form_valid(form)\n+        self.object.offers.add(*form.cleaned_data['offers'])\n+        return response\n \n     def get_success_url(self):\n         messages.success(self.request, _(\"Voucher created\"))\n-        return reverse('dashboard:voucher-list')\n+        return super().get_success_url()\n \n \n class VoucherStatsView(generic.DetailView):\n@@ -148,72 +137,39 @@ def get_context_data(self, **kwargs):\n         return ctx\n \n \n-class VoucherUpdateView(generic.FormView):\n+class VoucherUpdateView(generic.UpdateView):\n     template_name = 'oscar/dashboard/vouchers/voucher_form.html'\n+    context_object_name = 'voucher'\n     model = Voucher\n     form_class = VoucherForm\n+    success_url = reverse_lazy('dashboard:voucher-list')\n \n-    def get_voucher(self):\n-        if not hasattr(self, 'voucher'):\n-            self.voucher = Voucher.objects.get(id=self.kwargs['pk'])\n-        return self.voucher\n+    def dispatch(self, request, *args, **kwargs):\n+        voucher_set = self.get_object().voucher_set\n+        if voucher_set is not None:\n+            messages.warning(request, _(\"The voucher can only be edited as part of its set\"))\n+            return redirect('dashboard:voucher-set-update', pk=voucher_set.pk)\n+        return super().dispatch(request, *args, **kwargs)\n \n     def get_context_data(self, **kwargs):\n         ctx = super().get_context_data(**kwargs)\n-        ctx['title'] = self.voucher.name\n-        ctx['voucher'] = self.voucher\n+        ctx['title'] = self.object.name\n         return ctx\n \n-    def get_form_kwargs(self):\n-        kwargs = super().get_form_kwargs()\n-        kwargs['voucher'] = self.get_voucher()\n-        return kwargs\n-\n     def get_initial(self):\n-        voucher = self.get_voucher()\n-        offer = voucher.offers.first()\n-        benefit = offer.benefit\n-        return {\n-            'name': voucher.name,\n-            'code': voucher.code,\n-            'start_datetime': voucher.start_datetime,\n-            'end_datetime': voucher.end_datetime,\n-            'usage': voucher.usage,\n-            'benefit_type': benefit.type,\n-            'benefit_range': benefit.range,\n-            'benefit_value': benefit.value,\n-            'exclusive': offer.exclusive,\n-        }\n+        initial = super().get_initial()\n+        initial['offers'] = self.object.offers.all()\n+        return initial\n \n     @transaction.atomic()\n     def form_valid(self, form):\n-        voucher = self.get_voucher()\n-        voucher.name = form.cleaned_data['name']\n-        voucher.code = form.cleaned_data['code']\n-        voucher.usage = form.cleaned_data['usage']\n-        voucher.start_datetime = form.cleaned_data['start_datetime']\n-        voucher.end_datetime = form.cleaned_data['end_datetime']\n-        voucher.save()\n-\n-        offer = voucher.offers.first()\n-        offer.condition.range = form.cleaned_data['benefit_range']\n-        offer.condition.save()\n-\n-        offer.exclusive = form.cleaned_data['exclusive']\n-        offer.name = get_offer_name(voucher.name)\n-        offer.save()\n-\n-        benefit = voucher.benefit\n-        benefit.range = form.cleaned_data['benefit_range']\n-        benefit.type = form.cleaned_data['benefit_type']\n-        benefit.value = form.cleaned_data['benefit_value']\n-        benefit.save()\n-\n-        return HttpResponseRedirect(self.get_success_url())\n+        response = super().form_valid(form)\n+        self.object.offers.set(form.cleaned_data['offers'])\n+        return response\n \n     def get_success_url(self):\n         messages.success(self.request, _(\"Voucher updated\"))\n-        return reverse('dashboard:voucher-list')\n+        return super().get_success_url()\n \n \n class VoucherDeleteView(generic.DeleteView):\n@@ -221,9 +177,19 @@ class VoucherDeleteView(generic.DeleteView):\n     template_name = 'oscar/dashboard/vouchers/voucher_delete.html'\n     context_object_name = 'voucher'\n \n+    @transaction.atomic\n+    def delete(self, request, *args, **kwargs):\n+        response = super().delete(request, *args, **kwargs)\n+        if self.object.voucher_set is not None:\n+            self.object.voucher_set.update_count()\n+        return response\n+\n     def get_success_url(self):\n         messages.warning(self.request, _(\"Voucher deleted\"))\n-        return reverse('dashboard:voucher-list')\n+        if self.object.voucher_set is not None:\n+            return reverse('dashboard:voucher-set-detail', kwargs={'pk': self.object.voucher_set.pk})\n+        else:\n+            return reverse('dashboard:voucher-list')\n \n \n class VoucherSetCreateView(generic.CreateView):\n@@ -237,40 +203,9 @@ def get_context_data(self, **kwargs):\n         return ctx\n \n     def get_initial(self):\n-        return {\n-            'start_datetime': timezone.now(),\n-            'end_datetime': timezone.now()\n-        }\n-\n-    def form_valid(self, form):\n-        condition = Condition.objects.create(\n-            range=form.cleaned_data['benefit_range'],\n-            type=Condition.COUNT,\n-            value=1\n-        )\n-        benefit = Benefit.objects.create(\n-            range=form.cleaned_data['benefit_range'],\n-            type=form.cleaned_data['benefit_type'],\n-            value=form.cleaned_data['benefit_value']\n-        )\n-        name = form.cleaned_data['name']\n-        offer = ConditionalOffer.objects.create(\n-            name=get_offer_name(name),\n-            offer_type=ConditionalOffer.VOUCHER,\n-            benefit=benefit,\n-            condition=condition,\n-        )\n-\n-        VoucherSet.objects.create(\n-            name=name,\n-            count=form.cleaned_data['count'],\n-            code_length=form.cleaned_data['code_length'],\n-            description=form.cleaned_data['description'],\n-            start_datetime=form.cleaned_data['start_datetime'],\n-            end_datetime=form.cleaned_data['end_datetime'],\n-            offer=offer,\n-        )\n-        return HttpResponseRedirect(self.get_success_url())\n+        initial = super().get_initial()\n+        initial['start_datetime'] = timezone.now()\n+        return initial\n \n     def get_success_url(self):\n         messages.success(self.request, _(\"Voucher set created\"))\n@@ -280,78 +215,27 @@ def get_success_url(self):\n class VoucherSetUpdateView(generic.UpdateView):\n     template_name = 'oscar/dashboard/vouchers/voucher_set_form.html'\n     model = VoucherSet\n+    context_object_name = 'voucher_set'\n     form_class = VoucherSetForm\n \n     def get_context_data(self, **kwargs):\n         ctx = super().get_context_data(**kwargs)\n         ctx['title'] = self.object.name\n-        ctx['voucher'] = self.object\n         return ctx\n \n-    def get_voucherset(self):\n-        if not hasattr(self, 'voucherset'):\n-            self.voucherset = VoucherSet.objects.get(id=self.kwargs['pk'])\n-        return self.voucherset\n-\n     def get_initial(self):\n-        voucherset = self.get_voucherset()\n-        offer = voucherset.offer\n-        benefit = offer.benefit\n-        return {\n-            'name': voucherset.name,\n-            'count': voucherset.count,\n-            'code_length': voucherset.code_length,\n-            'start_datetime': voucherset.start_datetime,\n-            'end_datetime': voucherset.end_datetime,\n-            'description': voucherset.description,\n-            'benefit_type': benefit.type,\n-            'benefit_range': benefit.range,\n-            'benefit_value': benefit.value,\n-        }\n-\n-    def form_valid(self, form):\n-        voucherset = form.save()\n-        if not voucherset.offer:\n-            condition = Condition.objects.create(\n-                range=form.cleaned_data['benefit_range'],\n-                type=Condition.COUNT,\n-                value=1\n-            )\n-            benefit = Benefit.objects.create(\n-                range=form.cleaned_data['benefit_range'],\n-                type=form.cleaned_data['benefit_type'],\n-                value=form.cleaned_data['benefit_value']\n-            )\n-            name = form.cleaned_data['name']\n-            offer, __ = ConditionalOffer.objects.update_or_create(\n-                name=get_offer_name(name),\n-                defaults=dict(\n-                    offer_type=ConditionalOffer.VOUCHER,\n-                    benefit=benefit,\n-                    condition=condition,\n-                )\n-            )\n-            voucherset.offer = offer\n-            for voucher in voucherset.vouchers.all():\n-                if offer not in voucher.offers.all():\n-                    voucher.offers.add(offer)\n-\n-        else:\n-            benefit = voucherset.offer.benefit\n-            benefit.range = form.cleaned_data['benefit_range']\n-            benefit.type = form.cleaned_data['benefit_type']\n-            benefit.value = form.cleaned_data['benefit_value']\n-            benefit.save()\n-            condition = voucherset.offer.condition\n-            condition.range = form.cleaned_data['benefit_range']\n-            condition.save()\n-        voucherset.save()\n-\n-        return HttpResponseRedirect(self.get_success_url())\n+        initial = super().get_initial()\n+        # All vouchers in the set have the same \"usage\" and \"offers\", so we use\n+        # the first one\n+        voucher = self.object.vouchers.first()\n+        if voucher is not None:\n+            initial['usage'] = voucher.usage\n+            initial['offers'] = voucher.offers.all()\n+        return initial\n \n     def get_success_url(self):\n         messages.success(self.request, _(\"Voucher updated\"))\n-        return reverse('dashboard:voucher-set', kwargs={'pk': self.object.pk})\n+        return reverse('dashboard:voucher-set-detail', kwargs={'pk': self.object.pk})\n \n \n class VoucherSetDetailView(generic.ListView):\n@@ -360,7 +244,6 @@ class VoucherSetDetailView(generic.ListView):\n     context_object_name = 'vouchers'\n     template_name = 'oscar/dashboard/vouchers/voucher_set_detail.html'\n     form_class = VoucherSetSearchForm\n-    description_template = _(\"%(main_filter)s %(name_filter)s %(code_filter)s\")\n     paginate_by = 50\n \n     def dispatch(self, request, *args, **kwargs):\n@@ -368,6 +251,7 @@ def dispatch(self, request, *args, **kwargs):\n         return super().dispatch(request, *args, **kwargs)\n \n     def get_queryset(self):\n+        self.search_filters = []\n         qs = (\n             self.model.objects\n             .filter(voucher_set=self.voucher_set)\n@@ -377,9 +261,6 @@ def get_queryset(self):\n                            ['num_basket_additions', 'num_orders',\n                             'date_created'],\n                            '-date_created')\n-        self.description_ctx = {'main_filter': _('All vouchers'),\n-                                'name_filter': '',\n-                                'code_filter': ''}\n \n         # If form not submitted, return early\n         is_form_submitted = (\n@@ -396,28 +277,22 @@ def get_queryset(self):\n         data = self.form.cleaned_data\n         if data['code']:\n             qs = qs.filter(code__icontains=data['code'])\n-            self.description_ctx['code_filter'] \\\n-                = _(\"with code '%s'\") % data['code']\n-        if data['is_active']:\n-            now = timezone.now()\n-            qs = qs.filter(start_datetime__lte=now, end_datetime__gt=now)\n-            self.description_ctx['main_filter'] = _('Active vouchers')\n+            self.search_filters.append(_('Code matches \"%s\"') % data['code'])\n \n         return qs\n \n     def get_context_data(self, **kwargs):\n         ctx = super().get_context_data(**kwargs)\n         ctx['voucher_set'] = self.voucher_set\n-        ctx['description'] = self.voucher_set.name\n         ctx['form'] = self.form\n+        ctx['search_filters'] = self.search_filters\n         return ctx\n \n \n class VoucherSetListView(generic.ListView):\n     model = VoucherSet\n-    context_object_name = 'vouchers'\n+    context_object_name = 'voucher_sets'\n     template_name = 'oscar/dashboard/vouchers/voucher_set_list.html'\n-    description_template = _(\"%(main_filter)s %(name_filter)s %(code_filter)s\")\n     paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE\n \n     def get_queryset(self):\n@@ -451,3 +326,13 @@ def get(self, request, *args, **kwargs):\n             writer.writerow([code])\n \n         return response\n+\n+\n+class VoucherSetDeleteView(generic.DeleteView):\n+    model = VoucherSet\n+    template_name = 'oscar/dashboard/vouchers/voucher_set_delete.html'\n+    context_object_name = 'voucher_set'\n+\n+    def get_success_url(self):\n+        messages.warning(self.request, _(\"Voucher set deleted\"))\n+        return reverse('dashboard:voucher-set-list')\ndiff --git a/src/oscar/apps/offer/abstract_models.py b/src/oscar/apps/offer/abstract_models.py\n--- a/src/oscar/apps/offer/abstract_models.py\n+++ b/src/oscar/apps/offer/abstract_models.py\n@@ -248,6 +248,10 @@ def clean(self):\n             raise exceptions.ValidationError(\n                 _('End date should be later than start date'))\n \n+    @property\n+    def is_voucher_offer_type(self):\n+        return self.offer_type == self.VOUCHER\n+\n     @property\n     def is_open(self):\n         return self.status == self.OPEN\ndiff --git a/src/oscar/apps/offer/apps.py b/src/oscar/apps/offer/apps.py\n--- a/src/oscar/apps/offer/apps.py\n+++ b/src/oscar/apps/offer/apps.py\n@@ -13,7 +13,7 @@ class OfferConfig(OscarConfig):\n     namespace = 'offer'\n \n     def ready(self):\n-        from . import signals  # noqa\n+        from . import receivers  # noqa\n \n         self.detail_view = get_class('offer.views', 'OfferDetailView')\n         self.list_view = get_class('offer.views', 'OfferListView')\ndiff --git a/src/oscar/apps/offer/signals.py b/src/oscar/apps/offer/receivers.py\nsimilarity index 100%\nrename from src/oscar/apps/offer/signals.py\nrename to src/oscar/apps/offer/receivers.py\ndiff --git a/src/oscar/apps/voucher/abstract_models.py b/src/oscar/apps/voucher/abstract_models.py\n--- a/src/oscar/apps/voucher/abstract_models.py\n+++ b/src/oscar/apps/voucher/abstract_models.py\n@@ -1,14 +1,13 @@\n from decimal import Decimal\n \n from django.core import exceptions\n-from django.db import models, transaction\n+from django.db import models\n from django.db.models import Sum\n from django.utils import timezone\n from django.utils.translation import gettext_lazy as _\n \n-from oscar.apps.voucher.utils import get_unused_code\n from oscar.core.compat import AUTH_USER_MODEL\n-from oscar.core.loading import get_model\n+from oscar.core.decorators import deprecated\n \n \n class AbstractVoucherSet(models.Model):\n@@ -17,7 +16,7 @@ class AbstractVoucherSet(models.Model):\n     a VoucherSet is a group of voucher that are generated\n     automatically.\n \n-    - count: the minimum number of vouchers in the set. If this is kept at\n+    - count: the number of vouchers in the set. If this is kept at\n     zero, vouchers are created when and as needed.\n \n     - code_length: the length of the voucher code. Codes are by default created\n@@ -28,7 +27,7 @@ class AbstractVoucherSet(models.Model):\n       range for all vouchers in the set.\n     \"\"\"\n \n-    name = models.CharField(verbose_name=_('Name'), max_length=100)\n+    name = models.CharField(verbose_name=_('Name'), max_length=100, unique=True)\n     count = models.PositiveIntegerField(verbose_name=_('Number of vouchers'))\n     code_length = models.IntegerField(\n         verbose_name=_('Length of Code'), default=12)\n@@ -37,11 +36,6 @@ class AbstractVoucherSet(models.Model):\n     start_datetime = models.DateTimeField(_('Start datetime'))\n     end_datetime = models.DateTimeField(_('End datetime'))\n \n-    offer = models.OneToOneField(\n-        'offer.ConditionalOffer', related_name='voucher_set',\n-        verbose_name=_(\"Offer\"), limit_choices_to={'offer_type': \"Voucher\"},\n-        on_delete=models.CASCADE, null=True, blank=True)\n-\n     class Meta:\n         abstract = True\n         app_label = 'voucher'\n@@ -53,44 +47,21 @@ class Meta:\n     def __str__(self):\n         return self.name\n \n-    def generate_vouchers(self):\n-        \"\"\"Generate vouchers for this set\"\"\"\n-        current_count = self.vouchers.count()\n-        for i in range(current_count, self.count):\n-            self.add_new()\n-\n-    def add_new(self):\n-        \"\"\"Add a new voucher to this set\"\"\"\n-        Voucher = get_model('voucher', 'Voucher')\n-        code = get_unused_code(length=self.code_length)\n-        voucher = Voucher.objects.create(\n-            name=self.name,\n-            code=code,\n-            voucher_set=self,\n-            usage=Voucher.SINGLE_USE,\n-            start_datetime=self.start_datetime,\n-            end_datetime=self.end_datetime)\n-\n-        if self.offer:\n-            voucher.offers.add(self.offer)\n-\n-        return voucher\n+    def clean(self):\n+        if self.start_datetime and self.end_datetime and (self.start_datetime > self.end_datetime):\n+            raise exceptions.ValidationError(_('End date should be later than start date'))\n+\n+    def update_count(self):\n+        vouchers_count = self.vouchers.count()\n+        if self.count != vouchers_count:\n+            self.count = vouchers_count\n+            self.save()\n \n     def is_active(self, test_datetime=None):\n         \"\"\"Test whether this voucher set is currently active. \"\"\"\n         test_datetime = test_datetime or timezone.now()\n         return self.start_datetime <= test_datetime <= self.end_datetime\n \n-    def save(self, *args, **kwargs):\n-        self.count = max(self.count, self.vouchers.count())\n-        with transaction.atomic():\n-            super().save(*args, **kwargs)\n-            self.generate_vouchers()\n-            self.vouchers.update(\n-                start_datetime=self.start_datetime,\n-                end_datetime=self.end_datetime\n-            )\n-\n     @property\n     def num_basket_additions(self):\n         value = self.vouchers.aggregate(result=Sum('num_basket_additions'))\n@@ -119,7 +90,7 @@ class AbstractVoucher(models.Model):\n     Oscar enforces those modes by creating VoucherApplication\n     instances when a voucher is used for an order.\n     \"\"\"\n-    name = models.CharField(_(\"Name\"), max_length=128,\n+    name = models.CharField(_(\"Name\"), max_length=128, unique=True,\n                             help_text=_(\"This will be shown in the checkout\"\n                                         \" and basket once the voucher is\"\n                                         \" entered\"))\n@@ -170,8 +141,7 @@ def __str__(self):\n         return self.name\n \n     def clean(self):\n-        if all([self.start_datetime, self.end_datetime,\n-                self.start_datetime > self.end_datetime]):\n+        if self.start_datetime and self.end_datetime and (self.start_datetime > self.end_datetime):\n             raise exceptions.ValidationError(\n                 _('End date should be later than start date'))\n \n@@ -260,6 +230,7 @@ def record_discount(self, discount):\n     record_discount.alters_data = True\n \n     @property\n+    @deprecated\n     def benefit(self):\n         \"\"\"\n         Returns the first offer's benefit instance.\ndiff --git a/src/oscar/apps/voucher/apps.py b/src/oscar/apps/voucher/apps.py\n--- a/src/oscar/apps/voucher/apps.py\n+++ b/src/oscar/apps/voucher/apps.py\n@@ -10,4 +10,3 @@ class VoucherConfig(OscarConfig):\n \n     def ready(self):\n         from . import receivers  # noqa\n-        from . import signals  # noqa\ndiff --git a/src/oscar/apps/voucher/migrations/0009_make_voucher_names_unique.py b/src/oscar/apps/voucher/migrations/0009_make_voucher_names_unique.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/voucher/migrations/0009_make_voucher_names_unique.py\n@@ -0,0 +1,33 @@\n+# Generated by Django 3.1.2 on 2021-02-24 06:18\n+\n+from django.db import migrations\n+\n+\n+def make_voucher_names_unique(apps, schema_editor):\n+    \"\"\"\n+    Appends a number to non-unique voucher names.\n+    \"\"\"\n+    Voucher = apps.get_model('voucher', 'Voucher')\n+    vouchers = Voucher.objects.order_by('date_created')\n+    # Find vouchers with non-unique names\n+    vouchers_for_name = {}\n+    for voucher in vouchers:\n+        if voucher.name not in vouchers_for_name:\n+            vouchers_for_name[voucher.name] = []\n+        vouchers_for_name[voucher.name].append(voucher.id)\n+    # Change names for vouchers with non-unique names\n+    for voucher in vouchers:\n+        if len(vouchers_for_name[voucher.name]) > 1:\n+            voucher.name = \"%s - %d\" % (voucher.name, vouchers_for_name[voucher.name].index(voucher.id) + 1)\n+            voucher.save()\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('voucher', '0008_auto_20200801_0817'),\n+    ]\n+\n+    operations = [\n+        migrations.RunPython(make_voucher_names_unique, migrations.RunPython.noop),\n+    ]\ndiff --git a/src/oscar/apps/voucher/migrations/0010_auto_20210224_0712.py b/src/oscar/apps/voucher/migrations/0010_auto_20210224_0712.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/voucher/migrations/0010_auto_20210224_0712.py\n@@ -0,0 +1,27 @@\n+# Generated by Django 3.1.2 on 2021-02-24 07:12\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('voucher', '0009_make_voucher_names_unique'),\n+    ]\n+\n+    operations = [\n+        migrations.AlterField(\n+            model_name='voucher',\n+            name='name',\n+            field=models.CharField(help_text='This will be shown in the checkout and basket once the voucher is entered', max_length=128, unique=True, verbose_name='Name'),\n+        ),\n+        migrations.AlterField(\n+            model_name='voucherset',\n+            name='name',\n+            field=models.CharField(max_length=100, unique=True, verbose_name='Name'),\n+        ),\n+        migrations.RemoveField(\n+            model_name='voucherset',\n+            name='offer',\n+        ),\n+    ]\ndiff --git a/src/oscar/apps/voucher/signals.py b/src/oscar/apps/voucher/signals.py\ndeleted file mode 100644\n--- a/src/oscar/apps/voucher/signals.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-from django.db.models.signals import post_delete\n-from django.dispatch import receiver\n-\n-from oscar.apps.voucher.utils import get_offer_name\n-from oscar.core.loading import get_model\n-\n-Voucher = get_model('voucher', 'Voucher')\n-ConditionalOffer = get_model('offer', 'ConditionalOffer')\n-\n-\n-@receiver(post_delete, sender=Voucher)\n-def delete_unused_related_conditional_offer(instance, **kwargs):\n-    voucher = instance  # the object is no longer in the database\n-\n-    try:\n-        conditional_offer = ConditionalOffer.objects.get(\n-            name=get_offer_name(voucher.name),\n-            offer_type=ConditionalOffer.VOUCHER\n-        )\n-    except (ConditionalOffer.DoesNotExist, ConditionalOffer.MultipleObjectsReturned):\n-        pass\n-    else:\n-        # Only delete if not used by other vouchers\n-        if not conditional_offer.vouchers.exists():\n-            conditional_offer.delete()\ndiff --git a/src/oscar/apps/voucher/utils.py b/src/oscar/apps/voucher/utils.py\n--- a/src/oscar/apps/voucher/utils.py\n+++ b/src/oscar/apps/voucher/utils.py\n@@ -1,7 +1,6 @@\n from itertools import zip_longest\n \n from django.utils.crypto import get_random_string\n-from django.utils.translation import gettext_lazy as _\n \n from oscar.core.loading import get_model\n \n@@ -34,11 +33,3 @@ def get_unused_code(length=12, group_length=4, separator='-'):\n                              separator=separator)\n         if not Voucher.objects.filter(code=code).exists():\n             return code\n-\n-\n-def get_offer_name(voucher_name):\n-    \"\"\"\n-    Return the name used for the auto-generated offer created\n-    when a voucher is created through the dashboard.\n-    \"\"\"\n-    return _(\"Offer for voucher '%s'\") % voucher_name\ndiff --git a/src/oscar/defaults.py b/src/oscar/defaults.py\n--- a/src/oscar/defaults.py\n+++ b/src/oscar/defaults.py\n@@ -82,6 +82,12 @@\n \n # Offers\n OSCAR_OFFERS_INCL_TAX = False\n+# Values (using the names of the model constants) from\n+# \"offer.ConditionalOffer.TYPE_CHOICES\"\n+OSCAR_OFFERS_IMPLEMENTED_TYPES = [\n+    'SITE',\n+    'VOUCHER',\n+]\n \n # Hidden Oscar features, e.g. wishlists or reviews\n OSCAR_HIDDEN_FEATURES = []\ndiff --git a/src/oscar/forms/widgets.py b/src/oscar/forms/widgets.py\n--- a/src/oscar/forms/widgets.py\n+++ b/src/oscar/forms/widgets.py\n@@ -6,6 +6,7 @@\n from django.forms.widgets import FileInput\n from django.utils import formats\n from django.utils.encoding import force_str\n+from django.utils.translation import gettext as _\n \n \n class ImageInput(FileInput):\n@@ -286,3 +287,18 @@ def optgroups(self, name, value, attrs=None):\n \n class MultipleRemoteSelect(RemoteSelect):\n     allow_multiple_selected = True\n+\n+\n+class NullBooleanSelect(forms.NullBooleanSelect):\n+    \"\"\"\n+    Customised NullBooleanSelect widget that gives the \"unknown\" choice a more\n+    meaningful label than the default of \"Unknown\".\n+    \"\"\"\n+\n+    def __init__(self, attrs=None):\n+        super().__init__(attrs)\n+        self.choices = (\n+            ('unknown', _('---------')),\n+            ('true', _('Yes')),\n+            ('false', _('No')),\n+        )\n", "test_patch": "diff --git a/src/oscar/test/factories/offer.py b/src/oscar/test/factories/offer.py\n--- a/src/oscar/test/factories/offer.py\n+++ b/src/oscar/test/factories/offer.py\n@@ -2,6 +2,8 @@\n \n from oscar.core.loading import get_model\n \n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+\n __all__ = [\n     'RangeFactory', 'ConditionFactory', 'BenefitFactory',\n     'ConditionalOfferFactory',\n@@ -47,6 +49,7 @@ class Meta:\n \n class ConditionalOfferFactory(factory.django.DjangoModelFactory):\n     name = factory.Sequence(lambda n: 'Test offer %d' % n)\n+    offer_type = ConditionalOffer.SITE\n     benefit = factory.SubFactory(BenefitFactory)\n     condition = factory.SubFactory(ConditionFactory)\n \ndiff --git a/src/oscar/test/factories/voucher.py b/src/oscar/test/factories/voucher.py\n--- a/src/oscar/test/factories/voucher.py\n+++ b/src/oscar/test/factories/voucher.py\n@@ -3,15 +3,20 @@\n import factory\n from django.utils.timezone import now\n \n+from oscar.apps.voucher.utils import get_unused_code\n from oscar.core.loading import get_model\n from oscar.test.factories import ConditionalOfferFactory\n \n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+Voucher = get_model('voucher', 'Voucher')\n+\n __all__ = ['VoucherFactory', 'VoucherSetFactory']\n \n \n class VoucherFactory(factory.django.DjangoModelFactory):\n     name = \"My voucher\"\n     code = \"MYVOUCHER\"\n+    usage = Voucher.MULTI_USE\n \n     start_datetime = now() - datetime.timedelta(days=1)\n     end_datetime = now() + datetime.timedelta(days=10)\n@@ -24,9 +29,23 @@ class VoucherSetFactory(factory.django.DjangoModelFactory):\n     name = factory.Sequence(lambda n: 'Voucher Set %d' % n)\n     count = 100\n     code_length = 12\n+    description = \"Dummy description\"\n     start_datetime = now() - datetime.timedelta(days=1)\n     end_datetime = now() + datetime.timedelta(days=10)\n-    offer = factory.SubFactory(ConditionalOfferFactory)\n \n     class Meta:\n         model = get_model('voucher', 'VoucherSet')\n+\n+    @factory.post_generation\n+    def vouchers(obj, create, extracted, **kwargs):\n+        if not create:\n+            return\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)\n+        for i in range(0, obj.count):\n+            voucher = Voucher.objects.create(name=\"%s - %d\" % (obj.name, i + 1),\n+                                             code=get_unused_code(length=obj.code_length),\n+                                             voucher_set=obj,\n+                                             usage=Voucher.MULTI_USE,\n+                                             start_datetime=obj.start_datetime,\n+                                             end_datetime=obj.end_datetime)\n+            voucher.offers.add(offer)\ndiff --git a/tests/functional/dashboard/test_dashboard.py b/tests/functional/dashboard/test_dashboard.py\n--- a/tests/functional/dashboard/test_dashboard.py\n+++ b/tests/functional/dashboard/test_dashboard.py\n@@ -32,7 +32,7 @@\n     'order_status_breakdown',\n )\n STAFF_STATS_KEYS = (\n-    'total_site_offers',\n+    'offer_maps',\n     'total_vouchers',\n )\n \ndiff --git a/tests/functional/dashboard/test_offer.py b/tests/functional/dashboard/test_offer.py\n--- a/tests/functional/dashboard/test_offer.py\n+++ b/tests/functional/dashboard/test_offer.py\n@@ -20,6 +20,7 @@ def test_can_create_an_offer(self):\n         metadata_page = list_page.click('Create new offer')\n         metadata_form = metadata_page.form\n         metadata_form['name'] = \"Test offer\"\n+        metadata_form['offer_type'] = models.ConditionalOffer.SITE\n \n         benefit_page = metadata_form.submit().follow()\n         benefit_form = benefit_page.form\n@@ -56,7 +57,7 @@ def test_offer_list_page(self):\n         res = form.submit()\n         self.assertFalse(\"No offers found\" in res.text)\n \n-        form['is_active'] = True\n+        form['is_active'] = \"true\"\n         res = form.submit()\n         self.assertFalse(\"No offers found\" in res.text)\n \n@@ -64,7 +65,19 @@ def test_offer_list_page(self):\n         offer.end_datetime = yesterday\n         offer.save()\n \n-        form['is_active'] = True\n+        form['is_active'] = \"true\"\n+        res = form.submit()\n+        self.assertTrue(\"No offers found\" in res.text)\n+\n+        tomorrow = timezone.now() + timezone.timedelta(days=1)\n+        offer.end_datetime = tomorrow\n+        offer.save()\n+\n+        form['offer_type'] = \"Site\"\n+        res = form.submit()\n+        self.assertFalse(\"No offers found\" in res.text)\n+\n+        form['offer_type'] = \"Voucher\"\n         res = form.submit()\n         self.assertTrue(\"No offers found\" in res.text)\n \n@@ -77,6 +90,7 @@ def test_can_update_an_existing_offer(self):\n         metadata_page = detail_page.click(linkid=\"edit_metadata\")\n         metadata_form = metadata_page.form\n         metadata_form['name'] = \"Offer A+\"\n+        metadata_form['offer_type'] = models.ConditionalOffer.SITE\n \n         benefit_page = metadata_form.submit().follow()\n         benefit_form = benefit_page.form\n@@ -153,6 +167,7 @@ def test_jump_back_to_incentive_step_for_new_offer(self):\n         metadata_page = list_page.click('Create new offer')\n         metadata_form = metadata_page.form\n         metadata_form['name'] = \"Test offer\"\n+        metadata_form['offer_type'] = models.ConditionalOffer.SITE\n \n         benefit_page = metadata_form.submit().follow()\n         benefit_form = benefit_page.form\n@@ -174,6 +189,7 @@ def test_jump_back_to_condition_step_for_new_offer(self):\n         metadata_page = list_page.click('Create new offer')\n         metadata_form = metadata_page.form\n         metadata_form['name'] = \"Test offer\"\n+        metadata_form['offer_type'] = models.ConditionalOffer.SITE\n \n         benefit_page = metadata_form.submit().follow()\n         benefit_form = benefit_page.form\n@@ -210,3 +226,66 @@ def test_jump_to_condition_step_for_existing_offer(self):\n \n         self.assertFalse('range' in condition_page.errors)\n         self.assertEqual(len(condition_page.errors), 0)\n+\n+\n+class TestOfferListSearch(testcases.WebTestCase):\n+    is_staff = True\n+\n+    TEST_CASES = [\n+        ({}, []),\n+        (\n+            {'name': 'Bob Smith'},\n+            ['Name matches \"Bob Smith\"']\n+        ),\n+        (\n+            {'is_active': True},\n+            ['Is active']\n+        ),\n+        (\n+            {'is_active': False},\n+            ['Is inactive']\n+        ),\n+        (\n+            {'offer_type': 'Site'},\n+            ['Is of type \"Site offer - available to all users\"']\n+        ),\n+        (\n+            {'has_vouchers': True},\n+            ['Has vouchers']\n+        ),\n+        (\n+            {'has_vouchers': False},\n+            ['Has no vouchers']\n+        ),\n+        (\n+            {'voucher_code': 'abcd1234'},\n+            ['Voucher code matches \"abcd1234\"']\n+        ),\n+        (\n+            {\n+                'name': 'Bob Smith',\n+                'is_active': True,\n+                'offer_type': 'Site',\n+                'has_vouchers': True,\n+                'voucher_code': 'abcd1234',\n+            },\n+            [\n+                'Name matches \"Bob Smith\"',\n+                'Is active',\n+                'Is of type \"Site offer - available to all users\"',\n+                'Has vouchers',\n+                'Voucher code matches \"abcd1234\"',\n+            ]\n+        ),\n+    ]\n+\n+    def test_search_filter_descriptions(self):\n+        url = reverse('dashboard:offer-list')\n+        for params, expected_filters in self.TEST_CASES:\n+            response = self.get(url, params=params)\n+            self.assertEqual(response.status_code, 200)\n+            applied_filters = [\n+                el.text.strip() for el in\n+                response.html.select('.search-filter-list .badge')\n+            ]\n+            self.assertEqual(applied_filters, expected_filters)\ndiff --git a/tests/functional/dashboard/test_voucher.py b/tests/functional/dashboard/test_voucher.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/functional/dashboard/test_voucher.py\n@@ -0,0 +1,76 @@\n+from django.urls import reverse\n+\n+from oscar.test.testcases import WebTestCase\n+\n+\n+class TestVoucherListSearch(WebTestCase):\n+    is_staff = True\n+\n+    TEST_CASES = [\n+        ({}, ['Not in a set']),\n+        (\n+            {'name': 'Bob Smith'},\n+            ['Name matches \"Bob Smith\"']\n+        ),\n+        (\n+            {'code': 'abcd1234'},\n+            ['Code is \"ABCD1234\"']\n+        ),\n+        (\n+            {'offer_name': 'Shipping offer'},\n+            ['Offer name matches \"Shipping offer\"']\n+        ),\n+        (\n+            {'is_active': True},\n+            ['Is active']\n+        ),\n+        (\n+            {'is_active': False},\n+            ['Is inactive']\n+        ),\n+        (\n+            {'in_set': True},\n+            ['In a set']\n+        ),\n+        (\n+            {'in_set': False},\n+            ['Not in a set']\n+        ),\n+        (\n+            {'has_offers': True},\n+            ['Has offers']\n+        ),\n+        (\n+            {'has_offers': False},\n+            ['Has no offers']\n+        ),\n+        (\n+            {\n+                'name': 'Bob Smith',\n+                'code': 'abcd1234',\n+                'offer_name': 'Shipping offer',\n+                'is_active': True,\n+                'in_set': True,\n+                'has_offers': True,\n+            },\n+            [\n+                'Name matches \"Bob Smith\"',\n+                'Code is \"ABCD1234\"',\n+                'Offer name matches \"Shipping offer\"',\n+                'Is active',\n+                'In a set',\n+                'Has offers',\n+            ]\n+        ),\n+    ]\n+\n+    def test_search_filter_descriptions(self):\n+        url = reverse('dashboard:voucher-list')\n+        for params, expected_filters in self.TEST_CASES:\n+            response = self.get(url, params=params)\n+            self.assertEqual(response.status_code, 200)\n+            applied_filters = [\n+                el.text.strip() for el in\n+                response.html.select('.search-filter-list .badge')\n+            ]\n+            self.assertEqual(applied_filters, expected_filters)\ndiff --git a/tests/integration/dashboard/test_offer_views.py b/tests/integration/dashboard/test_offer_views.py\n--- a/tests/integration/dashboard/test_offer_views.py\n+++ b/tests/integration/dashboard/test_offer_views.py\n@@ -1,10 +1,14 @@\n-\n import pytest\n+from django.contrib.messages import get_messages\n+from django.urls import reverse\n \n from oscar.apps.dashboard.offers import views as offer_views\n from oscar.apps.dashboard.ranges import views as range_views\n from oscar.core.loading import get_model\n-from oscar.test.factories import catalogue, offer\n+from oscar.test.factories.catalogue import ProductFactory\n+from oscar.test.factories.offer import ConditionalOfferFactory, RangeFactory\n+from oscar.test.factories.voucher import VoucherFactory\n+from tests.fixtures import RequestFactory\n \n Range = get_model('offer', 'Range')\n ConditionalOffer = get_model('offer', 'ConditionalOffer')\n@@ -13,23 +17,23 @@\n @pytest.fixture\n def many_ranges():\n     for i in range(0, 30):\n-        offer.RangeFactory()\n+        RangeFactory()\n     return Range.objects.all()\n \n \n @pytest.fixture\n def many_offers():\n     for i in range(0, 30):\n-        offer.ConditionalOfferFactory(\n+        ConditionalOfferFactory(\n             name='Test offer %d' % i\n         )\n \n \n @pytest.fixture\n def range_with_products():\n-    productrange = offer.RangeFactory()\n+    productrange = RangeFactory()\n     for i in range(0, 30):\n-        product = catalogue.ProductFactory()\n+        product = ProductFactory()\n         productrange.add_product(product)\n     return productrange\n \n@@ -55,6 +59,43 @@ def test_offer_list_view(self, rf, many_offers):\n         assert response.context_data['page_obj']\n         assert response.status_code == 200\n \n+    def test_offer_delete_view_for_voucher_offer_without_vouchers(self):\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)\n+\n+        view = offer_views.OfferDeleteView.as_view()\n+\n+        request = RequestFactory().get('/')\n+        response = view(request, pk=offer.pk)\n+        assert response.status_code == 200\n+\n+        request = RequestFactory().post('/')\n+        response = view(request, pk=offer.pk)\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:offer-list')\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == ('success', \"Offer deleted!\")\n+        assert not ConditionalOffer.objects.exists()\n+\n+    def test_offer_delete_view_for_voucher_offer_with_vouchers(self):\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)\n+        VoucherFactory().offers.add(offer)\n+\n+        view = offer_views.OfferDeleteView.as_view()\n+\n+        request = RequestFactory().get('/')\n+        response = view(request, pk=offer.pk)\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:offer-detail', kwargs={'pk': offer.pk})\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == (\n+            'warning', \"This offer can only be deleted if it has no vouchers attached to it\")\n+\n+        request = RequestFactory().post('/')\n+        response = view(request, pk=offer.pk)\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:offer-detail', kwargs={'pk': offer.pk})\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == (\n+            'warning', \"This offer can only be deleted if it has no vouchers attached to it\")\n+        assert ConditionalOffer.objects.exists()\n+\n     def test_range_product_list_view(self, rf, range_with_products):\n         view = range_views.RangeProductListView.as_view()\n         pk = range_with_products.pk\ndiff --git a/tests/integration/dashboard/test_voucher_form.py b/tests/integration/dashboard/test_voucher_form.py\n--- a/tests/integration/dashboard/test_voucher_form.py\n+++ b/tests/integration/dashboard/test_voucher_form.py\n@@ -2,10 +2,17 @@\n \n import pytest\n from django import test\n+from django.urls import reverse\n from django.utils import timezone\n \n from oscar.apps.dashboard.vouchers import forms\n-from oscar.test.factories.offer import RangeFactory\n+from oscar.core.loading import get_model\n+from oscar.test.factories.offer import (\n+    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n+from oscar.test.factories.voucher import VoucherSetFactory\n+\n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+Voucher = get_model('voucher', 'Voucher')\n \n \n class TestVoucherForm(test.TestCase):\n@@ -16,14 +23,16 @@ def test_doesnt_crash_on_empty_date_fields(self):\n         exception (instead of just failing validation) when being called with\n         empty fields. This tests exists to prevent a regression.\n         \"\"\"\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER,\n+                                        benefit=BenefitFactory(range=None),\n+                                        condition=ConditionFactory(range=None, value=1))\n         data = {\n             'code': '',\n             'name': '',\n-            'start_date': '',\n-            'end_date': '',\n-            'benefit_range': '',\n-            'benefit_type': 'Percentage',\n+            'start_datetime': '',\n+            'end_datetime': '',\n             'usage': 'Single use',\n+            'offers': [offer.pk],\n         }\n         form = forms.VoucherForm(data=data)\n         try:\n@@ -40,7 +49,9 @@ class TestVoucherSetForm:\n \n     def test_valid_form(self):\n         a_range = RangeFactory(includes_all_products=True)\n-\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER,\n+                                        benefit=BenefitFactory(range=a_range),\n+                                        condition=ConditionFactory(range=a_range, value=1))\n         start = timezone.now()\n         end = start + timedelta(days=1)\n         data = {\n@@ -50,9 +61,8 @@ def test_valid_form(self):\n             'start_datetime': start,\n             'end_datetime': end,\n             'count': 10,\n-            'benefit_range': a_range.pk,\n-            'benefit_type': 'Percentage',\n-            'benefit_value': 10,\n+            'usage': Voucher.MULTI_USE,\n+            'offers': [offer.pk],\n         }\n         form = forms.VoucherSetForm(data=data)\n         assert form.is_valid()\n@@ -60,3 +70,23 @@ def test_valid_form(self):\n         assert instance.count == instance.vouchers.count()\n         assert instance.start_datetime == start\n         assert instance.end_datetime == end\n+\n+    def test_valid_form_reduced_count(self):\n+        voucher_set = VoucherSetFactory(count=5)\n+        voucher = voucher_set.vouchers.first()\n+        data = {\n+            'name': voucher_set.name,\n+            'code_length': voucher_set.code_length,\n+            'description': voucher_set.description,\n+            'start_datetime': voucher_set.start_datetime,\n+            'end_datetime': voucher_set.end_datetime,\n+            'count': 4,\n+            'usage': voucher.usage,\n+            'offers': voucher.offers.all(),\n+        }\n+        form = forms.VoucherSetForm(data, instance=voucher_set)\n+        assert not form.is_valid()\n+        assert form.errors['count'][0] == (\n+            'This cannot be used to delete vouchers (currently 5) in this set. '\n+            'You can do that on the <a href=\"%s\">detail</a> page.') % reverse('dashboard:voucher-set-detail',\n+                                                                              kwargs={'pk': voucher_set.pk})\ndiff --git a/tests/integration/dashboard/test_voucher_views.py b/tests/integration/dashboard/test_voucher_views.py\n--- a/tests/integration/dashboard/test_voucher_views.py\n+++ b/tests/integration/dashboard/test_voucher_views.py\n@@ -1,9 +1,15 @@\n import pytest\n+from django.contrib.messages import get_messages\n+from django.urls import reverse\n \n from oscar.apps.dashboard.vouchers import views\n from oscar.core.loading import get_model\n from oscar.test.factories import voucher\n+from oscar.test.factories.offer import ConditionalOfferFactory\n+from tests.fixtures import RequestFactory\n \n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+Voucher = get_model('voucher', 'Voucher')\n VoucherSet = get_model('voucher', 'VoucherSet')\n \n \n@@ -13,6 +19,66 @@ def many_voucher_sets():\n     return VoucherSet.objects.all()\n \n \n+@pytest.mark.django_db\n+class TestDashboardVouchers:\n+\n+    def test_voucher_update_view_for_voucher_in_set(self):\n+        vs = voucher.VoucherSetFactory(count=10)\n+        v = vs.vouchers.first()\n+\n+        view = views.VoucherUpdateView.as_view()\n+\n+        request = RequestFactory().get('/')\n+        response = view(request, pk=v.pk)\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:voucher-set-update', kwargs={'pk': vs.pk})\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == (\n+            'warning', \"The voucher can only be edited as part of its set\")\n+\n+        data = {\n+            'code': v.code,\n+            'name': \"New name\",\n+            'start_datetime': v.start_datetime,\n+            'end_datetime': v.end_datetime,\n+            'usage': v.usage,\n+            'offers': [v.offers],\n+        }\n+        request = RequestFactory().post('/', data=data)\n+        response = view(request, pk=v.pk)\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:voucher-set-update', kwargs={'pk': vs.pk})\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == (\n+            'warning', \"The voucher can only be edited as part of its set\")\n+        v.refresh_from_db()\n+        assert v.name != \"New name\"\n+\n+    def test_voucher_delete_view(self):\n+        v = voucher.VoucherFactory()\n+        v.offers.add(ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER))\n+        assert Voucher.objects.count() == 1\n+        assert ConditionalOffer.objects.count() == 1\n+        request = RequestFactory().post('/')\n+        response = views.VoucherDeleteView.as_view()(request, pk=v.pk)\n+        assert Voucher.objects.count() == 0\n+        # Related offer is not deleted\n+        assert ConditionalOffer.objects.count() == 1\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:voucher-list')\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == ('warning', \"Voucher deleted\")\n+\n+    def test_voucher_delete_view_for_voucher_in_set(self):\n+        vs = voucher.VoucherSetFactory(count=10)\n+        assert Voucher.objects.count() == 10\n+        request = RequestFactory().post('/')\n+        response = views.VoucherDeleteView.as_view()(request, pk=vs.vouchers.first().pk)\n+        vs.refresh_from_db()\n+        assert vs.count == 9  # \"count\" is updated\n+        assert Voucher.objects.count() == 9\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:voucher-set-detail', kwargs={'pk': vs.pk})\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == ('warning', \"Voucher deleted\")\n+\n+\n @pytest.mark.django_db\n class TestDashboardVoucherSets:\n \n@@ -33,3 +99,15 @@ def test_voucher_set_detail_view(self, rf):\n         # The view should only list vouchers for vs2\n         assert len(response.context_data['vouchers']) == 15\n         assert response.status_code == 200\n+\n+    def test_voucher_set_delete_view(self):\n+        vs = voucher.VoucherSetFactory(count=10)\n+        assert VoucherSet.objects.count() == 1\n+        assert Voucher.objects.count() == 10\n+        request = RequestFactory().post('/')\n+        response = views.VoucherSetDeleteView.as_view()(request, pk=vs.pk)\n+        assert VoucherSet.objects.count() == 0\n+        assert Voucher.objects.count() == 0\n+        assert response.status_code == 302\n+        assert response.url == reverse('dashboard:voucher-set-list')\n+        assert [(m.level_tag, str(m.message)) for m in get_messages(request)][0] == ('warning', \"Voucher set deleted\")\ndiff --git a/tests/integration/forms/test_widget.py b/tests/integration/forms/test_widget.py\n--- a/tests/integration/forms/test_widget.py\n+++ b/tests/integration/forms/test_widget.py\n@@ -193,3 +193,9 @@ def test_multiselect_widget_attrs(self):\n         field = self._get_multiselect_form_field()\n         attrs = field.widget.get_context(name='my_field', value=None, attrs={})['widget']['attrs']\n         self.assertEqual(attrs['data-multiple'], 'multiple')\n+\n+\n+class NullBooleanSelectTestCase(TestCase):\n+\n+    def test_unknown_choice_label(self):\n+        self.assertEqual(dict(widgets.NullBooleanSelect().choices)['unknown'], '---------')\ndiff --git a/tests/integration/offer/test_absolute_benefit.py b/tests/integration/offer/test_absolute_benefit.py\n--- a/tests/integration/offer/test_absolute_benefit.py\n+++ b/tests/integration/offer/test_absolute_benefit.py\n@@ -364,12 +364,14 @@ def test_non_negative_basket_lines_values(self):\n             value=D('10'))\n         models.ConditionalOffer.objects.create(\n             name='offer1',\n+            offer_type=models.ConditionalOffer.SITE,\n             benefit=benefit1,\n             condition=condition,\n             exclusive=False\n         )\n         models.ConditionalOffer.objects.create(\n             name='offer2',\n+            offer_type=models.ConditionalOffer.SITE,\n             benefit=benefit2,\n             condition=condition,\n             exclusive=False\ndiff --git a/tests/integration/offer/test_forms.py b/tests/integration/offer/test_forms.py\n--- a/tests/integration/offer/test_forms.py\n+++ b/tests/integration/offer/test_forms.py\n@@ -4,6 +4,34 @@\n from django.utils.timezone import now\n \n from oscar.apps.dashboard.offers import forms\n+from oscar.apps.offer.models import ConditionalOffer\n+from oscar.test.factories import ConditionalOfferFactory, VoucherFactory\n+\n+\n+class TestMetaDataForm(TestCase):\n+\n+    def test_changing_offer_type_for_voucher_offer_without_vouchers(self):\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)\n+        data = {\n+            'name': offer.name,\n+            'description': offer.description,\n+            'offer_type': ConditionalOffer.SITE,\n+        }\n+        form = forms.MetaDataForm(data, instance=offer)\n+        self.assertTrue(form.is_valid())\n+\n+    def test_changing_offer_type_for_voucher_offer_with_vouchers(self):\n+        offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)\n+        VoucherFactory().offers.add(offer)\n+        data = {\n+            'name': offer.name,\n+            'description': offer.description,\n+            'offer_type': ConditionalOffer.SITE,\n+        }\n+        form = forms.MetaDataForm(data, instance=offer)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(form.errors['offer_type'][0],\n+                         \"This can only be changed if it has no vouchers attached to it\")\n \n \n class TestRestrictionsFormEnforces(TestCase):\ndiff --git a/tests/integration/offer/test_priority_offers.py b/tests/integration/offer/test_priority_offers.py\n--- a/tests/integration/offer/test_priority_offers.py\n+++ b/tests/integration/offer/test_priority_offers.py\n@@ -27,6 +27,7 @@ def test_basket_offers_are_ordered(self):\n         voucher = Voucher.objects.create(\n             name=\"Test voucher\",\n             code=\"test\",\n+            usage=Voucher.MULTI_USE,\n             start_datetime=timezone.now(),\n             end_datetime=timezone.now() + datetime.timedelta(days=12))\n \ndiff --git a/tests/integration/voucher/test_forms.py b/tests/integration/voucher/test_forms.py\n--- a/tests/integration/voucher/test_forms.py\n+++ b/tests/integration/voucher/test_forms.py\n@@ -1,15 +1,27 @@\n+import datetime\n+\n import pytest\n+from django.utils import timezone\n from django.utils.datastructures import MultiValueDict\n \n from oscar.apps.dashboard.vouchers import forms\n-from oscar.test.factories.offer import RangeFactory\n+from oscar.core.loading import get_model\n+from oscar.test.factories.offer import (\n+    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n+from oscar.test.factories.voucher import VoucherSetFactory\n+\n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+Voucher = get_model('voucher', 'Voucher')\n \n \n @pytest.mark.django_db\n-def test_voucherform_set_create():\n+def test_voucher_set_form_create():\n     a_range = RangeFactory(\n         includes_all_products=True\n     )\n+    offer = ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER,\n+                                    benefit=BenefitFactory(range=a_range),\n+                                    condition=ConditionFactory(range=a_range, value=1))\n     data = MultiValueDict({\n         'name': ['10% Discount'],\n         'code_length': ['10'],\n@@ -17,11 +29,89 @@ def test_voucherform_set_create():\n         'description': ['This is a 10% discount for mailing X'],\n         'start_datetime': ['2014-10-01'],\n         'end_datetime': ['2018-10-01'],\n-        'benefit_range': [a_range.pk],\n-        'benefit_type': ['Percentage'],\n-        'benefit_value': ['10'],\n+        'usage': [Voucher.MULTI_USE],\n+        'offers': [offer.pk],\n     })\n     form = forms.VoucherSetForm(data)\n     assert form.is_valid(), form.errors\n     voucher_set = form.save()\n     assert voucher_set.vouchers.count() == 10\n+\n+\n+@pytest.mark.django_db\n+def test_voucher_set_form_update_with_unchanged_count():\n+    tzinfo = timezone.get_current_timezone()\n+    voucher_set = VoucherSetFactory(name=\"Dummy name\",\n+                                    count=5,\n+                                    code_length=12,\n+                                    description=\"Dummy description\",\n+                                    start_datetime=datetime.datetime(2021, 2, 1, tzinfo=tzinfo),\n+                                    end_datetime=datetime.datetime(2021, 2, 28, tzinfo=tzinfo))\n+    voucher = voucher_set.vouchers.first()\n+    assert voucher.usage == Voucher.MULTI_USE\n+    new_offers = [ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER),\n+                  ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)]\n+    data = {\n+        'name': \"New name\",\n+        'code_length': 10,\n+        'description': \"New description\",\n+        'start_datetime': datetime.datetime(2021, 3, 1, tzinfo=tzinfo),\n+        'end_datetime': datetime.datetime(2021, 3, 31, tzinfo=tzinfo),\n+        'count': voucher_set.count,\n+        'usage': Voucher.SINGLE_USE,\n+        'offers': new_offers,\n+    }\n+    form = forms.VoucherSetForm(data, instance=voucher_set)\n+    assert form.is_valid(), form.errors\n+    voucher_set = form.save()\n+    assert voucher_set.vouchers.count() == 5\n+    for i, v in enumerate(voucher_set.vouchers.order_by('date_created')):\n+        assert v.name == \"New name - %d\" % (i + 1)\n+        assert len(v.code) == 14  # The code is not modified\n+        assert v.start_datetime == datetime.datetime(2021, 3, 1, tzinfo=tzinfo)\n+        assert v.end_datetime == datetime.datetime(2021, 3, 31, tzinfo=tzinfo)\n+        assert v.usage == Voucher.SINGLE_USE\n+        assert list(v.offers.all()) == new_offers\n+\n+\n+@pytest.mark.django_db\n+def test_voucher_set_form_update_with_changed_count():\n+    tzinfo = timezone.get_current_timezone()\n+    voucher_set = VoucherSetFactory(name=\"Dummy name\",\n+                                    count=5,\n+                                    code_length=12,\n+                                    description=\"Dummy description\",\n+                                    start_datetime=datetime.datetime(2021, 2, 1, tzinfo=tzinfo),\n+                                    end_datetime=datetime.datetime(2021, 2, 28, tzinfo=tzinfo))\n+    voucher = voucher_set.vouchers.first()\n+    assert voucher.usage == Voucher.MULTI_USE\n+    new_offers = [ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER),\n+                  ConditionalOfferFactory(offer_type=ConditionalOffer.VOUCHER)]\n+    data = {\n+        'name': \"New name\",\n+        'code_length': 10,\n+        'description': \"New description\",\n+        'start_datetime': datetime.datetime(2021, 3, 1, tzinfo=tzinfo),\n+        'end_datetime': datetime.datetime(2021, 3, 31, tzinfo=tzinfo),\n+        'count': 10,\n+        'usage': Voucher.SINGLE_USE,\n+        'offers': new_offers,\n+    }\n+    form = forms.VoucherSetForm(data, instance=voucher_set)\n+    assert form.is_valid(), form.errors\n+    voucher_set = form.save()\n+    voucher_set.refresh_from_db()\n+    assert voucher_set.count == 10  # \"count\" is updated\n+    assert voucher_set.vouchers.count() == 10\n+    for i, v in enumerate(voucher_set.vouchers.order_by('date_created')):\n+        assert v.name == \"New name - %d\" % (i + 1)\n+        if i < 5:\n+            # Original vouchers\n+            assert len(v.code) == 14  # The code is not modified\n+        else:\n+            # New vouchers\n+            assert len(v.code) == 12\n+        assert v.start_datetime == datetime.datetime(2021, 3, 1, tzinfo=tzinfo)\n+        assert v.end_datetime == datetime.datetime(2021, 3, 31, tzinfo=tzinfo)\n+        assert v.usage == Voucher.SINGLE_USE\n+        assert list(v.offers.all()) == new_offers\ndiff --git a/tests/integration/voucher/test_models.py b/tests/integration/voucher/test_models.py\n--- a/tests/integration/voucher/test_models.py\n+++ b/tests/integration/voucher/test_models.py\n@@ -5,7 +5,6 @@\n from django.core import exceptions\n from django.test import TestCase\n from django.utils.timezone import utc\n-from django.utils.translation import gettext_lazy as _\n \n from oscar.apps.voucher.models import Voucher\n from oscar.core.compat import get_user_model\n@@ -108,85 +107,6 @@ def setUp(self):\n         self.offer_range = RangeFactory(products=[product])\n         self.offer_condition = ConditionFactory(range=self.offer_range, value=2)\n \n-    def test_related_offer_deleted(self):\n-        # Voucher with offer name corresponding to it as used in the dashboard\n-        voucher_name = \"Voucher\"\n-        voucher = VoucherFactory(name=voucher_name, code=\"VOUCHER\")\n-        voucher.offers.add(\n-            create_offer(\n-                name=_(\"Offer for voucher '%s'\") % voucher_name,\n-                offer_type='Voucher',\n-                range=self.offer_range,\n-                condition=self.offer_condition\n-            )\n-        )\n-\n-        voucher.delete()\n-        self.assertFalse(\n-            ConditionalOffer.objects.filter(\n-                name=_(\"Offer for voucher '%s'\") % voucher_name,\n-                offer_type=ConditionalOffer.VOUCHER\n-            ).exists())\n-\n-    def test_related_offer_different_name_not_deleted(self):\n-        # Voucher with offer named differently\n-        voucher = VoucherFactory(name=\"Voucher\", code=\"VOUCHER\")\n-        voucher.offers.add(\n-            create_offer(\n-                name=\"Different name test\",\n-                offer_type='Voucher',\n-                range=self.offer_range,\n-                condition=self.offer_condition\n-            )\n-        )\n-\n-        offer_ids = list(voucher.offers.all().values_list('pk', flat=True))\n-\n-        voucher.delete()\n-        count_offers = ConditionalOffer.objects.filter(id__in=offer_ids).count()\n-        assert len(offer_ids) == count_offers\n-\n-    def test_related_offer_different_type_not_deleted(self):\n-        # Voucher with offer not of type \"Voucher\"\n-        voucher_name = \"Voucher\"\n-        voucher = VoucherFactory(name=voucher_name, code=\"VOUCHER\")\n-        voucher.offers.add(\n-            create_offer(\n-                name=_(\"Offer for voucher '%s'\") % voucher_name,\n-                offer_type='Site',\n-                range=self.offer_range,\n-                condition=self.offer_condition\n-            )\n-        )\n-\n-        offer_ids = list(voucher.offers.all().values_list('pk', flat=True))\n-\n-        voucher.delete()\n-        count_offers = ConditionalOffer.objects.filter(id__in=offer_ids).count()\n-        assert len(offer_ids) == count_offers\n-\n-    def test_multiple_related_offers_not_deleted(self):\n-        # Voucher with already used offer\n-        voucher_name = \"Voucher 1\"\n-        offer = create_offer(\n-            name=_(\"Offer for voucher '%s'\") % voucher_name,\n-            offer_type='Voucher',\n-            range=self.offer_range,\n-            condition=self.offer_condition\n-        )\n-\n-        voucher1 = VoucherFactory(name=voucher_name, code=\"VOUCHER1\")\n-        voucher1.offers.add(offer)\n-\n-        voucher2 = VoucherFactory(name=\"Voucher 2\", code=\"VOUCHER2\")\n-        voucher2.offers.add(offer)\n-\n-        offer_ids = list(voucher1.offers.all().values_list('pk', flat=True))\n-\n-        voucher1.delete()\n-        count_offers = ConditionalOffer.objects.filter(id__in=offer_ids).count()\n-        assert len(offer_ids) == count_offers\n-\n \n class TestAvailableForBasket(TestCase):\n \n@@ -214,19 +134,21 @@ class TestVoucherSet(object):\n     def test_factory(self):\n         voucherset = VoucherSetFactory()\n         assert voucherset.count == voucherset.vouchers.count()\n-        code = voucherset.vouchers.first().code\n-        assert len(code) == 14\n-        assert code.count('-') == 2\n         assert str(voucherset) == voucherset.name\n-        assert voucherset.offer\n+        offers = voucherset.vouchers.first().offers.all()\n         for voucher in voucherset.vouchers.all():\n-            assert voucherset.offer in voucher.offers.all()\n+            assert len(voucher.code) == 14\n+            assert voucher.code.count('-') == 2\n+            list(voucher.offers.all()) == list(offers)\n+            assert voucher.offers.count() == 1\n+            assert voucher.offers.filter(offer_type=ConditionalOffer.VOUCHER).count() == 1\n \n-    def test_min_count(self):\n+    def test_update_count(self):\n         voucherset = VoucherSetFactory(count=20)\n         assert voucherset.count == 20\n         voucherset.count = 10\n         voucherset.save()\n+        voucherset.update_count()\n         voucherset.refresh_from_db()\n         assert voucherset.count == 20\n \n", "problem_statement": "Refactor voucher creation in the dashboard to allow greater flexibility\n### Issue Summary\r\n\r\nThe voucher app provides a very flexible implementation of voucher functionality, where multiple offers can be associated with a voucher. But the dashboard interface for managing vouchers hides this flexibility and only allows the creation of vouchers with a single offer. Meanwhile, on the offer side, only site-wide offers can be created and edited through the dashboard.\r\n\r\n### Proposal\r\n\r\nI propose to refactor the voucher functionality as follows:\r\n\r\n1. Allow CRUD of all types of offer in the dashboard, making it easy to identify the type of the offer (site-wide, voucher, session, user). We can provide a tabbed interface to see the offers of each type. \r\n\r\n    (By default, session and user offers are not applied anywhere - a future enhancement would be to allow associating user offers with particular users/groups of users, instead of requiring projects to implement this themselves.)\r\n\r\n2. Refactor the existing voucher creation functionality so that instead of creating a single offer on the fly, the administrator instead selects one or more existing offers (of type voucher) to add to the voucher. This allows the creation of complex vouchers with a combination of offers.\r\n\r\nThis provides a much more powerful and flexible interface to the voucher functionality that already exists. \nTypeError creating voucher without end-date\nIn oscar 3.0 beta/master, creating a coupon/voucher , not specifying an end date results in\r\n\r\n> TypeError: '>' not supported between instances of 'datetime.datetime' and 'NoneType'\n", "hints_text": "Agree.\nYes that would be nice\n", "created_at": "2021-01-29T13:58:25Z", "version": "3.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_delete_view_for_voucher_offer_with_vouchers", "tests/integration/dashboard/test_voucher_form.py::TestVoucherSetForm::test_valid_form", "tests/integration/dashboard/test_voucher_form.py::TestVoucherSetForm::test_valid_form_reduced_count", "tests/integration/dashboard/test_voucher_views.py::TestDashboardVouchers::test_voucher_update_view_for_voucher_in_set", "tests/integration/dashboard/test_voucher_views.py::TestDashboardVouchers::test_voucher_delete_view_for_voucher_in_set", "tests/integration/dashboard/test_voucher_views.py::TestDashboardVoucherSets::test_voucher_set_detail_view", "tests/integration/dashboard/test_voucher_views.py::TestDashboardVoucherSets::test_voucher_set_delete_view", "tests/integration/voucher/test_forms.py::test_voucher_set_form_create", "tests/integration/voucher/test_forms.py::test_voucher_set_form_update_with_unchanged_count", "tests/integration/voucher/test_forms.py::test_voucher_set_form_update_with_changed_count", "tests/integration/voucher/test_models.py::TestVoucherSet::test_factory", "tests/integration/voucher/test_models.py::TestVoucherSet::test_update_count", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForStaffUser::test_has_stats_vars_in_context", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_create_an_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_update_an_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_back_to_condition_step_for_new_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_back_to_incentive_step_for_new_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_offer_list_page", "tests/integration/forms/test_widget.py::NullBooleanSelectTestCase::test_unknown_choice_label", "tests/integration/offer/test_forms.py::TestMetaDataForm::test_changing_offer_type_for_voucher_offer_with_vouchers"], "PASS_TO_PASS": ["tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_range_list_view", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_list_view", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_delete_view_for_voucher_offer_without_vouchers", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_range_product_list_view", "tests/integration/dashboard/test_voucher_views.py::TestDashboardVouchers::test_voucher_delete_view", "tests/integration/dashboard/test_voucher_views.py::TestDashboardVoucherSets::test_voucher_set_list_view", "tests/integration/voucher/test_models.py::TestVoucherSet::test_num_basket_additions", "tests/integration/voucher/test_models.py::TestVoucherSet::test_num_orders", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForAnonUser::test_is_not_available", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForStaffUser::test_includes_hourly_report_with_no_orders", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForStaffUser::test_includes_hourly_report_with_orders", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForStaffUser::test_is_available", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForStaffUser::test_login_redirects_to_dashboard_index", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForPartnerUser::test_is_available", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForPartnerUser::test_is_not_available", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexForPartnerUser::test_stats", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexStatsForNonStaffUser::test_partner1", "tests/functional/dashboard/test_dashboard.py::TestDashboardIndexStatsForNonStaffUser::test_partner2", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_change_offer_priority", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_jump_to_intermediate_step_for_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_reinstate_a_suspended_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_suspend_an_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_update_an_existing_offer_save_directly", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_cannot_jump_to_intermediate_step", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_to_condition_step_for_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_to_incentive_step_for_existing_offer", "tests/integration/dashboard/test_voucher_form.py::TestVoucherForm::test_doesnt_crash_on_empty_date_fields", "tests/integration/forms/test_widget.py::ImageInputTestCase::test_bound_context", "tests/integration/forms/test_widget.py::ImageInputTestCase::test_unbound_context", "tests/integration/forms/test_widget.py::TimePickerInputTestCase::test_div_attrs_context", "tests/integration/forms/test_widget.py::TimePickerInputTestCase::test_icon_classes_context", "tests/integration/forms/test_widget.py::TimePickerInputTestCase::test_input_format_unicode", "tests/integration/forms/test_widget.py::DatePickerInputTestCase::test_datepickerinput_format_unicode", "tests/integration/forms/test_widget.py::DatePickerInputTestCase::test_div_attrs_context", "tests/integration/forms/test_widget.py::DatePickerInputTestCase::test_icon_classes_context", "tests/integration/forms/test_widget.py::DateTimePickerInputTestCase::test_datetimepickerinput_format_unicode", "tests/integration/forms/test_widget.py::DateTimePickerInputTestCase::test_div_attrs_context", "tests/integration/forms/test_widget.py::DateTimePickerInputTestCase::test_icon_classes_context", "tests/integration/forms/test_widget.py::TestWidgetsDatetimeFormat::test_datetime_to_date_format_conversion", "tests/integration/forms/test_widget.py::TestWidgetsDatetimeFormat::test_datetime_to_time_format_conversion", "tests/integration/forms/test_widget.py::AdvancedSelectWidgetTestCase::test_widget_disabled_options", "tests/integration/forms/test_widget.py::RemoteSelectTestCase::test_multiselect_widget_attrs", "tests/integration/forms/test_widget.py::RemoteSelectTestCase::test_multiselect_widget_renders_only_selected_choices", "tests/integration/forms/test_widget.py::RemoteSelectTestCase::test_not_required_widget_attrs", "tests/integration/forms/test_widget.py::RemoteSelectTestCase::test_remote_url_required", "tests/integration/forms/test_widget.py::RemoteSelectTestCase::test_select_widget_renders_only_selected_choices", "tests/integration/forms/test_widget.py::RemoteSelectTestCase::test_widget_attrs", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountConditionOnDifferentRange::test_condition_is_consumed_correctly", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountConditionOnDifferentRange::test_succcessful_application_consumes_correctly", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_basket_exceeding_condition_smaller_prices_than_discount_higher_prices_first", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_exceeds_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_exceeds_condition_with_smaller_prices_than_discount", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_matches_condition_with_multiple_lines", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_matches_condition_with_multiple_lines_and_lower_total_value", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_correctly_to_basket_which_matches_condition_with_one_line", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithCountCondition::test_applies_correctly_to_empty_basket", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscount::test_applies_correctly_when_discounts_need_rounding", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithCountCondition::test_applies_correctly_to_basket_which_exceeds_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithCountCondition::test_applies_correctly_to_basket_which_exceeds_condition_but_with_smaller_prices_than_discount", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithCountCondition::test_applies_correctly_to_basket_which_matches_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithCountCondition::test_applies_correctly_to_empty_basket", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithValueCondition::test_applies_correctly_to_empty_basket", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_exceeds_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_exceeds_condition_but_matches_boundary", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_matches_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountAppliedWithValueCondition::test_applies_correctly_to_single_item_basket_which_matches_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithValueCondition::test_applies_correctly_to_empty_basket", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_exceeds_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_exceeds_condition_but_matches_boundary", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_matches_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithValueCondition::test_applies_correctly_to_multi_item_basket_which_matches_condition_but_with_lower_prices_than_discount", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountWithMaxItemsSetAppliedWithValueCondition::test_applies_correctly_to_single_item_basket_which_matches_condition", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountBenefit::test_non_negative_basket_lines_values", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountBenefit::test_requires_a_benefit_value", "tests/integration/offer/test_absolute_benefit.py::TestAnAbsoluteDiscountBenefit::test_requires_a_range", "tests/integration/offer/test_forms.py::TestMetaDataForm::test_changing_offer_type_for_voucher_offer_without_vouchers", "tests/integration/offer/test_forms.py::TestRestrictionsFormEnforces::test_cronological_dates", "tests/integration/offer/test_priority_offers.py::TestPriorityOffers::test_basket_offers_are_ordered", "tests/integration/offer/test_priority_offers.py::TestPriorityOffers::test_site_offers_are_ordered", "tests/integration/voucher/test_models.py::TestSavingAVoucher::test_saves_code_as_uppercase", "tests/integration/voucher/test_models.py::TestSavingAVoucher::test_verifies_dates_are_sensible", "tests/integration/voucher/test_models.py::TestAVoucher::test_increments_total_discount_when_recording_usage", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_active_between_start_and_end_dates", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_active_on_end_date", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_active_on_start_date", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_inactive_outside_of_start_and_end_dates", "tests/integration/voucher/test_models.py::TestMultiuseVoucher::test_is_available_to_same_user_multiple_times", "tests/integration/voucher/test_models.py::TestOncePerCustomerVoucher::test_is_available_to_a_user_once", "tests/integration/voucher/test_models.py::TestOncePerCustomerVoucher::test_is_available_to_different_users", "tests/integration/voucher/test_models.py::TestAvailableForBasket::test_is_available_for_basket"], "environment_setup_commit": "04cd6a4fc750db9310147d96776f06fe289269bf"}, {"repo": "django-oscar/django-oscar", "pull_number": 4017, "instance_id": "django-oscar__django-oscar-4017", "issue_numbers": ["3811"], "base_commit": "44ce5c3bdea808ca1eb8bb1a6dde0ccb8d4f8d98", "patch": "diff --git a/src/oscar/apps/dashboard/offers/forms.py b/src/oscar/apps/dashboard/offers/forms.py\n--- a/src/oscar/apps/dashboard/offers/forms.py\n+++ b/src/oscar/apps/dashboard/offers/forms.py\n@@ -74,6 +74,9 @@ def save(self, *args, **kwargs):\n         \"\"\"\n         instance = super().save(*args, **kwargs)\n         if instance.id:\n+            for offer in instance.combinations.all():\n+                if offer not in self.cleaned_data['combinations']:\n+                    offer.combinations.remove(instance)\n             instance.combinations.clear()\n             for offer in self.cleaned_data['combinations']:\n                 if offer != instance:\n", "test_patch": "diff --git a/tests/functional/dashboard/test_offer.py b/tests/functional/dashboard/test_offer.py\n--- a/tests/functional/dashboard/test_offer.py\n+++ b/tests/functional/dashboard/test_offer.py\n@@ -227,6 +227,27 @@ def test_jump_to_condition_step_for_existing_offer(self):\n         self.assertFalse('range' in condition_page.errors)\n         self.assertEqual(len(condition_page.errors), 0)\n \n+    def test_remove_offer_from_combinations(self):\n+        offer_a = factories.create_offer(\"Offer A\")\n+        offer_b = factories.create_offer(\"Offer B\")\n+        offer_b.exclusive = False\n+        offer_b.save()\n+\n+        restrictions_page = self.get(reverse(\n+            'dashboard:offer-restrictions', kwargs={'pk': offer_a.pk}))\n+        restrictions_page.form['exclusive'] = False\n+        restrictions_page.form['combinations'] = [offer_b.id]\n+        restrictions_page.form.submit()\n+\n+        self.assertIn(offer_a, offer_b.combinations.all())\n+\n+        restrictions_page = self.get(reverse(\n+            'dashboard:offer-restrictions', kwargs={'pk': offer_a.pk}))\n+        restrictions_page.form['combinations'] = []\n+        restrictions_page.form.submit()\n+\n+        self.assertNotIn(offer_a, offer_b.combinations.all())\n+\n \n class TestOfferListSearch(testcases.WebTestCase):\n     is_staff = True\n", "problem_statement": "Offer Combination Removal Issue\n### Issue Summary\r\n\r\nRemoving an offer combination does not remove the offer combination from both the current offer being saved and the offer that was combined. \r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create 2 non-exclusive Offers (Offer A and Offer B)\r\n2. Add Offer A as a Combination on Offer B, save\r\n3. Go to Offer A, can see that Offer B is a \"Combined Offer\", remove Offer B from Offer A combinations\r\n4. Go to Offer B, can see that Offer A is still a Combined Offer \r\n\r\n### Examples on Oscar sandbox\r\n**Setup**\r\n![image](https://user-images.githubusercontent.com/674282/143189491-c4faaafa-3fac-4920-a556-9fba8c66c4a4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/674282/143189552-16171e97-0389-43d4-86b1-1988544aaf83.png)\r\n\r\n**Remove the Offer B Combination from Offer A**\r\n\r\n![image](https://user-images.githubusercontent.com/674282/143189663-56da3f38-551f-4dc2-b62c-469527fce17f.png)\r\n![image](https://user-images.githubusercontent.com/674282/143189732-17f30d37-60c6-499e-966b-133757efc431.png)\r\n\r\n\n", "hints_text": "Is anyone working on this issue? If not could I take this up? @solarissmoke\n@SakshiUppoor  please do!\nThanks!\r\n\r\nI think adding a loop to find any removed offers and detaching the instance from combination offer fields of these offers should fix this issue.\r\n\r\nhttps://github.com/django-oscar/django-oscar/blob/dd200b8ea31078b953bdcc49d8f1a91d7733548a/src/oscar/apps/dashboard/offers/forms.py#L76-L89\r\n\r\nWill get started with a PR", "created_at": "2022-11-30T18:46:23Z", "version": "3.2", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/dashboard/test_offer.py::TestAnAdmin::test_remove_offer_from_combinations"], "PASS_TO_PASS": ["tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_change_offer_priority", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_create_an_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_jump_to_intermediate_step_for_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_reinstate_a_suspended_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_suspend_an_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_update_an_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_can_update_an_existing_offer_save_directly", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_cannot_jump_to_intermediate_step", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_back_to_condition_step_for_new_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_back_to_incentive_step_for_new_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_to_condition_step_for_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_jump_to_incentive_step_for_existing_offer", "tests/functional/dashboard/test_offer.py::TestAnAdmin::test_offer_list_page", "tests/functional/dashboard/test_offer.py::TestOfferListSearch::test_search_filter_descriptions"], "environment_setup_commit": "c862b4c8d75d2847c884f866a0919ed2b15ba8a8"}, {"repo": "django-oscar/django-oscar", "pull_number": 3393, "instance_id": "django-oscar__django-oscar-3393", "issue_numbers": ["3382"], "base_commit": "386244068de4a175af753007b181cb193bc28192", "patch": "diff --git a/src/oscar/apps/checkout/views.py b/src/oscar/apps/checkout/views.py\n--- a/src/oscar/apps/checkout/views.py\n+++ b/src/oscar/apps/checkout/views.py\n@@ -608,9 +608,9 @@ def submit(self, user, basket, shipping_address, shipping_method,  # noqa (too c\n         except Exception as e:\n             # Unhandled exception - hopefully, you will only ever see this in\n             # development...\n-            logger.error(\n+            logger.exception(\n                 \"Order #%s: unhandled exception while taking payment (%s)\",\n-                order_number, e, exc_info=True)\n+                order_number, e)\n             self.restore_frozen_basket()\n             return self.render_preview(\n                 self.request, error=error_msg, **payment_kwargs)\n@@ -635,6 +635,12 @@ def submit(self, user, basket, shipping_address, shipping_method,  # noqa (too c\n             self.restore_frozen_basket()\n             return self.render_preview(\n                 self.request, error=msg, **payment_kwargs)\n+        except Exception as e:\n+            # Hopefully you only ever reach this in development\n+            logger.exception(\"Order #%s: unhandled exception while placing order (%s)\", order_number, e)\n+            error_msg = _(\"A problem occurred while placing this order. Please contact customer services.\")\n+            self.restore_frozen_basket()\n+            return self.render_preview(self.request, error=error_msg, **payment_kwargs)\n \n     def get_template_names(self):\n         return [self.template_name_preview] if self.preview else [\n", "test_patch": "diff --git a/tests/functional/checkout/test_guest_checkout.py b/tests/functional/checkout/test_guest_checkout.py\n--- a/tests/functional/checkout/test_guest_checkout.py\n+++ b/tests/functional/checkout/test_guest_checkout.py\n@@ -399,7 +399,7 @@ def test_handles_bad_errors_during_payments(\n         preview = self.ready_to_place_an_order(is_guest=True)\n         response = preview.forms['place_order_form'].submit()\n         self.assertIsOk(response)\n-        self.assertTrue(mock_logger.error.called)\n+        self.assertTrue(mock_logger.exception.called)\n         basket = Basket.objects.get()\n         self.assertEqual(basket.status, Basket.OPEN)\n \n@@ -416,6 +416,17 @@ def test_handles_unexpected_order_placement_errors_gracefully(\n         basket = Basket.objects.get()\n         self.assertEqual(basket.status, Basket.OPEN)\n \n+    @mock.patch('oscar.apps.checkout.views.logger')\n+    @mock.patch('oscar.apps.checkout.views.PaymentDetailsView.handle_order_placement')\n+    def test_handles_all_other_exceptions_gracefully(self, mock_method, mock_logger):\n+        mock_method.side_effect = Exception()\n+        preview = self.ready_to_place_an_order(is_guest=True)\n+        response = preview.forms['place_order_form'].submit()\n+        self.assertIsOk(response)\n+        self.assertTrue(mock_logger.exception.called)\n+        basket = Basket.objects.get()\n+        self.assertEqual(basket.status, Basket.OPEN)\n+\n \n @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n class TestPaymentDetailsWithPreview(CheckoutMixin, WebTestCase):\n", "problem_statement": "Baskets can be stuck frozen\nFound a bug? Please fill out the sections below.\r\n\r\n### Issue Summary\r\n\r\nIf `self.handle_order_placement` has an exception besides `UnableToPlaceOrder`, the `restore_frozen_basket` method is never called.\r\n\r\n### Steps to Reproduce\r\n\r\nIn my example, I overrode `OrderCreator.create_line_models` and had a rare error in there.\r\n\r\n### Technical details\r\n\r\n* Python version: 2.7.\r\n* Django version: 1.11.\r\n* Oscar version: 1.6.7.\r\n\r\n\r\n###\r\nI recognize this is not the latest version, and we're doing something a little outside of the norm. That said, `restore_frozen_basket` should probably be in a `finally` clause.\r\n\n", "hints_text": "Yeah, makes sense - we basically need to [duplicate this logic](https://github.com/django-oscar/django-oscar/blob/05e4594230013c50ddafdf7458d51fc4b71277b3/src/oscar/apps/checkout/views.py#L608-L616) in the try/except block for `handle_order_placement`.", "created_at": "2020-06-07T06:10:05Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_handles_all_other_exceptions_gracefully", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_handles_bad_errors_during_payments"], "PASS_TO_PASS": ["tests/functional/checkout/test_guest_checkout.py::TestIndexView::test_prefill_form_with_email_for_returning_guest", "tests/functional/checkout/test_guest_checkout.py::TestIndexView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_guest_checkout.py::TestIndexView::test_redirects_customers_with_invalid_basket", "tests/functional/checkout/test_guest_checkout.py::TestIndexView::test_redirects_existing_customers_to_shipping_address_page", "tests/functional/checkout/test_guest_checkout.py::TestIndexView::test_redirects_guest_customers_to_shipping_address_page", "tests/functional/checkout/test_guest_checkout.py::TestIndexView::test_redirects_new_customers_to_registration_page", "tests/functional/checkout/test_guest_checkout.py::TestShippingAddressView::test_redirects_customers_who_have_skipped_guest_form", "tests/functional/checkout/test_guest_checkout.py::TestShippingAddressView::test_redirects_customers_whose_basket_doesnt_require_shipping", "tests/functional/checkout/test_guest_checkout.py::TestShippingAddressView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_guest_checkout.py::TestShippingAddressView::test_redirects_customers_with_invalid_basket", "tests/functional/checkout/test_guest_checkout.py::TestShippingAddressView::test_shows_initial_data_if_the_form_has_already_been_submitted", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_check_user_can_submit_only_valid_shipping_method", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_when_no_shipping_methods_available", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_when_only_one_shipping_method_is_available", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_who_have_skipped_guest_form", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_who_have_skipped_shipping_address_form", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_whose_basket_doesnt_require_shipping", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_redirects_customers_with_invalid_basket", "tests/functional/checkout/test_guest_checkout.py::TestShippingMethodView::test_shows_form_when_multiple_shipping_methods_available", "tests/functional/checkout/test_guest_checkout.py::TestPaymentMethodView::test_redirects_customers_who_have_skipped_guest_form", "tests/functional/checkout/test_guest_checkout.py::TestPaymentMethodView::test_redirects_customers_who_have_skipped_shipping_address_form", "tests/functional/checkout/test_guest_checkout.py::TestPaymentMethodView::test_redirects_customers_who_have_skipped_shipping_method_step", "tests/functional/checkout/test_guest_checkout.py::TestPaymentMethodView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_guest_checkout.py::TestPaymentMethodView::test_redirects_customers_with_invalid_basket", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_handles_anticipated_payments_errors_gracefully", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_handles_unexpected_order_placement_errors_gracefully", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_handles_unexpected_payment_errors_gracefully", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_redirects_customers_when_using_bank_gateway", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_redirects_customers_who_have_skipped_guest_form", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_redirects_customers_who_have_skipped_shipping_address_form", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_redirects_customers_who_have_skipped_shipping_method_step", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsView::test_redirects_customers_with_invalid_basket", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsWithPreview::test_handles_invalid_payment_forms", "tests/functional/checkout/test_guest_checkout.py::TestPaymentDetailsWithPreview::test_payment_form_being_submitted_from_payment_details_view", "tests/functional/checkout/test_guest_checkout.py::TestPlacingOrder::test_saves_guest_email_with_order"], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3019, "instance_id": "django-oscar__django-oscar-3019", "issue_numbers": ["1962"], "base_commit": "f992506003f73fa5d8444cdfee0a2bab209e10b0", "patch": "diff --git a/src/oscar/apps/dashboard/catalogue/forms.py b/src/oscar/apps/dashboard/catalogue/forms.py\n--- a/src/oscar/apps/dashboard/catalogue/forms.py\n+++ b/src/oscar/apps/dashboard/catalogue/forms.py\n@@ -80,7 +80,7 @@ def __init__(self, product_class, user, *args, **kwargs):\n                 if field_name in self.fields:\n                     del self.fields[field_name]\n         else:\n-            for field_name in ['price_excl_tax', 'num_in_stock']:\n+            for field_name in ['price', 'num_in_stock']:\n                 if field_name in self.fields:\n                     self.fields[field_name].required = True\n \n@@ -88,7 +88,7 @@ class Meta:\n         model = StockRecord\n         fields = [\n             'partner', 'partner_sku',\n-            'price_currency', 'price_excl_tax', 'price_retail', 'cost_price',\n+            'price_currency', 'price',\n             'num_in_stock', 'low_stock_threshold',\n         ]\n \ndiff --git a/src/oscar/apps/order/abstract_models.py b/src/oscar/apps/order/abstract_models.py\n--- a/src/oscar/apps/order/abstract_models.py\n+++ b/src/oscar/apps/order/abstract_models.py\n@@ -543,10 +543,6 @@ class AbstractLine(models.Model):\n         _(\"Price before discounts (excl. tax)\"),\n         decimal_places=2, max_digits=12)\n \n-    # Deprecated - will be removed in Oscar 2.1\n-    unit_cost_price = models.DecimalField(\n-        _(\"Unit Cost Price\"), decimal_places=2, max_digits=12, blank=True,\n-        null=True)\n     # Normal site price for item (without discounts)\n     unit_price_incl_tax = models.DecimalField(\n         _(\"Unit Price (inc. tax)\"), decimal_places=2, max_digits=12,\n@@ -554,19 +550,11 @@ class AbstractLine(models.Model):\n     unit_price_excl_tax = models.DecimalField(\n         _(\"Unit Price (excl. tax)\"), decimal_places=2, max_digits=12,\n         blank=True, null=True)\n-    # Deprecated - will be removed in Oscar 2.1\n-    unit_retail_price = models.DecimalField(\n-        _(\"Unit Retail Price\"), decimal_places=2, max_digits=12,\n-        blank=True, null=True)\n \n     # Partners often want to assign some status to each line to help with their\n     # own business processes.\n     status = models.CharField(_(\"Status\"), max_length=255, blank=True)\n \n-    # Deprecated - will be removed in Oscar 2.1\n-    est_dispatch_date = models.DateField(\n-        _(\"Estimated Dispatch Date\"), blank=True, null=True)\n-\n     #: Order status pipeline.  This should be a dict where each (key, value)\n     #: corresponds to a status and the possible statuses that can follow that\n     #: one.\ndiff --git a/src/oscar/apps/order/migrations/0010_auto_20200724_0909.py b/src/oscar/apps/order/migrations/0010_auto_20200724_0909.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/order/migrations/0010_auto_20200724_0909.py\n@@ -0,0 +1,25 @@\n+# Generated by Django 2.2.10 on 2020-07-24 08:09\n+\n+from django.db import migrations\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('order', '0009_surcharge'),\n+    ]\n+\n+    operations = [\n+        migrations.RemoveField(\n+            model_name='line',\n+            name='est_dispatch_date',\n+        ),\n+        migrations.RemoveField(\n+            model_name='line',\n+            name='unit_cost_price',\n+        ),\n+        migrations.RemoveField(\n+            model_name='line',\n+            name='unit_retail_price',\n+        ),\n+    ]\ndiff --git a/src/oscar/apps/order/utils.py b/src/oscar/apps/order/utils.py\n--- a/src/oscar/apps/order/utils.py\n+++ b/src/oscar/apps/order/utils.py\n@@ -179,13 +179,8 @@ def create_line_models(self, order, basket_line, extra_line_fields=None):\n             'line_price_before_discounts_incl_tax':\n             basket_line.line_price_incl_tax,\n             # Reporting details\n-            'unit_cost_price': stockrecord.cost_price,\n             'unit_price_incl_tax': basket_line.unit_price_incl_tax,\n             'unit_price_excl_tax': basket_line.unit_price_excl_tax,\n-            'unit_retail_price': stockrecord.price_retail,\n-            # Shipping details\n-            'est_dispatch_date':\n-            basket_line.purchase_info.availability.dispatch_date\n         }\n         extra_line_fields = extra_line_fields or {}\n         if hasattr(settings, 'OSCAR_INITIAL_LINE_STATUS'):\ndiff --git a/src/oscar/apps/partner/abstract_models.py b/src/oscar/apps/partner/abstract_models.py\n--- a/src/oscar/apps/partner/abstract_models.py\n+++ b/src/oscar/apps/partner/abstract_models.py\n@@ -109,24 +109,12 @@ class AbstractStockRecord(models.Model):\n     price_currency = models.CharField(\n         _(\"Currency\"), max_length=12, default=get_default_currency)\n \n-    # This is the base price for calculations - tax should be applied by the\n-    # appropriate method.  We don't store tax here as its calculation is highly\n-    # domain-specific.  It is NULLable because some items don't have a fixed\n-    # price but require a runtime calculation (possible from an external\n-    # service). Current field name `price_excl_tax` is deprecated and will be\n-    # renamed into `price` in Oscar 2.1.\n-    price_excl_tax = models.DecimalField(\n-        _(\"Price (excl. tax)\"), decimal_places=2, max_digits=12,\n-        blank=True, null=True)\n-\n-    # Deprecated - will be removed in Oscar 2.1\n-    price_retail = models.DecimalField(\n-        _(\"Price (retail)\"), decimal_places=2, max_digits=12,\n-        blank=True, null=True)\n-\n-    # Deprecated - will be removed in Oscar 2.1\n-    cost_price = models.DecimalField(\n-        _(\"Cost Price\"), decimal_places=2, max_digits=12,\n+    # This is the base price for calculations - whether this is inclusive or exclusive of\n+    # tax depends on your implementation, as this is highly domain-specific.\n+    # It is nullable because some items don't have a fixed\n+    # price but require a runtime calculation (possibly from an external service).\n+    price = models.DecimalField(\n+        _(\"Price\"), decimal_places=2, max_digits=12,\n         blank=True, null=True)\n \n     #: Number of items in stock\ndiff --git a/src/oscar/apps/partner/admin.py b/src/oscar/apps/partner/admin.py\n--- a/src/oscar/apps/partner/admin.py\n+++ b/src/oscar/apps/partner/admin.py\n@@ -7,7 +7,7 @@\n \n \n class StockRecordAdmin(admin.ModelAdmin):\n-    list_display = ('product', 'partner', 'partner_sku', 'price_excl_tax', 'num_in_stock')\n+    list_display = ('product', 'partner', 'partner_sku', 'price', 'num_in_stock')\n     list_filter = ('partner',)\n \n \ndiff --git a/src/oscar/apps/partner/importers.py b/src/oscar/apps/partner/importers.py\n--- a/src/oscar/apps/partner/importers.py\n+++ b/src/oscar/apps/partner/importers.py\n@@ -101,8 +101,7 @@ def _create_item(self, product_class, category_str, upc, title,\n \n         return item\n \n-    def _create_stockrecord(self, item, partner_name, partner_sku,\n-                            price_excl_tax, num_in_stock, stats):\n+    def _create_stockrecord(self, item, partner_name, partner_sku, price, num_in_stock, stats):\n         # Create partner and stock record\n         partner, _ = Partner.objects.get_or_create(\n             name=partner_name)\n@@ -114,7 +113,7 @@ def _create_stockrecord(self, item, partner_name, partner_sku,\n         stock.product = item\n         stock.partner = partner\n         stock.partner_sku = partner_sku\n-        stock.price_excl_tax = D(price_excl_tax)\n+        stock.price = D(price)\n         stock.num_in_stock = num_in_stock\n         stock.save()\n \ndiff --git a/src/oscar/apps/partner/migrations/0006_auto_20200724_0909.py b/src/oscar/apps/partner/migrations/0006_auto_20200724_0909.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/partner/migrations/0006_auto_20200724_0909.py\n@@ -0,0 +1,31 @@\n+# Generated by Django 2.2.10 on 2020-07-24 08:09\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('partner', '0005_auto_20181115_1953'),\n+    ]\n+\n+    operations = [\n+        migrations.RemoveField(\n+            model_name='stockrecord',\n+            name='cost_price',\n+        ),\n+        migrations.RemoveField(\n+            model_name='stockrecord',\n+            name='price_retail',\n+        ),\n+        migrations.AlterField(\n+            model_name='stockrecord',\n+            name='price_excl_tax',\n+            field=models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Price'),\n+        ),\n+        migrations.RenameField(\n+            model_name='stockrecord',\n+            old_name='price_excl_tax',\n+            new_name='price',\n+        ),\n+    ]\ndiff --git a/src/oscar/apps/partner/strategy.py b/src/oscar/apps/partner/strategy.py\n--- a/src/oscar/apps/partner/strategy.py\n+++ b/src/oscar/apps/partner/strategy.py\n@@ -229,17 +229,17 @@ def parent_availability_policy(self, product, children_stock):\n class NoTax(object):\n     \"\"\"\n     Pricing policy mixin for use with the ``Structured`` base strategy.\n-    This mixin specifies zero tax and uses the ``price_excl_tax`` from the\n+    This mixin specifies zero tax and uses the ``price`` from the\n     stockrecord.\n     \"\"\"\n \n     def pricing_policy(self, product, stockrecord):\n         # Check stockrecord has the appropriate data\n-        if not stockrecord or stockrecord.price_excl_tax is None:\n+        if not stockrecord or stockrecord.price is None:\n             return UnavailablePrice()\n         return FixedPrice(\n             currency=stockrecord.price_currency,\n-            excl_tax=stockrecord.price_excl_tax,\n+            excl_tax=stockrecord.price,\n             tax=D('0.00'))\n \n     def parent_pricing_policy(self, product, children_stock):\n@@ -250,7 +250,7 @@ def parent_pricing_policy(self, product, children_stock):\n         stockrecord = stockrecords[0]\n         return FixedPrice(\n             currency=stockrecord.price_currency,\n-            excl_tax=stockrecord.price_excl_tax,\n+            excl_tax=stockrecord.price,\n             tax=D('0.00'))\n \n \n@@ -265,14 +265,14 @@ class FixedRateTax(object):\n     exponent = D('0.01')  # Default to two decimal places\n \n     def pricing_policy(self, product, stockrecord):\n-        if not stockrecord or stockrecord.price_excl_tax is None:\n+        if not stockrecord or stockrecord.price is None:\n             return UnavailablePrice()\n         rate = self.get_rate(product, stockrecord)\n         exponent = self.get_exponent(stockrecord)\n-        tax = (stockrecord.price_excl_tax * rate).quantize(exponent)\n+        tax = (stockrecord.price * rate).quantize(exponent)\n         return TaxInclusiveFixedPrice(\n             currency=stockrecord.price_currency,\n-            excl_tax=stockrecord.price_excl_tax,\n+            excl_tax=stockrecord.price,\n             tax=tax)\n \n     def parent_pricing_policy(self, product, children_stock):\n@@ -284,11 +284,11 @@ def parent_pricing_policy(self, product, children_stock):\n         stockrecord = stockrecords[0]\n         rate = self.get_rate(product, stockrecord)\n         exponent = self.get_exponent(stockrecord)\n-        tax = (stockrecord.price_excl_tax * rate).quantize(exponent)\n+        tax = (stockrecord.price * rate).quantize(exponent)\n \n         return FixedPrice(\n             currency=stockrecord.price_currency,\n-            excl_tax=stockrecord.price_excl_tax,\n+            excl_tax=stockrecord.price,\n             tax=tax)\n \n     def get_rate(self, product, stockrecord):\n@@ -318,11 +318,11 @@ class DeferredTax(object):\n     \"\"\"\n \n     def pricing_policy(self, product, stockrecord):\n-        if not stockrecord or stockrecord.price_excl_tax is None:\n+        if not stockrecord or stockrecord.price is None:\n             return UnavailablePrice()\n         return FixedPrice(\n             currency=stockrecord.price_currency,\n-            excl_tax=stockrecord.price_excl_tax)\n+            excl_tax=stockrecord.price)\n \n     def parent_pricing_policy(self, product, children_stock):\n         stockrecords = [x[1] for x in children_stock if x[1] is not None]\n@@ -334,7 +334,7 @@ def parent_pricing_policy(self, product, children_stock):\n \n         return FixedPrice(\n             currency=stockrecord.price_currency,\n-            excl_tax=stockrecord.price_excl_tax)\n+            excl_tax=stockrecord.price)\n \n \n # Example strategy composed of above mixins.  For real projects, it's likely\n", "test_patch": "diff --git a/src/oscar/test/basket.py b/src/oscar/test/basket.py\n--- a/src/oscar/test/basket.py\n+++ b/src/oscar/test/basket.py\n@@ -23,7 +23,7 @@ def add_product(basket, price=None, quantity=1, product=None):\n         record = product.stockrecords.all()[0]\n     else:\n         record = factories.create_stockrecord(\n-            product=product, price_excl_tax=price,\n+            product=product, price=price,\n             num_in_stock=quantity + 1)\n     basket.add_product(record.product, quantity)\n \ndiff --git a/src/oscar/test/factories/__init__.py b/src/oscar/test/factories/__init__.py\n--- a/src/oscar/test/factories/__init__.py\n+++ b/src/oscar/test/factories/__init__.py\n@@ -49,7 +49,7 @@\n ConditionalOffer = get_model('offer', 'ConditionalOffer')\n \n \n-def create_stockrecord(product=None, price_excl_tax=None, partner_sku=None,\n+def create_stockrecord(product=None, price=None, partner_sku=None,\n                        num_in_stock=None, partner_name=None,\n                        currency=settings.OSCAR_DEFAULT_CURRENCY,\n                        partner_users=None):\n@@ -59,21 +59,21 @@ def create_stockrecord(product=None, price_excl_tax=None, partner_sku=None,\n     if partner_users:\n         for user in partner_users:\n             partner.users.add(user)\n-    if price_excl_tax is None:\n-        price_excl_tax = D('9.99')\n+    if price is None:\n+        price = D('9.99')\n     if partner_sku is None:\n         partner_sku = 'sku_%d_%d' % (product.id, random.randint(0, 10000))\n     return product.stockrecords.create(\n         partner=partner, partner_sku=partner_sku,\n         price_currency=currency,\n-        price_excl_tax=price_excl_tax, num_in_stock=num_in_stock)\n+        price=price, num_in_stock=num_in_stock)\n \n \n def create_purchase_info(record):\n     return PurchaseInfo(\n         price=FixedPrice(\n             record.price_currency,\n-            record.price_excl_tax,\n+            record.price,\n             D('0.00')  # Default to no tax\n         ),\n         availability=StockRequired(\n@@ -109,7 +109,7 @@ def create_product(upc=None, title=\"D\u00f9\uff4d\u03fb\u03d2 title\",\n         price, partner_sku, partner_name, num_in_stock, partner_users]\n     if any([field is not None for field in stockrecord_fields]):\n         create_stockrecord(\n-            product, price_excl_tax=price, num_in_stock=num_in_stock,\n+            product, price=price, num_in_stock=num_in_stock,\n             partner_users=partner_users, partner_sku=partner_sku,\n             partner_name=partner_name)\n     return product\n@@ -157,8 +157,7 @@ def create_order(number=None, basket=None, user=None, shipping_address=None,\n         basket = Basket.objects.create()\n         basket.strategy = Default()\n         product = create_product()\n-        create_stockrecord(\n-            product, num_in_stock=10, price_excl_tax=D('10.00'))\n+        create_stockrecord(product, num_in_stock=10, price=D('10.00'))\n         basket.add_product(product)\n     if not basket.id:\n         basket.save()\ndiff --git a/src/oscar/test/factories/order.py b/src/oscar/test/factories/order.py\n--- a/src/oscar/test/factories/order.py\n+++ b/src/oscar/test/factories/order.py\n@@ -100,24 +100,16 @@ class OrderLineFactory(factory.DjangoModelFactory):\n         lambda l: l.product.stockrecords.first())\n     quantity = 1\n \n-    line_price_incl_tax = factory.LazyAttribute(\n-        lambda obj: tax_add(obj.stockrecord.price_excl_tax) * obj.quantity)\n-    line_price_excl_tax = factory.LazyAttribute(\n-        lambda obj: obj.stockrecord.price_excl_tax * obj.quantity)\n+    line_price_incl_tax = factory.LazyAttribute(lambda obj: tax_add(obj.stockrecord.price) * obj.quantity)\n+    line_price_excl_tax = factory.LazyAttribute(lambda obj: obj.stockrecord.price * obj.quantity)\n \n     line_price_before_discounts_incl_tax = (\n         factory.SelfAttribute('.line_price_incl_tax'))\n     line_price_before_discounts_excl_tax = (\n         factory.SelfAttribute('.line_price_excl_tax'))\n \n-    unit_price_incl_tax = factory.LazyAttribute(\n-        lambda obj: tax_add(obj.stockrecord.price_excl_tax))\n-    unit_cost_price = factory.LazyAttribute(\n-        lambda obj: obj.stockrecord.cost_price)\n-    unit_price_excl_tax = factory.LazyAttribute(\n-        lambda obj: obj.stockrecord.price_excl_tax)\n-    unit_retail_price = factory.LazyAttribute(\n-        lambda obj: obj.stockrecord.price_retail)\n+    unit_price_incl_tax = factory.LazyAttribute(lambda obj: tax_add(obj.stockrecord.price))\n+    unit_price_excl_tax = factory.LazyAttribute(lambda obj: obj.stockrecord.price)\n \n     class Meta:\n         model = get_model('order', 'Line')\ndiff --git a/src/oscar/test/factories/partner.py b/src/oscar/test/factories/partner.py\n--- a/src/oscar/test/factories/partner.py\n+++ b/src/oscar/test/factories/partner.py\n@@ -29,7 +29,7 @@ class StockRecordFactory(factory.DjangoModelFactory):\n     partner = factory.SubFactory(PartnerFactory)\n     partner_sku = factory.Sequence(lambda n: 'unit%d' % n)\n     price_currency = \"GBP\"\n-    price_excl_tax = D('9.99')\n+    price = D('9.99')\n     num_in_stock = 100\n \n     class Meta:\ndiff --git a/tests/_site/apps/partner/migrations/0007_auto_20200724_0909.py b/tests/_site/apps/partner/migrations/0007_auto_20200724_0909.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/_site/apps/partner/migrations/0007_auto_20200724_0909.py\n@@ -0,0 +1,31 @@\n+# Generated by Django 2.2.10 on 2020-07-24 08:09\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('partner', '0006_auto_20190816_0910'),\n+    ]\n+\n+    operations = [\n+        migrations.RemoveField(\n+            model_name='stockrecord',\n+            name='cost_price',\n+        ),\n+        migrations.RemoveField(\n+            model_name='stockrecord',\n+            name='price_retail',\n+        ),\n+        migrations.AlterField(\n+            model_name='stockrecord',\n+            name='price_excl_tax',\n+            field=models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Price'),\n+        ),\n+        migrations.RenameField(\n+            model_name='stockrecord',\n+            old_name='price_excl_tax',\n+            new_name='price',\n+        ),\n+    ]\ndiff --git a/tests/functional/checkout/__init__.py b/tests/functional/checkout/__init__.py\n--- a/tests/functional/checkout/__init__.py\n+++ b/tests/functional/checkout/__init__.py\n@@ -17,14 +17,14 @@ def create_digital_product(self):\n             requires_shipping=False, track_stock=False)\n         product = factories.ProductFactory(product_class=product_class)\n         factories.StockRecordFactory(\n-            num_in_stock=None, price_excl_tax=D('12.00'), product=product)\n+            num_in_stock=None, price=D('12.00'), product=product)\n         return product\n \n     def add_product_to_basket(self, product=None):\n         if product is None:\n             product = factories.ProductFactory()\n             factories.StockRecordFactory(\n-                num_in_stock=10, price_excl_tax=D('12.00'), product=product)\n+                num_in_stock=10, price=D('12.00'), product=product)\n         detail_page = self.get(product.get_absolute_url())\n         form = detail_page.forms['add_to_basket_form']\n         form.submit()\ndiff --git a/tests/functional/dashboard/test_catalogue.py b/tests/functional/dashboard/test_catalogue.py\n--- a/tests/functional/dashboard/test_catalogue.py\n+++ b/tests/functional/dashboard/test_catalogue.py\n@@ -127,7 +127,7 @@ def test_can_create_and_continue_editing_a_product(self):\n         form['stockrecords-0-partner'] = self.partner.id\n         form['stockrecords-0-partner_sku'] = '14'\n         form['stockrecords-0-num_in_stock'] = '555'\n-        form['stockrecords-0-price_excl_tax'] = '13.99'\n+        form['stockrecords-0-price'] = '13.99'\n         page = form.submit(name='action', value='continue')\n \n         self.assertEqual(Product.objects.count(), 1)\ndiff --git a/tests/functional/test_basket.py b/tests/functional/test_basket.py\n--- a/tests/functional/test_basket.py\n+++ b/tests/functional/test_basket.py\n@@ -64,7 +64,7 @@ def test_price_is_recorded(self):\n         basket = Basket.objects.get(id=basket_id)\n         line = basket.lines.get(product=self.product)\n         stockrecord = self.product.stockrecords.all()[0]\n-        self.assertEqual(stockrecord.price_excl_tax, line.price_excl_tax)\n+        self.assertEqual(stockrecord.price, line.price_excl_tax)\n \n \n class BasketSummaryViewTests(WebTestCase):\ndiff --git a/tests/integration/basket/test_models.py b/tests/integration/basket/test_models.py\n--- a/tests/integration/basket/test_models.py\n+++ b/tests/integration/basket/test_models.py\n@@ -84,7 +84,7 @@ def test_line_tax_for_zero_tax_strategies(self):\n         product = factories.create_product()\n         # Tax for the default strategy will be 0\n         factories.create_stockrecord(\n-            product, price_excl_tax=D('75.00'), num_in_stock=10)\n+            product, price=D('75.00'), num_in_stock=10)\n         basket.add(product, 1)\n \n         self.assertEqual(basket.lines.first().line_tax, D('0'))\n@@ -95,7 +95,7 @@ class UnknownTaxStrategy(strategy.Default):\n             \"\"\" A test strategy where the tax is not known \"\"\"\n \n             def pricing_policy(self, product, stockrecord):\n-                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n+                return prices.FixedPrice('GBP', stockrecord.price, tax=None)\n \n         basket = Basket()\n         basket.strategy = UnknownTaxStrategy()\n@@ -114,7 +114,7 @@ def setUp(self):\n         self.product = factories.create_product()\n         self.record = factories.create_stockrecord(\n             currency='GBP',\n-            product=self.product, price_excl_tax=D('10.00'))\n+            product=self.product, price=D('10.00'))\n         self.purchase_info = factories.create_purchase_info(self.record)\n         self.basket.add(self.product)\n \n@@ -136,7 +136,7 @@ def test_adding_negative_quantity(self):\n     def test_means_another_currency_product_cannot_be_added(self):\n         product = factories.create_product()\n         factories.create_stockrecord(\n-            currency='USD', product=product, price_excl_tax=D('20.00'))\n+            currency='USD', product=product, price=D('20.00'))\n         with self.assertRaises(ValueError):\n             self.basket.add(product)\n \n@@ -153,7 +153,7 @@ def setUp(self):\n         self.basket.strategy = strategy.Default()\n         self.product = factories.create_product()\n         self.record = factories.create_stockrecord(\n-            self.product, price_excl_tax=D('10.00'))\n+            self.product, price=D('10.00'))\n         self.purchase_info = factories.create_purchase_info(self.record)\n         self.basket.add(self.product, 10)\n \n@@ -171,21 +171,21 @@ def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self\n \n     def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n         record = factories.create_stockrecord(\n-            self.product, price_excl_tax=D('5.00'))\n+            self.product, price=D('5.00'))\n         self.assertEqual(0, self.basket.line_quantity(\n             self.product, record))\n \n     def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n         product = factories.create_product()\n         record = factories.create_stockrecord(\n-            product, price_excl_tax=D('5.00'))\n+            product, price=D('5.00'))\n         self.assertEqual(0, self.basket.line_quantity(\n             product, record))\n \n     def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n         product = factories.create_product()\n         record = factories.create_stockrecord(\n-            product, price_excl_tax=D('5.00'))\n+            product, price=D('5.00'))\n         option = Option.objects.create(name=\"Message\")\n         options = [{\"option\": option, \"value\": \"2\"}]\n \n@@ -198,7 +198,7 @@ def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_optio\n     def test_total_sums_product_totals(self):\n         product = factories.create_product()\n         factories.create_stockrecord(\n-            product, price_excl_tax=D('5.00'))\n+            product, price=D('5.00'))\n         self.basket.add(product, 1)\n         self.assertEqual(self.basket.total_excl_tax, 105)\n \n@@ -208,7 +208,7 @@ def test_totals_for_free_products(self):\n         # Add a zero-priced product to the basket\n         product = factories.create_product()\n         factories.create_stockrecord(\n-            product, price_excl_tax=D('0.00'), num_in_stock=10)\n+            product, price=D('0.00'), num_in_stock=10)\n         basket.add(product, 1)\n \n         self.assertEqual(basket.lines.count(), 1)\n@@ -218,7 +218,7 @@ def test_totals_for_free_products(self):\n     def test_basket_prices_calculation_for_unavailable_pricing(self):\n         new_product = factories.create_product()\n         factories.create_stockrecord(\n-            new_product, price_excl_tax=D('5.00'))\n+            new_product, price=D('5.00'))\n         self.basket.add(new_product, 1)\n \n         class UnavailableProductStrategy(strategy.Default):\n@@ -288,7 +288,7 @@ class TestMergingTwoBaskets(TestCase):\n     def setUp(self):\n         self.product = factories.create_product()\n         self.record = factories.create_stockrecord(\n-            self.product, price_excl_tax=D('10.00'))\n+            self.product, price=D('10.00'))\n         self.purchase_info = factories.create_purchase_info(self.record)\n \n         self.main_basket = Basket()\ndiff --git a/tests/integration/partner/test_availability_mixin.py b/tests/integration/partner/test_availability_mixin.py\n--- a/tests/integration/partner/test_availability_mixin.py\n+++ b/tests/integration/partner/test_availability_mixin.py\n@@ -12,7 +12,7 @@ def setUp(self):\n         self.mixin = strategy.StockRequired()\n         self.product = mock.Mock()\n         self.stockrecord = mock.Mock()\n-        self.stockrecord.price_excl_tax = D('12.00')\n+        self.stockrecord.price = D('12.00')\n \n     def test_returns_unavailable_without_stockrecord(self):\n         policy = self.mixin.availability_policy(\ndiff --git a/tests/integration/partner/test_import.py b/tests/integration/partner/test_import.py\n--- a/tests/integration/partner/test_import.py\n+++ b/tests/integration/partner/test_import.py\n@@ -96,7 +96,7 @@ def test_null_fields_are_skipped(self):\n \n     def test_price_is_imported(self):\n         stockrecord = self.product.stockrecords.all()[0]\n-        self.assertEqual(D('10.32'), stockrecord.price_excl_tax)\n+        self.assertEqual(D('10.32'), stockrecord.price)\n \n     def test_num_in_stock_is_imported(self):\n         stockrecord = self.product.stockrecords.all()[0]\ndiff --git a/tests/integration/partner/test_models.py b/tests/integration/partner/test_models.py\n--- a/tests/integration/partner/test_models.py\n+++ b/tests/integration/partner/test_models.py\n@@ -15,10 +15,10 @@ class TestStockRecord(TestCase):\n     def setUp(self):\n         self.product = factories.create_product()\n         self.stockrecord = factories.create_stockrecord(\n-            self.product, price_excl_tax=D('10.00'), num_in_stock=10)\n+            self.product, price=D('10.00'), num_in_stock=10)\n \n     def test_get_price_excl_tax_returns_correct_value(self):\n-        self.assertEqual(D('10.00'), self.stockrecord.price_excl_tax)\n+        self.assertEqual(D('10.00'), self.stockrecord.price)\n \n     def test_net_stock_level_with_no_allocation(self):\n         self.assertEqual(10, self.stockrecord.net_stock_level)\n@@ -64,7 +64,7 @@ def setUp(self):\n     def test_allocate_does_nothing(self):\n         product = factories.ProductFactory(product_class=self.product_class)\n         stockrecord = factories.create_stockrecord(\n-            product, price_excl_tax=D('10.00'), num_in_stock=10)\n+            product, price=D('10.00'), num_in_stock=10)\n \n         self.assertFalse(stockrecord.can_track_allocations)\n         stockrecord.allocate(5)\n@@ -76,7 +76,7 @@ def test_allocate_does_nothing_for_child_product(self):\n         child_product = factories.ProductFactory(\n             parent=parent_product, product_class=None, structure='child')\n         stockrecord = factories.create_stockrecord(\n-            child_product, price_excl_tax=D('10.00'), num_in_stock=10)\n+            child_product, price=D('10.00'), num_in_stock=10)\n \n         self.assertFalse(stockrecord.can_track_allocations)\n         stockrecord.allocate(5)\ndiff --git a/tests/integration/partner/test_strategy.py b/tests/integration/partner/test_strategy.py\n--- a/tests/integration/partner/test_strategy.py\n+++ b/tests/integration/partner/test_strategy.py\n@@ -53,7 +53,7 @@ def test_availability_does_not_require_price(self):\n         # The availability policy should be independent of price.\n         product_class = factories.ProductClassFactory(track_stock=False)\n         product = factories.ProductFactory(product_class=product_class, stockrecords=[])\n-        factories.StockRecordFactory(price_excl_tax=None, product=product)\n+        factories.StockRecordFactory(price=None, product=product)\n         info = self.strategy.fetch_for_product(product)\n         self.assertTrue(info.availability.is_available_to_buy)\n \n@@ -123,7 +123,7 @@ class TestFixedRateTax(TestCase):\n \n     def test_pricing_policy_unavailable_if_no_price_excl_tax(self):\n         product = factories.ProductFactory(stockrecords=[])\n-        factories.StockRecordFactory(price_excl_tax=None, product=product)\n+        factories.StockRecordFactory(price=None, product=product)\n         info = strategy.UK().fetch_for_product(product)\n         self.assertFalse(info.price.exists)\n \n@@ -132,6 +132,6 @@ class TestDeferredTax(TestCase):\n \n     def test_pricing_policy_unavailable_if_no_price_excl_tax(self):\n         product = factories.ProductFactory(stockrecords=[])\n-        factories.StockRecordFactory(price_excl_tax=None, product=product)\n+        factories.StockRecordFactory(price=None, product=product)\n         info = strategy.US().fetch_for_product(product)\n         self.assertFalse(info.price.exists)\ndiff --git a/tests/integration/partner/test_tax_mixin.py b/tests/integration/partner/test_tax_mixin.py\n--- a/tests/integration/partner/test_tax_mixin.py\n+++ b/tests/integration/partner/test_tax_mixin.py\n@@ -12,7 +12,7 @@ def setUp(self):\n         self.mixin = strategy.NoTax()\n         self.product = mock.Mock()\n         self.stockrecord = mock.Mock()\n-        self.stockrecord.price_excl_tax = D('12.00')\n+        self.stockrecord.price = D('12.00')\n \n     def test_returns_no_prices_without_stockrecord(self):\n         policy = self.mixin.pricing_policy(\n@@ -37,7 +37,7 @@ def setUp(self):\n         self.mixin.rate = D('0.10')\n         self.product = mock.Mock()\n         self.stockrecord = mock.Mock()\n-        self.stockrecord.price_excl_tax = D('12.00')\n+        self.stockrecord.price = D('12.00')\n \n     def test_returns_no_prices_without_stockrecord(self):\n         policy = self.mixin.pricing_policy(\n@@ -47,7 +47,7 @@ def test_returns_no_prices_without_stockrecord(self):\n     def test_returns_correct_tax(self):\n         policy = self.mixin.pricing_policy(\n             self.product, self.stockrecord)\n-        expected_tax = self.stockrecord.price_excl_tax * self.mixin.get_rate(\n+        expected_tax = self.stockrecord.price * self.mixin.get_rate(\n             self.product, self.stockrecord)\n         self.assertEqual(expected_tax, policy.tax)\n \ndiff --git a/tests/integration/shipping/test_model_method.py b/tests/integration/shipping/test_model_method.py\n--- a/tests/integration/shipping/test_model_method.py\n+++ b/tests/integration/shipping/test_model_method.py\n@@ -69,7 +69,7 @@ def test_free_shipping_with_empty_basket(self):\n         self.assertEqual(D('0.00'), charge.incl_tax)\n \n     def test_free_shipping_with_nonempty_basket(self):\n-        record = factories.create_stockrecord(price_excl_tax=D('5.00'))\n+        record = factories.create_stockrecord(price=D('5.00'))\n         self.basket.add_product(record.product)\n         charge = self.method.calculate(self.basket)\n         self.assertEqual(D('0.00'), charge.incl_tax)\n@@ -83,7 +83,7 @@ def setUp(self):\n         self.basket = factories.create_basket(empty=True)\n \n     def test_basket_below_threshold(self):\n-        record = factories.create_stockrecord(price_excl_tax=D('5.00'))\n+        record = factories.create_stockrecord(price=D('5.00'))\n         self.basket.add_product(record.product)\n \n         charge = self.method.calculate(self.basket)\n@@ -91,7 +91,7 @@ def test_basket_below_threshold(self):\n         self.assertEqual(D('10.00'), charge.incl_tax)\n \n     def test_basket_on_threshold(self):\n-        record = factories.create_stockrecord(price_excl_tax=D('5.00'))\n+        record = factories.create_stockrecord(price=D('5.00'))\n         self.basket.add_product(record.product, quantity=4)\n \n         charge = self.method.calculate(self.basket)\n@@ -99,7 +99,7 @@ def test_basket_on_threshold(self):\n         self.assertEqual(D('0.00'), charge.incl_tax)\n \n     def test_basket_above_threshold(self):\n-        record = factories.create_stockrecord(price_excl_tax=D('5.00'))\n+        record = factories.create_stockrecord(price=D('5.00'))\n         self.basket.add_product(record.product, quantity=8)\n \n         charge = self.method.calculate(self.basket)\ndiff --git a/tests/unit/fixtures/catalogue.json b/tests/unit/fixtures/catalogue.json\n--- a/tests/unit/fixtures/catalogue.json\n+++ b/tests/unit/fixtures/catalogue.json\n@@ -159,9 +159,7 @@\n         \"partner\": 1,\n         \"partner_sku\": \"henk\",\n         \"price_currency\": \"EUR\",\n-        \"price_excl_tax\": \"400.00\",\n-        \"price_retail\": \"500.00\",\n-        \"cost_price\": \"300.00\",\n+        \"price\": \"400.00\",\n         \"num_in_stock\": 23,\n         \"num_allocated\": null,\n         \"low_stock_threshold\": null,\n@@ -177,9 +175,7 @@\n         \"partner\": 1,\n         \"partner_sku\": \"asdasd\",\n         \"price_currency\": \"EUR\",\n-        \"price_excl_tax\": \"23.00\",\n-        \"price_retail\": \"0.05\",\n-        \"cost_price\": null,\n+        \"price\": \"23.00\",\n         \"num_in_stock\": null,\n         \"num_allocated\": null,\n         \"low_stock_threshold\": null,\ndiff --git a/tests/unit/fixtures/productattributes.json b/tests/unit/fixtures/productattributes.json\n--- a/tests/unit/fixtures/productattributes.json\n+++ b/tests/unit/fixtures/productattributes.json\n@@ -803,9 +803,7 @@\n         \"partner\": 1,\n         \"partner_sku\": \"henk\",\n         \"price_currency\": \"EUR\",\n-        \"price_excl_tax\": \"400.00\",\n-        \"price_retail\": \"500.00\",\n-        \"cost_price\": \"300.00\",\n+        \"price\": \"400.00\",\n         \"num_in_stock\": 23,\n         \"num_allocated\": null,\n         \"low_stock_threshold\": null,\n@@ -821,9 +819,7 @@\n         \"partner\": 1,\n         \"partner_sku\": \"asdasd\",\n         \"price_currency\": \"EUR\",\n-        \"price_excl_tax\": \"23.00\",\n-        \"price_retail\": \"0.05\",\n-        \"cost_price\": null,\n+        \"price\": \"23.00\",\n         \"num_in_stock\": null,\n         \"num_allocated\": null,\n         \"low_stock_threshold\": null,\n@@ -839,9 +835,7 @@\n         \"partner\": 1,\n         \"partner_sku\": \"err56\",\n         \"price_currency\": \"EUR\",\n-        \"price_excl_tax\": \"234.00\",\n-        \"price_retail\": \"123.00\",\n-        \"cost_price\": null,\n+        \"price\": \"234.00\",\n         \"num_in_stock\": 345,\n         \"num_allocated\": null,\n         \"low_stock_threshold\": 12,\n@@ -857,9 +851,7 @@\n         \"partner\": 1,\n         \"partner_sku\": \"23478\",\n         \"price_currency\": \"EUR\",\n-        \"price_excl_tax\": \"12.00\",\n-        \"price_retail\": \"11.00\",\n-        \"cost_price\": null,\n+        \"price\": \"12.00\",\n         \"num_in_stock\": 34,\n         \"num_allocated\": null,\n         \"low_stock_threshold\": 8,\n", "problem_statement": "StockRecord: rename price_excl_tax\nThe docstring for `price_excl_tax` already explains what it truly is: the base price for tax calculations. I've had two projects where we knew the tax-inclusive price, and only calculated the price excl tax. I'd argue that a stock record is merely a record of a base price, and only the pricing policy gives it any meaning in regards to tax, so the field name should reflect that. \nI realize that the field is probably used directly more often than it should (instead of through pricing strategies), so we need a good idea about being friendly as far as backwards-compatibility is concerned.\n\n", "hints_text": "Yeah I agree! :+1:  All projects i've worked on communicate the tax-inclusive price and we need to calculate the excl price. This is required for prices like 19.99 where going from excl to incl results in 20.00 which isn't what the client wants :-)\n\nIf that's the case, we should probably ship some sample strategies to show how to work with this as well. Note to self: when doing this, also look at potential off-by-one bugs when calculating line and basket totals. \n\nThis issue actually contained two issues, renaming a field and deleting two. As I found more candidates for deletion, I moved that part of this issue into https://github.com/django-oscar/django-oscar/issues/1968\n\n@maikhoepfel @mvantellingen how about renaming into `base_price`? What about backward compatibility?\n\nI think you should be careful with renaming this field. Having the price excluding tax and calculate the price including tax yourselves make more sense than the other way around (Especially if you have international shops).\n\nHowever, I agree that the StockRecord should supply a base price and that the pricing policy gives a meaning to it, so it should not named like this.\n\nI would say to deprecate the `price_excl_tax` field for the next release (1.2?) and rename it to a more sane name in the release after?\n\n@sasha0 Backwards compatibility could be tricky. Initially, I thought we could define a `price_excl_tax` property, but that would only handle a few cases. Basically any code that references `price_excl_tax` using the ORM would break.\n\nAfter research and observation, I came to conclusion it does make sense to rename `price_excl_tax` into `price` but as @john-parton mentioned before, there's no chance to make this change backwards compatible which drastically reduces motivation to apply this change.\r\n\r\nI also totally agree with @maerteijn that we'd firstly deprecate this field and rename in the next major release (2.0).\nnice to hear that, I had to disable the tax calculation because of it. The disadvantages I see is to deal with multiple countries with different taxes and in b2b pricing.\r\nI may would propose the ability to limit stockrecords to countries.", "created_at": "2019-05-07T04:51:13Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/checkout/test_customer_checkout.py::TestIndexView::test_redirects_customers_to_shipping_address_view", "tests/functional/checkout/test_customer_checkout.py::TestIndexView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_customer_checkout.py::TestIndexView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_can_select_an_existing_shipping_address", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_only_shipping_addresses_are_shown", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_submitting_valid_form_adds_data_to_session", "tests/functional/checkout/test_customer_checkout.py::TestUserAddressUpdateView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestUserAddressUpdateView::test_submitting_valid_form_modifies_user_address", "tests/functional/checkout/test_customer_checkout.py::TestShippingMethodView::test_redirects_when_only_one_shipping_method", "tests/functional/checkout/test_customer_checkout.py::TestShippingMethodView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestDeleteUserAddressView::test_can_delete_a_user_address_from_shipping_address_page", "tests/functional/checkout/test_customer_checkout.py::TestDeleteUserAddressView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestPreviewView::test_allows_order_to_be_placed", "tests/functional/checkout/test_customer_checkout.py::TestPlacingAnOrderUsingAVoucher::test_records_use", "tests/functional/checkout/test_customer_checkout.py::TestPlacingAnOrderUsingAnOffer::test_records_use", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::test_superusers_can_force_an_order", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::test_users_cannot_force_an_other_custumer_order", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::tests_custumers_can_reach_the_thank_you_page", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::tests_gets_a_404_when_there_is_no_order", "tests/functional/dashboard/test_catalogue.py::TestCatalogueViews::test_exist", "tests/functional/dashboard/test_catalogue.py::TestCatalogueViews::test_is_public", "tests/functional/dashboard/test_catalogue.py::TestCatalogueViews::test_upc_filter", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_product_with_required_attributes", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_delete_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_delete_a_parent_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_delete_a_standalone_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_list_her_products", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_update_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_cant_create_child_product_for_invalid_parents", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_product_with_required_attributes", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_delete_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_delete_a_parent_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_delete_a_standalone_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_list_her_products", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_update_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_cant_create_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_cant_create_child_product_for_invalid_parents", "tests/functional/test_basket.py::TestBasketMerging::test_cookie_basket_has_status_set", "tests/functional/test_basket.py::TestBasketMerging::test_lines_are_moved_across", "tests/functional/test_basket.py::TestBasketMerging::test_merge_line_takes_max_quantity", "tests/functional/test_basket.py::AnonAddToBasketViewTests::test_cookie_is_created", "tests/functional/test_basket.py::AnonAddToBasketViewTests::test_price_is_recorded", "tests/functional/test_basket.py::BasketSummaryViewTests::test_basket_in_context", "tests/functional/test_basket.py::BasketSummaryViewTests::test_basket_is_empty", "tests/functional/test_basket.py::BasketSummaryViewTests::test_order_total_in_context", "tests/functional/test_basket.py::BasketSummaryViewTests::test_shipping_method_in_context", "tests/functional/test_basket.py::BasketSummaryViewTests::test_view_does_not_error", "tests/functional/test_basket.py::BasketThresholdTest::test_adding_more_than_threshold_raises", "tests/functional/test_basket.py::BasketReportTests::test_open_report_doesnt_error", "tests/functional/test_basket.py::BasketReportTests::test_submitted_report_doesnt_error", "tests/functional/test_basket.py::SavedBasketTests::test_moving_from_saved_basket", "tests/functional/test_basket.py::SavedBasketTests::test_moving_from_saved_basket_more_than_stocklevel_raises", "tests/functional/test_basket.py::SavedBasketTests::test_moving_to_saved_basket_creates_new", "tests/functional/test_basket.py::SavedBasketTests::test_moving_to_saved_basket_updates_existing", "tests/functional/test_basket.py::BasketFormSetTests::test_deleting_invalid_line_with_other_invalid_line", "tests/functional/test_basket.py::BasketFormSetTests::test_deleting_invalid_line_with_other_valid_line", "tests/functional/test_basket.py::BasketFormSetTests::test_deleting_valid_line_with_other_invalid_line", "tests/functional/test_basket.py::BasketFormSetTests::test_deleting_valid_line_with_other_valid_line", "tests/functional/test_basket.py::BasketFormSetTests::test_formset_with_removed_line", "tests/functional/test_basket.py::BasketFormSetTests::test_invalid_formset_with_removed_line", "tests/integration/basket/test_models.py::TestANewBasket::test_can_be_edited", "tests/integration/basket/test_models.py::TestANewBasket::test_doesnt_contain_vouchers", "tests/integration/basket/test_models.py::TestANewBasket::test_has_no_applied_offers", "tests/integration/basket/test_models.py::TestANewBasket::test_has_zero_items", "tests/integration/basket/test_models.py::TestANewBasket::test_has_zero_lines", "tests/integration/basket/test_models.py::TestANewBasket::test_is_empty", "tests/integration/basket/test_models.py::TestANewBasket::test_is_not_submitted", "tests/integration/basket/test_models.py::TestBasketLine::test_basket_lines_queryset_is_ordered", "tests/integration/basket/test_models.py::TestBasketLine::test_create_line_reference", "tests/integration/basket/test_models.py::TestBasketLine::test_description", "tests/integration/basket/test_models.py::TestBasketLine::test_description_with_attributes", "tests/integration/basket/test_models.py::TestBasketLine::test_line_tax_for_unknown_tax_strategies", "tests/integration/basket/test_models.py::TestBasketLine::test_line_tax_for_zero_tax_strategies", "tests/integration/basket/test_models.py::TestAddingAProductToABasket::test_adding_negative_quantity", "tests/integration/basket/test_models.py::TestAddingAProductToABasket::test_cannot_add_a_product_without_price", "tests/integration/basket/test_models.py::TestAddingAProductToABasket::test_creates_a_line", "tests/integration/basket/test_models.py::TestAddingAProductToABasket::test_means_another_currency_product_cannot_be_added", "tests/integration/basket/test_models.py::TestAddingAProductToABasket::test_sets_line_prices", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_basket_prices_calculation_for_unavailable_pricing", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_can_be_flushed", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_is_quantity_allowed", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_max_allowed_quantity", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_returns_correct_line_quantity_for_existing_product_and_stockrecord", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_returns_correct_product_quantity", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_returns_zero_line_quantity_for_alternative_stockrecord", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_returns_zero_line_quantity_for_missing_product_and_stockrecord", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_total_sums_product_totals", "tests/integration/basket/test_models.py::TestANonEmptyBasket::test_totals_for_free_products", "tests/integration/basket/test_models.py::TestMergingTwoBaskets::test_changes_status_of_merge_basket", "tests/integration/basket/test_models.py::TestMergingTwoBaskets::test_doesnt_sum_quantities", "tests/integration/basket/test_models.py::TestASubmittedBasket::test_can_be_edited", "tests/integration/basket/test_models.py::TestASubmittedBasket::test_has_correct_status", "tests/integration/basket/test_models.py::TestMergingAVoucherBasket::test_transfers_vouchers_to_new_basket", "tests/integration/partner/test_availability_mixin.py::TestStockRequiredMixin::test_returns_available_when_product_class_doesnt_track_stock", "tests/integration/partner/test_availability_mixin.py::TestStockRequiredMixin::test_returns_stockrequired_when_product_class_does_track_stock", "tests/integration/partner/test_availability_mixin.py::TestStockRequiredMixin::test_returns_unavailable_without_stockrecord", "tests/integration/partner/test_import.py::CommandEdgeCasesTest::test_importing_nonexistant_file_raises_exception", "tests/integration/partner/test_import.py::CommandEdgeCasesTest::test_sending_directory_as_file_raises_exception", "tests/integration/partner/test_import.py::CommandEdgeCasesTest::test_sending_no_file_argument_raises_exception", "tests/integration/partner/test_import.py::ImportSmokeTest::test_all_rows_are_imported", "tests/integration/partner/test_import.py::ImportSmokeTest::test_class_is_created", "tests/integration/partner/test_import.py::ImportSmokeTest::test_item_is_created", "tests/integration/partner/test_import.py::ImportSmokeTest::test_null_fields_are_skipped", "tests/integration/partner/test_import.py::ImportSmokeTest::test_num_in_stock_is_imported", "tests/integration/partner/test_import.py::ImportSmokeTest::test_only_one_class_is_created", "tests/integration/partner/test_import.py::ImportSmokeTest::test_partner_is_created", "tests/integration/partner/test_import.py::ImportSmokeTest::test_price_is_imported", "tests/integration/partner/test_import.py::ImportSmokeTest::test_stockrecord_is_created", "tests/integration/partner/test_import.py::ImportSmokeTest::test_title_is_imported", "tests/integration/partner/test_import.py::ImportSemicolonDelimitedFileTest::test_import", "tests/integration/partner/test_import.py::ImportWithFlushTest::test_items_are_flushed_by_importer", "tests/integration/partner/test_models.py::TestStockRecord::test_allocated_does_not_alter_num_in_stock", "tests/integration/partner/test_models.py::TestStockRecord::test_allocation_handles_null_value", "tests/integration/partner/test_models.py::TestStockRecord::test_cancelling_allocation", "tests/integration/partner/test_models.py::TestStockRecord::test_cancelling_allocation_ignores_too_big_allocations", "tests/integration/partner/test_models.py::TestStockRecord::test_consuming_allocation", "tests/integration/partner/test_models.py::TestStockRecord::test_get_price_excl_tax_returns_correct_value", "tests/integration/partner/test_models.py::TestStockRecord::test_net_stock_level_with_allocation", "tests/integration/partner/test_models.py::TestStockRecord::test_net_stock_level_with_no_allocation", "tests/integration/partner/test_models.py::TestStockRecordNoStockTrack::test_allocate_does_nothing", "tests/integration/partner/test_models.py::TestStockRecordNoStockTrack::test_allocate_does_nothing_for_child_product", "tests/integration/partner/test_models.py::TestPartnerAddress::test_can_get_primary_address", "tests/integration/partner/test_models.py::TestPartnerAddress::test_fails_on_two_addresses", "tests/integration/partner/test_strategy.py::TestDefaultStrategy::test_availability_does_not_require_price", "tests/integration/partner/test_strategy.py::TestDefaultStrategy::test_free_product_is_available_to_buy", "tests/integration/partner/test_strategy.py::TestDefaultStrategy::test_line_method_is_same_as_product_one", "tests/integration/partner/test_strategy.py::TestDefaultStrategy::test_no_stockrecords", "tests/integration/partner/test_strategy.py::TestDefaultStrategy::test_one_stockrecord", "tests/integration/partner/test_strategy.py::TestDefaultStrategy::test_product_which_doesnt_track_stock", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWhoseVariantsHaveNoStockRecords::test_specifies_correct_availability_code", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWhoseVariantsHaveNoStockRecords::test_specifies_product_has_no_price", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWhoseVariantsHaveNoStockRecords::test_specifies_product_is_unavailable", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWithInStockVariant::test_specifies_correct_availability_code", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWithInStockVariant::test_specifies_product_has_correct_price", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWithInStockVariant::test_specifies_product_is_available", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWithOutOfStockVariant::test_specifies_correct_availability_code", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWithOutOfStockVariant::test_specifies_product_has_correct_price", "tests/integration/partner/test_strategy.py::TestDefaultStrategyForParentProductWithOutOfStockVariant::test_specifies_product_is_unavailable", "tests/integration/partner/test_strategy.py::TestFixedRateTax::test_pricing_policy_unavailable_if_no_price_excl_tax", "tests/integration/partner/test_strategy.py::TestDeferredTax::test_pricing_policy_unavailable_if_no_price_excl_tax", "tests/integration/partner/test_tax_mixin.py::TestNoTaxMixin::test_doesnt_add_tax_to_net_price", "tests/integration/partner/test_tax_mixin.py::TestNoTaxMixin::test_returns_no_prices_without_stockrecord", "tests/integration/partner/test_tax_mixin.py::TestNoTaxMixin::test_returns_zero_tax", "tests/integration/partner/test_tax_mixin.py::TestFixedRateTaxMixin::test_adds_tax_to_net_price", "tests/integration/partner/test_tax_mixin.py::TestFixedRateTaxMixin::test_returns_correct_tax", "tests/integration/partner/test_tax_mixin.py::TestFixedRateTaxMixin::test_returns_no_prices_without_stockrecord", "tests/integration/shipping/test_model_method.py::TestOrderAndItemCharges::test_multi_item_basket", "tests/integration/shipping/test_model_method.py::TestOrderAndItemCharges::test_returns_order_level_charge_for_empty_basket", "tests/integration/shipping/test_model_method.py::TestOrderAndItemCharges::test_single_item_basket", "tests/integration/shipping/test_model_method.py::TestOrderAndItemCharges::test_single_item_basket_that_doesnt_require_shipping", "tests/integration/shipping/test_model_method.py::TestOrderAndItemCharges::test_tax_is_known", "tests/integration/shipping/test_model_method.py::ZeroFreeThresholdTest::test_free_shipping_with_empty_basket", "tests/integration/shipping/test_model_method.py::ZeroFreeThresholdTest::test_free_shipping_with_nonempty_basket", "tests/integration/shipping/test_model_method.py::TestNonZeroFreeThreshold::test_basket_above_threshold", "tests/integration/shipping/test_model_method.py::TestNonZeroFreeThreshold::test_basket_below_threshold", "tests/integration/shipping/test_model_method.py::TestNonZeroFreeThreshold::test_basket_on_threshold", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_for_smoke_with_basket_charge", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_band_for_higher_weight", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_band_for_lower_weight", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_band_for_matching_weight", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_band_for_series_of_bands", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_band_for_series_of_bands_from_different_methods", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_band_for_zero_weight", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_get_charge_when_weight_is_divided_by_top_band_upper_limit_without_remainder", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_overflow_shipping_cost_scenario_handled_correctly", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_simple_shipping_cost_scenario_handled_correctly", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_weight_from_for_multiple_bands", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_weight_from_for_single_band", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_weight_to_is_upper_bound", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_zero_charge_discount", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_zero_charge_with_shipping_discount", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_zero_weight_baskets_can_have_a_charge", "tests/integration/shipping/test_model_method.py::WeightBasedMethodTests::test_zero_weight_baskets_can_have_no_charge"], "PASS_TO_PASS": [], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3485, "instance_id": "django-oscar__django-oscar-3485", "issue_numbers": ["2652"], "base_commit": "b6b42aeb0fd31ea17a9ec1caca901bb53c8437fa", "patch": "diff --git a/src/oscar/apps/basket/abstract_models.py b/src/oscar/apps/basket/abstract_models.py\n--- a/src/oscar/apps/basket/abstract_models.py\n+++ b/src/oscar/apps/basket/abstract_models.py\n@@ -714,7 +714,7 @@ def consume(self, quantity, offer=None):\n \n         Consumed items are no longer available to be used in offers.\n         \"\"\"\n-        self.consumer.consume(quantity, offer=offer)\n+        return self.consumer.consume(quantity, offer=offer)\n \n     def get_price_breakdown(self):\n         \"\"\"\ndiff --git a/src/oscar/apps/basket/utils.py b/src/oscar/apps/basket/utils.py\n--- a/src/oscar/apps/basket/utils.py\n+++ b/src/oscar/apps/basket/utils.py\n@@ -82,18 +82,19 @@ class LineOfferConsumer(object):\n     \"\"\"\n \n     def __init__(self, line):\n-        self.__line = line\n-        self.__offers = dict()\n-        self.__affected_quantity = 0\n-        self.__consumptions = defaultdict(int)\n+        self._line = line\n+        self._offers = dict()\n+        self._affected_quantity = 0\n+        self._consumptions = defaultdict(int)\n \n-    # private\n-    def __cache(self, offer):\n-        self.__offers[offer.pk] = offer\n+    def _cache(self, offer):\n+        self._offers[offer.pk] = offer\n \n-    def __update_affected_quantity(self, quantity):\n-        available = int(self.__line.quantity - self.__affected_quantity)\n-        self.__affected_quantity += min(available, quantity)\n+    def _update_affected_quantity(self, quantity):\n+        available = int(self._line.quantity - self._affected_quantity)\n+        num_consumed = min(available, quantity)\n+        self._affected_quantity += num_consumed\n+        return num_consumed\n \n     # public\n     def consume(self, quantity: int, offer=None):\n@@ -103,16 +104,22 @@ def consume(self, quantity: int, offer=None):\n         :param int quantity: the number of items on the line affected\n         :param offer: the offer to mark the line\n         :type offer: ConditionalOffer or None\n+        :return: the number of items actually consumed\n+        :rtype: int\n \n         if offer is None, the specified quantity of items on this\n         basket line is consumed for *any* offer, else only for the\n         specified offer.\n         \"\"\"\n-        self.__update_affected_quantity(quantity)\n         if offer:\n-            self.__cache(offer)\n+            self._cache(offer)\n             available = self.available(offer)\n-            self.__consumptions[offer.pk] += min(available, quantity)\n+\n+        num_consumed = self._update_affected_quantity(quantity)\n+        if offer:\n+            num_consumed = min(available, quantity)\n+            self._consumptions[offer.pk] += num_consumed\n+        return num_consumed\n \n     def consumed(self, offer=None):\n         \"\"\"\n@@ -129,12 +136,12 @@ def consumed(self, offer=None):\n \n         \"\"\"\n         if not offer:\n-            return self.__affected_quantity\n-        return int(self.__consumptions[offer.pk])\n+            return self._affected_quantity\n+        return int(self._consumptions[offer.pk])\n \n     @property\n     def consumers(self):\n-        return [x for x in self.__offers.values() if self.consumed(x)]\n+        return [x for x in self._offers.values() if self.consumed(x)]\n \n     def available(self, offer=None) -> int:\n         \"\"\"\n@@ -145,7 +152,7 @@ def available(self, offer=None) -> int:\n         :return: the number of items available for offer\n         :rtype: int\n         \"\"\"\n-        max_affected_items = self.__line.quantity\n+        max_affected_items = self._line.quantity\n \n         if offer and isinstance(offer, ConditionalOffer):\n \n@@ -160,6 +167,12 @@ def available(self, offer=None) -> int:\n             if offer.exclusive and len(applied):\n                 return 0\n \n+            # check for applied offers allowing restricted combinations\n+            for x in applied:\n+                check = offer.combinations.count() or x.combinations.count()\n+                if check and offer not in x.combined_offers:\n+                    return 0\n+\n             # respect max_affected_items\n             if offer.benefit.max_affected_items:\n                 max_affected_items = min(offer.benefit.max_affected_items, max_affected_items)\ndiff --git a/src/oscar/apps/dashboard/offers/forms.py b/src/oscar/apps/dashboard/offers/forms.py\n--- a/src/oscar/apps/dashboard/offers/forms.py\n+++ b/src/oscar/apps/dashboard/offers/forms.py\n@@ -36,7 +36,7 @@ class Meta:\n         fields = ('start_datetime', 'end_datetime',\n                   'max_basket_applications', 'max_user_applications',\n                   'max_global_applications', 'max_discount',\n-                  'priority', 'exclusive')\n+                  'priority', 'exclusive', 'combinations')\n \n     def clean(self):\n         cleaned_data = super().clean()\n@@ -45,8 +45,35 @@ def clean(self):\n         if start and end and end < start:\n             raise forms.ValidationError(_(\n                 \"The end date must be after the start date\"))\n+        exclusive = cleaned_data['exclusive']\n+        combinations = cleaned_data['combinations']\n+        if exclusive and combinations:\n+            raise forms.ValidationError(_('Exclusive offers cannot be combined'))\n         return cleaned_data\n \n+    def save(self, *args, **kwargs):\n+        \"\"\"Store the offer combinations.\n+\n+        Also, and make sure the combinations are stored on the combine-able\n+        offers as well.\n+        \"\"\"\n+        instance = super().save(*args, **kwargs)\n+        if instance.id:\n+            instance.combinations.clear()\n+            for offer in self.cleaned_data['combinations']:\n+                if offer != instance:\n+                    instance.combinations.add(offer)\n+\n+            combined_offers = instance.combined_offers\n+            for offer in combined_offers:\n+                if offer == instance:\n+                    continue\n+                for otheroffer in combined_offers:\n+                    if offer == otheroffer:\n+                        continue\n+                    offer.combinations.add(otheroffer)\n+        return instance\n+\n \n class ConditionForm(forms.ModelForm):\n     custom_condition = forms.ChoiceField(\ndiff --git a/src/oscar/apps/dashboard/offers/views.py b/src/oscar/apps/dashboard/offers/views.py\n--- a/src/oscar/apps/dashboard/offers/views.py\n+++ b/src/oscar/apps/dashboard/offers/views.py\n@@ -111,9 +111,15 @@ def _store_form_kwargs(self, form):\n \n         # Adjust kwargs to avoid trying to save the range instance\n         form_data = form.cleaned_data.copy()\n-        range = form_data.get('range', None)\n-        if range is not None:\n-            form_data['range'] = range.id\n+        product_range = form_data.get('range')\n+        if product_range is not None:\n+            form_data['range'] = product_range.id\n+\n+        combinations = form_data.get('combinations')\n+        if combinations is not None:\n+            form_data['combination_ids'] = [x.id for x in combinations]\n+            del form_data['combinations']\n+\n         form_kwargs = {'data': form_data}\n         json_data = json.dumps(form_kwargs, cls=DjangoJSONEncoder)\n \n@@ -136,7 +142,17 @@ def _store_object(self, form):\n         # We don't store the object instance as that is not JSON serialisable.\n         # Instead, we save an alternative form\n         instance = form.save(commit=False)\n-        json_qs = serializers.serialize('json', [instance])\n+        fields = form.fields.keys()\n+        safe_fields = ['custom_benefit', 'custom_condition']\n+        # remove fields that do not exist (yet) on the uncommitted instance, i.e. m2m fields\n+        # unless they are 'virtual' fields as listed in 'safe_fields'\n+        cleanfields = {x: hasattr(instance, x) for x in fields}\n+        cleanfields.update({x: True for x in fields if x in safe_fields})\n+        cleanfields = [\n+            x[0] for x in cleanfields.items() if x[1]\n+        ]\n+\n+        json_qs = serializers.serialize('json', [instance], fields=tuple(cleanfields))\n \n         session_data[self._key(is_object=True)] = json_qs\n         self.request.session.save()\n@@ -152,10 +168,10 @@ def _fetch_object(self, step_name, request=None):\n             return deserialised_obj[0].object\n \n     def _fetch_session_offer(self):\n-        \"\"\"\n-        Return the offer instance loaded with the data stored in the\n-        session.  When updating an offer, the updated fields are used with the\n-        existing offer data.\n+        \"\"\"Return the offer instance loaded with the data stored in the session.\n+\n+        When updating an offer, the updated fields are used with the existing\n+        offer data.\n         \"\"\"\n         offer = self._fetch_object('metadata')\n         if offer is None and self.update:\ndiff --git a/src/oscar/apps/offer/abstract_models.py b/src/oscar/apps/offer/abstract_models.py\n--- a/src/oscar/apps/offer/abstract_models.py\n+++ b/src/oscar/apps/offer/abstract_models.py\n@@ -119,6 +119,13 @@ class AbstractConditionalOffer(models.Model):\n         help_text=_(\"Exclusive offers cannot be combined on the same items\"),\n         default=True\n     )\n+    combinations = models.ManyToManyField(\n+        'offer.ConditionalOffer',\n+        help_text=_('Select other non-exclusive offers that this offer can be combined with on the same items'),\n+        related_name='in_combination',\n+        limit_choices_to={'exclusive': False},\n+        blank=True,\n+    )\n \n     # We track a status variable so it's easier to load offers that are\n     # 'available' in some sense.\n@@ -443,6 +450,14 @@ def products(self):\n         return queryset.filter(is_discountable=True).exclude(\n             structure=Product.CHILD)\n \n+    @cached_property\n+    def combined_offers(self):\n+        return self.__class__.objects.filter(\n+            models.Q(pk=self.pk)\n+            | models.Q(pk__in=self.combinations.values_list(\"pk\", flat=True))\n+            | models.Q(pk__in=self.in_combination.values_list(\"pk\", flat=True))\n+        ).distinct()\n+\n \n class AbstractBenefit(BaseOfferMixin, models.Model):\n     range = models.ForeignKey(\ndiff --git a/src/oscar/apps/offer/conditions.py b/src/oscar/apps/offer/conditions.py\n--- a/src/oscar/apps/offer/conditions.py\n+++ b/src/oscar/apps/offer/conditions.py\n@@ -92,13 +92,9 @@ def consume_items(self, offer, basket, affected_lines):\n         if to_consume == 0:\n             return\n \n-        for __, line in self.get_applicable_lines(offer, basket,\n-                                                  most_expensive_first=True):\n-            quantity_to_consume = min(\n-                line.quantity_without_offer_discount(offer), to_consume\n-            )\n-            line.consume(quantity_to_consume, offer=offer)\n-            to_consume -= quantity_to_consume\n+        for __, line in self.get_applicable_lines(offer, basket, most_expensive_first=True):\n+            num_consumed = line.consume(to_consume, offer=offer)\n+            to_consume -= num_consumed\n             if to_consume == 0:\n                 break\n \ndiff --git a/src/oscar/apps/offer/migrations/0010_conditionaloffer_combinations.py b/src/oscar/apps/offer/migrations/0010_conditionaloffer_combinations.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/offer/migrations/0010_conditionaloffer_combinations.py\n@@ -0,0 +1,18 @@\n+# Generated by Django 3.0.9 on 2020-08-28 09:03\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('offer', '0009_auto_20200801_0817'),\n+    ]\n+\n+    operations = [\n+        migrations.AddField(\n+            model_name='conditionaloffer',\n+            name='combinations',\n+            field=models.ManyToManyField(blank=True, help_text='Select other non-exclusive offers that this offer can be combined with on the same items', limit_choices_to={'exclusive': False}, related_name='in_combination', to='offer.ConditionalOffer'),\n+        ),\n+    ]\n", "test_patch": "diff --git a/tests/integration/basket/test_utils.py b/tests/integration/basket/test_utils.py\n--- a/tests/integration/basket/test_utils.py\n+++ b/tests/integration/basket/test_utils.py\n@@ -118,7 +118,7 @@ def test_consume(self, filled_basket):\n         line.consume(99)\n         assert line.quantity_with_discount == 10\n \n-    def test_consumed_with_exclusive_offer(self, filled_basket):\n+    def test_consumed_with_exclusive_offer_1(self, filled_basket):\n         offer1 = ConditionalOfferFactory(name='offer1')\n         offer2 = ConditionalOfferFactory(name='offer2')\n         offer3 = ConditionalOfferFactory(name='offer3')\n@@ -132,7 +132,9 @@ def test_consumed_with_exclusive_offer(self, filled_basket):\n \n         line1, line2 = list(filled_basket.all_lines())\n \n+        # exclusive offer consumes one item on line1\n         line1.consumer.consume(1, offer1)\n+\n         # offer1 is exclusive so that blocks other offers\n         assert line1.is_available_for_offer_discount(offer2) is False\n \n@@ -153,9 +155,126 @@ def test_consumed_with_exclusive_offer(self, filled_basket):\n         # but still room for offer3!\n         assert line2.is_available_for_offer_discount(offer3) is True\n \n+    def test_consumed_with_exclusive_offer_2(self, filled_basket):\n+        offer1 = ConditionalOfferFactory(name='offer1')\n+        offer2 = ConditionalOfferFactory(name='offer2')\n+        offer3 = ConditionalOfferFactory(name='offer3')\n+        offer1.exclusive = True\n+        offer2.exclusive = False\n+        offer3.exclusive = False\n+\n+        for line in filled_basket.all_lines():\n+            assert line.consumer.consumed(offer1) == 0\n+            assert line.consumer.consumed(offer2) == 0\n+\n+        line1, line2 = list(filled_basket.all_lines())\n+\n+        # exclusive offer consumes one item on line1\n+        line1.consumer.consume(1, offer1)\n+        remaining1 = line1.quantity - 1\n+\n+        assert line1.quantity_with_offer_discount(offer1) == 1\n+        assert line1.quantity_with_offer_discount(offer2) == 0\n+        assert line1.quantity_with_offer_discount(offer3) == 0\n+\n+        assert line1.quantity_without_offer_discount(offer1) == remaining1\n+        assert line1.quantity_without_offer_discount(offer2) == 0\n+        assert line1.quantity_without_offer_discount(offer3) == 0\n+\n+        # exclusive offer consumes all items on line1\n+        line1.consumer.consume(remaining1, offer1)\n+        assert line1.quantity_with_offer_discount(offer1) == line1.quantity\n+        assert line1.quantity_with_offer_discount(offer2) == 0\n+        assert line1.quantity_with_offer_discount(offer3) == 0\n+\n+        assert line1.quantity_without_offer_discount(offer1) == 0\n+        assert line1.quantity_without_offer_discount(offer2) == 0\n+        assert line1.quantity_without_offer_discount(offer3) == 0\n+\n+        # non-exclusive offer consumes one item on line2\n+        line2.consumer.consume(1, offer2)\n+        remaining2 = line2.quantity - 1\n+\n+        assert line2.quantity_with_offer_discount(offer1) == 0\n+        assert line2.quantity_with_offer_discount(offer2) == 1\n+        assert line2.quantity_with_offer_discount(offer3) == 0\n+\n+        assert line2.quantity_without_offer_discount(offer1) == 0\n+        assert line2.quantity_without_offer_discount(offer2) == remaining2\n+        assert line2.quantity_without_offer_discount(offer3) == line2.quantity\n+\n+        # non-exclusive offer consumes all items on line2\n+        line2.consumer.consume(remaining2, offer2)\n+\n+        assert line2.quantity_with_offer_discount(offer1) == 0\n+        assert line2.quantity_with_offer_discount(offer2) == line2.quantity\n+        assert line2.quantity_with_offer_discount(offer3) == 0\n+\n+        assert line2.quantity_without_offer_discount(offer1) == 0\n+        assert line2.quantity_without_offer_discount(offer2) == 0\n+        assert line2.quantity_without_offer_discount(offer3) == line2.quantity\n+\n     def test_consumed_by_application(self, filled_basket, single_offer):\n         basket = filled_basket\n         Applicator().apply(basket)\n         assert len(basket.offer_applications.offer_discounts) == 1\n-\n         assert [x.consumer.consumed() for x in basket.all_lines()] == [1, 0]\n+\n+    def test_consumed_with_combined_offer(self, filled_basket):\n+        offer1 = ConditionalOfferFactory(name='offer1')\n+        offer2 = ConditionalOfferFactory(name='offer2')\n+        offer3 = ConditionalOfferFactory(name='offer3')\n+        offer4 = ConditionalOfferFactory(name='offer4')\n+        offer1.exclusive = True\n+        offer2.exclusive = False\n+        offer3.exclusive = False\n+        offer4.exclusive = False\n+        offer2.combinations.add(offer3)\n+        assert offer3 in offer2.combined_offers\n+        assert offer2 in offer3.combined_offers\n+\n+        for line in filled_basket.all_lines():\n+            assert line.consumer.consumed(offer1) == 0\n+            assert line.consumer.consumed(offer2) == 0\n+            assert line.consumer.consumed(offer3) == 0\n+\n+        line1 = filled_basket.all_lines()[0]\n+\n+        # combinable offer consumes one item of line1\n+        line1.consumer.consume(1, offer2)\n+        remaining1 = line1.quantity - 1\n+\n+        assert line1.quantity_with_offer_discount(offer1) == 0\n+        assert line1.quantity_with_offer_discount(offer2) == 1\n+        assert line1.quantity_with_offer_discount(offer3) == 0\n+        assert line1.quantity_with_offer_discount(offer4) == 0\n+\n+        assert line1.quantity_without_offer_discount(offer1) == 0\n+        assert line1.quantity_without_offer_discount(offer2) == remaining1\n+        assert line1.quantity_without_offer_discount(offer3) == line1.quantity\n+        assert line1.quantity_without_offer_discount(offer4) == 0\n+\n+        # combinable offer consumes one item of line1\n+        line1.consumer.consume(1, offer3)\n+        assert line1.quantity_with_offer_discount(offer1) == 0\n+        assert line1.quantity_with_offer_discount(offer2) == 1\n+        assert line1.quantity_with_offer_discount(offer3) == 1\n+        assert line1.quantity_with_offer_discount(offer4) == 0\n+\n+        assert line1.quantity_without_offer_discount(offer1) == 0\n+        assert line1.quantity_without_offer_discount(offer2) == remaining1\n+        assert line1.quantity_without_offer_discount(offer3) == remaining1\n+        assert line1.quantity_without_offer_discount(offer4) == 0\n+\n+        # combinable offer consumes all items of line1\n+        line1.consumer.consume(remaining1, offer2)\n+\n+        assert line1.quantity_with_offer_discount(offer1) == 0\n+        assert line1.quantity_with_offer_discount(offer2) == line1.quantity\n+        assert line1.quantity_with_offer_discount(offer3) == 1\n+        assert line1.quantity_with_offer_discount(offer4) == 0\n+\n+        assert line1.quantity_without_offer_discount(offer1) == 0\n+        assert line1.quantity_without_offer_discount(offer2) == 0\n+        assert line1.quantity_without_offer_discount(offer3) == remaining1\n+        assert line1.quantity_without_offer_discount(offer4) == 0\n", "problem_statement": "Offer Tracking for Stacked Offers\nI was testing out the stacked offer tracking that will be included in v1.6 and came across what may be a problem. It looks like the `LineOfferConsumer` class might be tracking the applied offers incorrectly.\r\n\r\nAs an example, in the basket app when  `AbstractLine.consume()` runs it should mark a line as consumed using `LineOfferConsumer.consume()` and passing the applicable offer. I think it should be storing the offer that consumed the items regardless of if the offer was exclusive or not. However, if the offer is exclusive it doesn't store the offer that consumed the line items.\r\n\r\nThis is for a test basket with an offer that should be applied to all three items in the line:\r\n\r\n```python\r\nclass Line(AbstractLine):\r\n\r\n    def consume(self, quantity, offer=None):\r\n        super(Line, self).consume(quantity, offer)\r\n        print \"offer------------------------->\", offer\r\n        print \"exclusive--------------------->\", offer.exclusive\r\n        print \"has_discount------------------>\", self.has_discount\r\n        print \"quantity_with_discount-------->\", self.quantity_with_discount\r\n        print \"has_offer_discount------------>\", self.has_offer_discount(offer)\r\n        print \"quantity_with_offer_discount-->\", self.quantity_with_offer_discount(offer)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\noffer-------------------------> Discount 123456\r\nexclusive---------------------> True\r\nhas_discount------------------> True\r\nquantity_with_discount--------> 3\r\nhas_offer_discount------------> False\r\nquantity_with_offer_discount--> 0\r\n```\r\n\r\nIf the offer is set to non-exclusive then the behavior is as expected:\r\n\r\n```\r\noffer-------------------------> Discount 123456\r\nexclusive---------------------> False\r\nhas_discount------------------> True\r\nquantity_with_discount--------> 3\r\nhas_offer_discount------------> True\r\nquantity_with_offer_discount--> 3\r\n```\r\n\r\nI don't actually need stacked offers per se, I just need to know what offer was applied to the line as a whole. Maybe this is stored somewhere else when a whole line is consumed by the same offer?\n", "hints_text": "I'll take a look at this asap.\r\n\r\nThe LineOfferConsumer interface could do with more extensive tests.", "created_at": "2020-08-28T09:12:41Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_combined_offer"], "PASS_TO_PASS": ["tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_no_offer", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_available_with_offer", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_offer", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consume", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_exclusive_offer_1", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_exclusive_offer_2", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_by_application"], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3684, "instance_id": "django-oscar__django-oscar-3684", "issue_numbers": ["3662"], "base_commit": "04cd6a4fc750db9310147d96776f06fe289269bf", "patch": "diff --git a/src/oscar/apps/dashboard/offers/views.py b/src/oscar/apps/dashboard/offers/views.py\n--- a/src/oscar/apps/dashboard/offers/views.py\n+++ b/src/oscar/apps/dashboard/offers/views.py\n@@ -140,11 +140,9 @@ def _store_form_kwargs(self, form):\n         session_data[self._key()] = json_data\n         self.request.session.save()\n \n-    def _fetch_form_kwargs(self, step_name=None):\n-        if not step_name:\n-            step_name = self.step_name\n+    def _fetch_form_kwargs(self):\n         session_data = self.request.session.setdefault(self.wizard_name, {})\n-        json_data = session_data.get(self._key(step_name), None)\n+        json_data = session_data.get(self._key(self.step_name), None)\n         if json_data:\n             return json.loads(json_data)\n \n@@ -156,15 +154,8 @@ def _store_object(self, form):\n         # We don't store the object instance as that is not JSON serialisable.\n         # Instead, we save an alternative form\n         instance = form.save(commit=False)\n-        fields = form.fields.keys()\n-        safe_fields = ['custom_benefit', 'custom_condition']\n         # remove fields that do not exist (yet) on the uncommitted instance, i.e. m2m fields\n-        # unless they are 'virtual' fields as listed in 'safe_fields'\n-        cleanfields = {x: hasattr(instance, x) for x in fields}\n-        cleanfields.update({x: True for x in fields if x in safe_fields})\n-        cleanfields = [\n-            x[0] for x in cleanfields.items() if x[1]\n-        ]\n+        cleanfields = [field.name for field in instance._meta.local_fields]\n \n         json_qs = serializers.serialize('json', [instance], fields=tuple(cleanfields))\n \n", "test_patch": "diff --git a/tests/integration/dashboard/test_offer_views.py b/tests/integration/dashboard/test_offer_views.py\n--- a/tests/integration/dashboard/test_offer_views.py\n+++ b/tests/integration/dashboard/test_offer_views.py\n@@ -1,17 +1,26 @@\n+import json\n+\n import pytest\n from django.contrib.messages import get_messages\n+from django.test import TestCase\n from django.urls import reverse\n+from freezegun import freeze_time\n \n from oscar.apps.dashboard.offers import views as offer_views\n from oscar.apps.dashboard.ranges import views as range_views\n+from oscar.apps.offer.custom import create_benefit, create_condition\n from oscar.core.loading import get_model\n from oscar.test.factories.catalogue import ProductFactory\n from oscar.test.factories.offer import ConditionalOfferFactory, RangeFactory\n from oscar.test.factories.voucher import VoucherFactory\n+from tests._site.model_tests_app.models import (\n+    CustomBenefitModel, CustomConditionModel)\n from tests.fixtures import RequestFactory\n \n Range = get_model('offer', 'Range')\n ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+Benefit = get_model('offer', 'Benefit')\n+Condition = get_model('offer', 'Condition')\n \n \n @pytest.fixture\n@@ -106,3 +115,619 @@ def test_range_product_list_view(self, rf, range_with_products):\n         assert response.context_data['paginator']\n         assert response.context_data['page_obj']\n         assert response.status_code == 200\n+\n+\n+class TestCreateOfferWizardStepView(TestCase):\n+\n+    def setUp(self):\n+        range_ = RangeFactory()\n+\n+        self.metadata_form_kwargs_session_data = {\n+            'data': {\n+                'name': 'Test offer',\n+                'slug': '',\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.SITE,\n+                'exclusive': True,\n+                'status': ConditionalOffer.OPEN,\n+                'condition': None,\n+                'benefit': None,\n+                'priority': 0,\n+                'start_datetime': None,\n+                'end_datetime': None,\n+                'max_global_applications': None,\n+                'max_user_applications': None,\n+                'max_basket_applications': None,\n+                'max_discount': None,\n+                'total_discount': '0.00',\n+                'num_applications': 0,\n+                'num_orders': 0,\n+                'redirect_url': '',\n+                'date_created': None,\n+            },\n+        }\n+        self.metadata_obj_session_data = [{\n+            'model': 'offer.conditionaloffer',\n+            'pk': None,\n+            'fields': {\n+                'name': 'Test offer',\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.SITE,\n+            },\n+        }]\n+        self.benefit_form_kwargs_session_data = {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Benefit.PERCENTAGE,\n+                'value': '10',\n+                'max_affected_items': None,\n+                'custom_benefit': '',\n+            },\n+        }\n+        self.benefit_obj_session_data = [{\n+            'model': 'offer.benefit',\n+            'pk': None,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Benefit.PERCENTAGE,\n+                'value': '10',\n+                'max_affected_items': None,\n+                'proxy_class': None,\n+            },\n+        }]\n+        self.condition_form_kwargs_session_data = {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Condition.COUNT,\n+                'value': '10',\n+                'custom_condition': '',\n+            },\n+        }\n+        self.condition_obj_session_data = [{\n+            'model': 'offer.condition',\n+            'pk': None,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Condition.COUNT,\n+                'value': '10',\n+                'proxy_class': None,\n+            },\n+        }]\n+\n+    def test_offer_meta_data_view(self):\n+        request = RequestFactory().post('/', data={\n+            'name': 'Test offer',\n+            'description': 'Test description',\n+            'offer_type': ConditionalOffer.SITE,\n+        })\n+        response = offer_views.OfferMetaDataView.as_view()(request)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-benefit'))\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata'], {\n+            'data': {\n+                'name': 'Test offer',\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.SITE,\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata_obj'], [{\n+            'model': 'offer.conditionaloffer',\n+            'pk': None,\n+            'fields': {\n+                'name': 'Test offer',\n+                'slug': '',\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.SITE,\n+                'exclusive': True,\n+                'status': ConditionalOffer.OPEN,\n+                'condition': None,\n+                'benefit': None,\n+                'priority': 0,\n+                'start_datetime': None,\n+                'end_datetime': None,\n+                'max_global_applications': None,\n+                'max_user_applications': None,\n+                'max_basket_applications': None,\n+                'max_discount': None,\n+                'total_discount': '0.00',\n+                'num_applications': 0,\n+                'num_orders': 0,\n+                'redirect_url': '',\n+                'date_created': None,\n+            },\n+        }])\n+\n+    def test_offer_benefit_view_with_built_in_benefit_type(self):\n+        range_ = RangeFactory()\n+\n+        request = RequestFactory().post('/', data={\n+            'range': range_.pk,\n+            'type': Benefit.PERCENTAGE,\n+            'value': 10,\n+        })\n+        request.session['offer_wizard'] = {\n+            'metadata': json.dumps(self.metadata_form_kwargs_session_data),\n+            'metadata_obj': json.dumps(self.metadata_obj_session_data),\n+        }\n+        response = offer_views.OfferBenefitView.as_view()(request)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-condition'))\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata'], self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata_obj'], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit'], {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Benefit.PERCENTAGE,\n+                'value': '10',\n+                'max_affected_items': None,\n+                'custom_benefit': '',\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit_obj'], [{\n+            'model': 'offer.benefit',\n+            'pk': None,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Benefit.PERCENTAGE,\n+                'value': '10',\n+                'max_affected_items': None,\n+                'proxy_class': None,\n+            },\n+        }])\n+\n+    def test_offer_benefit_view_with_custom_benefit_type(self):\n+        benefit = create_benefit(CustomBenefitModel)\n+\n+        request = RequestFactory().post('/', data={\n+            'custom_benefit': benefit.pk,\n+        })\n+        request.session['offer_wizard'] = {\n+            'metadata': json.dumps(self.metadata_form_kwargs_session_data),\n+            'metadata_obj': json.dumps(self.metadata_obj_session_data),\n+        }\n+        response = offer_views.OfferBenefitView.as_view()(request)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-condition'))\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata'], self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata_obj'], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit'], {\n+            'data': {\n+                'range': None,\n+                'type': '',\n+                'value': None,\n+                'max_affected_items': None,\n+                'custom_benefit': str(benefit.pk),\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit_obj'], [{\n+            'model': 'offer.benefit',\n+            'pk': benefit.pk,\n+            'fields': {\n+                'range': None,\n+                'type': '',\n+                'value': None,\n+                'max_affected_items': None,\n+                'proxy_class': benefit.proxy_class,\n+            }\n+        }])\n+\n+    def test_offer_condition_view_with_built_in_condition_type(self):\n+        range_ = RangeFactory()\n+\n+        request = RequestFactory().post('/', data={\n+            'range': range_.pk,\n+            'type': Condition.COUNT,\n+            'value': 10,\n+        })\n+        request.session['offer_wizard'] = {\n+            'metadata': json.dumps(self.metadata_form_kwargs_session_data),\n+            'metadata_obj': json.dumps(self.metadata_obj_session_data),\n+            'benefit': json.dumps(self.benefit_form_kwargs_session_data),\n+            'benefit_obj': json.dumps(self.benefit_obj_session_data),\n+        }\n+        response = offer_views.OfferConditionView.as_view()(request)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-restrictions'))\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata'], self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata_obj'], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit'], self.benefit_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit_obj'], self.benefit_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['condition'], {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Condition.COUNT,\n+                'value': '10',\n+                'custom_condition': '',\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard']['condition_obj'], [{\n+            'model': 'offer.condition',\n+            'pk': None,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Condition.COUNT,\n+                'value': '10',\n+                'proxy_class': None,\n+            },\n+        }])\n+\n+    def test_offer_condition_view_with_custom_condition_type(self):\n+        range_ = RangeFactory()\n+        condition = create_condition(CustomConditionModel)\n+\n+        request = RequestFactory().post('/', data={\n+            'range': range_.pk,\n+            'custom_condition': condition.pk,\n+        })\n+        request.session['offer_wizard'] = {\n+            'metadata': json.dumps(self.metadata_form_kwargs_session_data),\n+            'metadata_obj': json.dumps(self.metadata_obj_session_data),\n+            'benefit': json.dumps(self.benefit_form_kwargs_session_data),\n+            'benefit_obj': json.dumps(self.benefit_obj_session_data),\n+        }\n+        response = offer_views.OfferConditionView.as_view()(request)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-restrictions'))\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata'], self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['metadata_obj'], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit'], self.benefit_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['benefit_obj'], self.benefit_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard']['condition'], {\n+            'data': {\n+                'range': range_.pk,\n+                'type': '',\n+                'value': None,\n+                'custom_condition': str(condition.pk),\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard']['condition_obj'], [{\n+            'model': 'offer.condition',\n+            'pk': condition.pk,\n+            'fields': {\n+                'range': None,\n+                'type': '',\n+                'value': None,\n+                'proxy_class': condition.proxy_class,\n+            }\n+        }])\n+\n+    def test_offer_restrictions_view(self):\n+        request = RequestFactory().post('/', data={\n+            'priority': 0,\n+        })\n+        request.session['offer_wizard'] = {\n+            'metadata': json.dumps(self.metadata_form_kwargs_session_data),\n+            'metadata_obj': json.dumps(self.metadata_obj_session_data),\n+            'benefit': json.dumps(self.benefit_form_kwargs_session_data),\n+            'benefit_obj': json.dumps(self.benefit_obj_session_data),\n+            'condition': json.dumps(self.condition_form_kwargs_session_data),\n+            'condition_obj': json.dumps(self.condition_obj_session_data),\n+        }\n+        response = offer_views.OfferRestrictionsView.as_view()(request)\n+\n+        offer = ConditionalOffer.objects.get()\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-detail', kwargs={'pk': offer.pk}))\n+        self.assertEqual([(m.level_tag, str(m.message)) for m in get_messages(request)][0],\n+                         ('success', \"Offer '%s' created!\" % offer.name))\n+        self.assertEqual(request.session['offer_wizard'], {})\n+\n+\n+@freeze_time('2021-04-23 14:00:00')\n+class TestUpdateOfferWizardStepView(TestCase):\n+\n+    def setUp(self):\n+        self.offer = ConditionalOfferFactory()\n+        self.metadata_form_kwargs_key = 'metadata%s' % self.offer.pk\n+        self.metadata_obj_key = 'metadata%s_obj' % self.offer.pk\n+        self.benefit_form_kwargs_key = 'benefit%s' % self.offer.pk\n+        self.benefit_obj_key = 'benefit%s_obj' % self.offer.pk\n+        self.condition_form_kwargs_key = 'condition%s' % self.offer.pk\n+        self.condition_obj_key = 'condition%s_obj' % self.offer.pk\n+        range_ = RangeFactory()\n+\n+        self.metadata_form_kwargs_session_data = {\n+            'data': {\n+                'name': 'Test offer',\n+                'slug': self.offer.slug,\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.VOUCHER,\n+                'exclusive': True,\n+                'status': ConditionalOffer.OPEN,\n+                'condition': self.offer.condition.pk,\n+                'benefit': self.offer.benefit.pk,\n+                'priority': 0,\n+                'start_datetime': None,\n+                'end_datetime': None,\n+                'max_global_applications': None,\n+                'max_user_applications': None,\n+                'max_basket_applications': None,\n+                'max_discount': None,\n+                'total_discount': '0.00',\n+                'num_applications': 0,\n+                'num_orders': 0,\n+                'redirect_url': '',\n+                'date_created': '2021-04-23T14:00:00Z',\n+            },\n+        }\n+        self.metadata_obj_session_data = [{\n+            'model': 'offer.conditionaloffer',\n+            'pk': None,\n+            'fields': {\n+                'name': 'Test offer',\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.VOUCHER,\n+            },\n+        }]\n+        self.benefit_form_kwargs_session_data = {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Benefit.FIXED,\n+                'value': '2000',\n+                'max_affected_items': 2,\n+                'custom_benefit': '',\n+            },\n+        }\n+        self.benefit_obj_session_data = [{\n+            'model': 'offer.benefit',\n+            'pk': None,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Benefit.FIXED,\n+                'value': '2000',\n+                'max_affected_items': 2,\n+                'proxy_class': '',\n+            },\n+        }]\n+        self.condition_form_kwargs_session_data = {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Condition.VALUE,\n+                'value': '2000',\n+                'custom_condition': '',\n+            },\n+        }\n+        self.condition_obj_session_data = [{\n+            'model': 'offer.condition',\n+            'pk': None,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Condition.VALUE,\n+                'value': '2000',\n+                'proxy_class': '',\n+            },\n+        }]\n+\n+    def test_offer_meta_data_view(self):\n+        request = RequestFactory().post('/', data={\n+            'name': 'Test offer',\n+            'description': 'Test description',\n+            'offer_type': ConditionalOffer.VOUCHER,\n+        })\n+        response = offer_views.OfferMetaDataView.as_view(update=True)(request, pk=self.offer.pk)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-benefit', kwargs={'pk': self.offer.pk}))\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_form_kwargs_key], {\n+            'data': {\n+                'name': 'Test offer',\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.VOUCHER,\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_obj_key], [{\n+            'model': 'offer.conditionaloffer',\n+            'pk': self.offer.pk,\n+            'fields': {\n+                'name': 'Test offer',\n+                'slug': self.offer.slug,\n+                'description': 'Test description',\n+                'offer_type': ConditionalOffer.VOUCHER,\n+                'exclusive': True,\n+                'status': ConditionalOffer.OPEN,\n+                'condition': self.offer.condition.pk,\n+                'benefit': self.offer.benefit.pk,\n+                'priority': 0,\n+                'start_datetime': None,\n+                'end_datetime': None,\n+                'max_global_applications': None,\n+                'max_user_applications': None,\n+                'max_basket_applications': None,\n+                'max_discount': None,\n+                'total_discount': '0.00',\n+                'num_applications': 0,\n+                'num_orders': 0,\n+                'redirect_url': '',\n+                'date_created': '2021-04-23T14:00:00Z',\n+            },\n+        }])\n+\n+    def test_offer_benefit_view_with_built_in_benefit_type(self):\n+        range_ = RangeFactory()\n+\n+        request = RequestFactory().post('/', data={\n+            'range': range_.pk,\n+            'type': Benefit.FIXED,\n+            'value': 2000,\n+        })\n+        request.session['offer_wizard'] = {\n+            self.metadata_form_kwargs_key: json.dumps(self.metadata_form_kwargs_session_data),\n+            self.metadata_obj_key: json.dumps(self.metadata_obj_session_data),\n+        }\n+        response = offer_views.OfferBenefitView.as_view(update=True)(request, pk=self.offer.pk)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-condition', kwargs={'pk': self.offer.pk}))\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_form_kwargs_key],\n+                             self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_obj_key], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_form_kwargs_key], {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Benefit.FIXED,\n+                'value': '2000',\n+                'max_affected_items': None,\n+                'custom_benefit': '',\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_obj_key], [{\n+            'model': 'offer.benefit',\n+            'pk': self.offer.benefit.pk,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Benefit.FIXED,\n+                'value': '2000',\n+                'max_affected_items': None,\n+                'proxy_class': '',\n+            },\n+        }])\n+\n+    def test_offer_benefit_view_with_custom_benefit_type(self):\n+        benefit = create_benefit(CustomBenefitModel)\n+\n+        request = RequestFactory().post('/', data={\n+            'custom_benefit': benefit.pk,\n+        })\n+        request.session['offer_wizard'] = {\n+            self.metadata_form_kwargs_key: json.dumps(self.metadata_form_kwargs_session_data),\n+            self.metadata_obj_key: json.dumps(self.metadata_obj_session_data),\n+        }\n+        response = offer_views.OfferBenefitView.as_view(update=True)(request, pk=self.offer.pk)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-condition', kwargs={'pk': self.offer.pk}))\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_form_kwargs_key],\n+                             self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_obj_key], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_form_kwargs_key], {\n+            'data': {\n+                'range': None,\n+                'type': '',\n+                'value': None,\n+                'max_affected_items': None,\n+                'custom_benefit': str(benefit.pk),\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_obj_key], [{\n+            'model': 'offer.benefit',\n+            'pk': benefit.pk,\n+            'fields': {\n+                'range': None,\n+                'type': '',\n+                'value': None,\n+                'max_affected_items': None,\n+                'proxy_class': benefit.proxy_class,\n+            }\n+        }])\n+\n+    def test_offer_condition_view_with_built_in_condition_type(self):\n+        range_ = RangeFactory()\n+\n+        request = RequestFactory().post('/', data={\n+            'range': range_.pk,\n+            'type': Condition.VALUE,\n+            'value': 2000,\n+        })\n+        request.session['offer_wizard'] = {\n+            self.metadata_form_kwargs_key: json.dumps(self.metadata_form_kwargs_session_data),\n+            self.metadata_obj_key: json.dumps(self.metadata_obj_session_data),\n+            self.benefit_form_kwargs_key: json.dumps(self.benefit_form_kwargs_session_data),\n+            self.benefit_obj_key: json.dumps(self.benefit_obj_session_data),\n+        }\n+        response = offer_views.OfferConditionView.as_view(update=True)(request, pk=self.offer.pk)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-restrictions', kwargs={'pk': self.offer.pk}))\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_form_kwargs_key],\n+                             self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_obj_key], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_form_kwargs_key],\n+                             self.benefit_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_obj_key], self.benefit_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.condition_form_kwargs_key], {\n+            'data': {\n+                'range': range_.pk,\n+                'type': Condition.VALUE,\n+                'value': '2000',\n+                'custom_condition': '',\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard'][self.condition_obj_key], [{\n+            'model': 'offer.condition',\n+            'pk': self.offer.condition.pk,\n+            'fields': {\n+                'range': range_.pk,\n+                'type': Condition.VALUE,\n+                'value': '2000',\n+                'proxy_class': '',\n+            },\n+        }])\n+\n+    def test_offer_condition_view_with_custom_condition_type(self):\n+        range_ = RangeFactory()\n+        condition = create_condition(CustomConditionModel)\n+\n+        request = RequestFactory().post('/', data={\n+            'range': range_.pk,\n+            'custom_condition': condition.pk,\n+        })\n+        request.session['offer_wizard'] = {\n+            self.metadata_form_kwargs_key: json.dumps(self.metadata_form_kwargs_session_data),\n+            self.metadata_obj_key: json.dumps(self.metadata_obj_session_data),\n+            self.benefit_form_kwargs_key: json.dumps(self.benefit_form_kwargs_session_data),\n+            self.benefit_obj_key: json.dumps(self.benefit_obj_session_data),\n+        }\n+        response = offer_views.OfferConditionView.as_view(update=True)(request, pk=self.offer.pk)\n+\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-restrictions', kwargs={'pk': self.offer.pk}))\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_form_kwargs_key],\n+                             self.metadata_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.metadata_obj_key], self.metadata_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_form_kwargs_key],\n+                             self.benefit_form_kwargs_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.benefit_obj_key], self.benefit_obj_session_data)\n+        self.assertJSONEqual(request.session['offer_wizard'][self.condition_form_kwargs_key], {\n+            'data': {\n+                'range': range_.pk,\n+                'type': '',\n+                'value': None,\n+                'custom_condition': str(condition.pk),\n+            },\n+        })\n+        self.assertJSONEqual(request.session['offer_wizard'][self.condition_obj_key], [{\n+            'model': 'offer.condition',\n+            'pk': condition.pk,\n+            'fields': {\n+                'range': None,\n+                'type': '',\n+                'value': None,\n+                'proxy_class': condition.proxy_class,\n+            }\n+        }])\n+\n+    def test_offer_restrictions_view(self):\n+        request = RequestFactory().post('/', data={\n+            'priority': 0,\n+        })\n+        request.session['offer_wizard'] = {\n+            self.metadata_form_kwargs_key: json.dumps(self.metadata_form_kwargs_session_data),\n+            self.metadata_obj_key: json.dumps(self.metadata_obj_session_data),\n+            self.benefit_form_kwargs_key: json.dumps(self.benefit_form_kwargs_session_data),\n+            self.benefit_obj_key: json.dumps(self.benefit_obj_session_data),\n+            self.condition_form_kwargs_key: json.dumps(self.condition_form_kwargs_session_data),\n+            self.condition_obj_key: json.dumps(self.condition_obj_session_data),\n+        }\n+        response = offer_views.OfferRestrictionsView.as_view(update=True)(request, pk=self.offer.pk)\n+\n+        self.offer.refresh_from_db()\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(response.url, reverse('dashboard:offer-detail', kwargs={'pk': self.offer.pk}))\n+        self.assertEqual([(m.level_tag, str(m.message)) for m in get_messages(request)][0],\n+                         ('success', \"Offer '%s' updated\" % self.offer.name))\n+        self.assertEqual(request.session['offer_wizard'], {})\n", "problem_statement": "Benefit.proxy_class and Condition.proxy_class fields gets overridden if a new offer with a custom condition and benefit is created in the dashboard\nI created a custom offer condition and a custom offer benefit according to the documentation (https://django-oscar.readthedocs.io/en/3.0.2/howto/how_to_create_a_custom_condition.html). After the benefit and condition is populated with the create_condition and create_benefit command I wanted to add a new offer with the custom condition and benefit. When I save the new offer in the dashboard both `proxy_class` fields are empty and I get a `Unrecognised condition type ()` error. If I then manually update the fields again, everything works fine.\r\n\r\n### Technical details\r\n\r\n* Python version: Python 3.8.2\r\n* Django version: Django==2.2.17\r\n* Oscar version: django-oscar==3.0\r\n\n", "hints_text": "@jwayodi is it possible to fix this in #3632? To reproduce on the sandbox:\r\n\r\n1. Start creating an offer and choose the custom incentive (changes customer's name) instead of defining one.\r\n2. Proceed through the other steps and you'll get an error at the final step. \r\n\r\nThis happens only on offer creation so the issue is with what is passed through the session during that flow.", "created_at": "2021-03-16T06:13:01Z", "version": "3.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_benefit_view_with_built_in_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_benefit_view_with_custom_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_condition_view_with_built_in_condition_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_condition_view_with_custom_condition_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_meta_data_view", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_benefit_view_with_built_in_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_benefit_view_with_custom_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_condition_view_with_built_in_condition_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_condition_view_with_custom_condition_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_meta_data_view"], "PASS_TO_PASS": ["tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_range_list_view", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_list_view", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_delete_view_for_voucher_offer_without_vouchers", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_delete_view_for_voucher_offer_with_vouchers", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_range_product_list_view", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_restrictions_view", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_restrictions_view"], "environment_setup_commit": "04cd6a4fc750db9310147d96776f06fe289269bf"}, {"repo": "django-oscar/django-oscar", "pull_number": 3497, "instance_id": "django-oscar__django-oscar-3497", "issue_numbers": ["3258"], "base_commit": "3e377f42c6835c982daaa9f9d020de510462d7c9", "patch": "diff --git a/src/oscar/apps/catalogue/abstract_models.py b/src/oscar/apps/catalogue/abstract_models.py\n--- a/src/oscar/apps/catalogue/abstract_models.py\n+++ b/src/oscar/apps/catalogue/abstract_models.py\n@@ -15,7 +15,7 @@\n from django.db.models.fields import Field\n from django.db.models.lookups import StartsWith\n from django.urls import reverse\n-from django.utils.functional import cached_property\n+from django.utils.functional import SimpleLazyObject, cached_property\n from django.utils.html import strip_tags\n from django.utils.safestring import mark_safe\n from django.utils.translation import get_language\n@@ -435,7 +435,7 @@ class Meta:\n \n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n-        self.attr = ProductAttributesContainer(product=self)\n+        self.attr = SimpleLazyObject(lambda: ProductAttributesContainer(product=self))\n \n     def __str__(self):\n         if self.title:\ndiff --git a/src/oscar/apps/catalogue/product_attributes.py b/src/oscar/apps/catalogue/product_attributes.py\n--- a/src/oscar/apps/catalogue/product_attributes.py\n+++ b/src/oscar/apps/catalogue/product_attributes.py\n@@ -2,7 +2,7 @@\n from django.utils.translation import gettext_lazy as _\n \n \n-class ProductAttributesContainer(object):\n+class ProductAttributesContainer:\n     \"\"\"\n     Stolen liberally from django-eav, but simplified to be product-specific\n \n@@ -13,25 +13,16 @@ class ProductAttributesContainer(object):\n \n     def __setstate__(self, state):\n         self.__dict__ = state\n-        self.initialised = False\n \n     def __init__(self, product):\n         self.product = product\n-        self.initialised = False\n-\n-    def initiate_attributes(self):\n         values = self.get_values().select_related('attribute')\n         for v in values:\n             setattr(self, v.attribute.code, v.value)\n-        self.initialised = True\n \n     def __getattr__(self, name):\n-        if not name.startswith('_') and not self.initialised:\n-            self.initiate_attributes()\n-            return getattr(self, name)\n         raise AttributeError(\n-            _(\"%(obj)s has no attribute named '%(attr)s'\") % {\n-                'obj': self.product.get_product_class(), 'attr': name})\n+            _(\"%(obj)s has no attribute named '%(attr)s'\") % {'obj': self.product.get_product_class(), 'attr': name})\n \n     def validate_attributes(self):\n         for attribute in self.get_all_attributes():\ndiff --git a/src/oscar/apps/dashboard/catalogue/forms.py b/src/oscar/apps/dashboard/catalogue/forms.py\n--- a/src/oscar/apps/dashboard/catalogue/forms.py\n+++ b/src/oscar/apps/dashboard/catalogue/forms.py\n@@ -286,7 +286,6 @@ def _post_clean(self):\n         Set attributes before ModelForm calls the product's clean method\n         (which it does in _post_clean), which in turn validates attributes.\n         \"\"\"\n-        self.instance.attr.initiate_attributes()\n         for attribute in self.instance.attr.get_all_attributes():\n             field_name = 'attr_%s' % attribute.code\n             # An empty text field won't show up in cleaned_data.\n", "test_patch": "diff --git a/tests/integration/catalogue/test_attributes.py b/tests/integration/catalogue/test_attributes.py\n--- a/tests/integration/catalogue/test_attributes.py\n+++ b/tests/integration/catalogue/test_attributes.py\n@@ -4,9 +4,33 @@\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.test import TestCase\n \n+from oscar.apps.catalogue.models import Product\n from oscar.test import factories\n \n \n+class TestContainer(TestCase):\n+\n+    def test_attributes_initialised_before_write(self):\n+        # Regression test for https://github.com/django-oscar/django-oscar/issues/3258\n+        product_class = factories.ProductClassFactory()\n+        product_class.attributes.create(name='a1', code='a1', required=True)\n+        product_class.attributes.create(name='a2', code='a2', required=False)\n+        product_class.attributes.create(name='a3', code='a3', required=True)\n+        product = factories.ProductFactory(product_class=product_class)\n+        product.attr.a1 = \"v1\"\n+        product.attr.a3 = \"v3\"\n+        product.attr.save()\n+\n+        product = Product.objects.get(pk=product.pk)\n+        product.attr.a1 = \"v2\"\n+        product.attr.a3 = \"v6\"\n+        product.attr.save()\n+\n+        product = Product.objects.get(pk=product.pk)\n+        assert product.attr.a1 == \"v2\"\n+        assert product.attr.a3 == \"v6\"\n+\n+\n class TestBooleanAttributes(TestCase):\n \n     def setUp(self):\n@@ -52,7 +76,7 @@ def test_save_multi_option_value(self):\n         product = factories.ProductFactory()\n         # We'll save two out of the three available options\n         self.attr.save_value(product, [self.options[0], self.options[2]])\n-        product.refresh_from_db()\n+        product = Product.objects.get(pk=product.pk)\n         self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n \n     def test_delete_multi_option_value(self):\n@@ -60,7 +84,7 @@ def test_delete_multi_option_value(self):\n         self.attr.save_value(product, [self.options[0], self.options[1]])\n         # Now delete these values\n         self.attr.save_value(product, None)\n-        product.refresh_from_db()\n+        product = Product.objects.get(pk=product.pk)\n         self.assertFalse(hasattr(product.attr, 'sizes'))\n \n     def test_multi_option_value_as_text(self):\n", "problem_statement": "Writing to products attributes with Product.attr can lead to dataloss\n### Issue Summary\r\n\r\nWriting to products attributes with `product.attr` can lead to data loss\r\n\r\n### Steps to Reproduce\r\n\r\nCreate a productclass with 3 attributes, the second one you create must be optional.\r\nCreate a product and do not fill the second optional attribute. Now write to the non-optional attributes with code like this:\r\n\r\n        p = Product.objects.get(pk=4)\r\n        p.attr.subtitle = \"lama\"\r\n        p.attr.available = False\r\n        p.attr.save()\r\n\r\nOne of the 2 attributes will not be updated because the attr object will not be intialized. During save it will encounter the second attribute which is not on the object and trigger initialization. Initialization will overwrite one of the 2 values written and reset it to whatever is in the database.\r\n\r\n### Technical details\r\n\r\nThis problem occurs with all python versions and all oscar versions.\n", "hints_text": "As a workaround, before writing, just call\r\n```\r\np.attr.initiate_attributes()\r\n```\n@specialunderwear could you please supply a failing test for this? I tried the below but it passes, which suggests I'm not correctly replicating the situation you describe:\r\n\r\n```python\r\ndef test_attributes_initialised_before_write(self):\r\n    product_class = factories.ProductClassFactory()\r\n    product_class.attributes.create(name='a1', code='a1', required=True)\r\n    product_class.attributes.create(name='a2', code='a2', required=False)\r\n    product_class.attributes.create(name='a3', code='a3', required=True)\r\n    product = factories.ProductFactory(product_class=product_class)\r\n    product.attr.a1 = \"v1\"\r\n    product.attr.a3 = \"v3\"\r\n    product.attr.save()\r\n\r\n    product.refresh_from_db()\r\n    product.attr.a1 = \"v2\"\r\n    product.attr.a3 = \"v6\"\r\n    product.attr.save()\r\n\r\n    product.refresh_from_db()\r\n    assert product.attr.a1 == \"v2\"\r\n    assert product.attr.a3 == \"v6\"\r\n```\nUnfortunately refresh_from_db is not enough to reset the attributes.\r\ntry:\r\n```\r\nproduct.attr.__dict__ = {}\r\n```", "created_at": "2020-09-10T12:07:35Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/catalogue/test_attributes.py::TestContainer::test_attributes_initialised_before_write"], "PASS_TO_PASS": ["tests/integration/catalogue/test_attributes.py::TestBooleanAttributes::test_validate_boolean_values", "tests/integration/catalogue/test_attributes.py::TestBooleanAttributes::test_validate_invalid_boolean_values", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_delete_multi_option_value", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_multi_option_value_as_text", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_save_multi_option_value", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_validate_invalid_multi_option_values", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_validate_multi_option_values", "tests/integration/catalogue/test_attributes.py::TestOptionAttributes::test_option_value_as_text", "tests/integration/catalogue/test_attributes.py::TestDatetimeAttributes::test_validate_datetime_values", "tests/integration/catalogue/test_attributes.py::TestDatetimeAttributes::test_validate_invalid_datetime_values", "tests/integration/catalogue/test_attributes.py::TestDateAttributes::test_validate_date_values", "tests/integration/catalogue/test_attributes.py::TestDateAttributes::test_validate_datetime_values", "tests/integration/catalogue/test_attributes.py::TestDateAttributes::test_validate_invalid_date_values", "tests/integration/catalogue/test_attributes.py::TestIntegerAttributes::test_validate_integer_values", "tests/integration/catalogue/test_attributes.py::TestIntegerAttributes::test_validate_invalid_integer_values", "tests/integration/catalogue/test_attributes.py::TestIntegerAttributes::test_validate_str_integer_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_float_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_integer_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_invalid_float_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_str_float_values", "tests/integration/catalogue/test_attributes.py::TestTextAttributes::test_validate_invalid_float_values", "tests/integration/catalogue/test_attributes.py::TestTextAttributes::test_validate_string_and_unicode_values", "tests/integration/catalogue/test_attributes.py::TestFileAttributes::test_validate_file_values"], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3534, "instance_id": "django-oscar__django-oscar-3534", "issue_numbers": ["3510"], "base_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c", "patch": "diff --git a/src/oscar/apps/catalogue/abstract_models.py b/src/oscar/apps/catalogue/abstract_models.py\n--- a/src/oscar/apps/catalogue/abstract_models.py\n+++ b/src/oscar/apps/catalogue/abstract_models.py\n@@ -14,6 +14,7 @@\n from django.db.models import Count, Exists, OuterRef, Sum\n from django.db.models.fields import Field\n from django.db.models.lookups import StartsWith\n+from django.template.defaultfilters import striptags\n from django.urls import reverse\n from django.utils.functional import SimpleLazyObject, cached_property\n from django.utils.html import strip_tags\n@@ -128,6 +129,8 @@ class AbstractCategory(MP_Node):\n \n     name = models.CharField(_('Name'), max_length=255, db_index=True)\n     description = models.TextField(_('Description'), blank=True)\n+    meta_title = models.CharField(_('Meta title'), max_length=255, blank=True, null=True)\n+    meta_description = models.TextField(_('Meta description'), blank=True, null=True)\n     image = models.ImageField(_('Image'), upload_to='categories', blank=True,\n                               null=True, max_length=255)\n     slug = SlugField(_('Slug'), max_length=255, db_index=True)\n@@ -235,6 +238,12 @@ def fix_tree(cls, destructive=False):\n             else:\n                 node.set_ancestors_are_public()\n \n+    def get_meta_title(self):\n+        return self.meta_title or self.name\n+\n+    def get_meta_description(self):\n+        return self.meta_description or striptags(self.description)\n+\n     def get_ancestors_and_self(self):\n         \"\"\"\n         Gets ancestors and includes itself. Use treebeard's get_ancestors\n@@ -369,6 +378,8 @@ class AbstractProduct(models.Model):\n                              max_length=255, blank=True)\n     slug = models.SlugField(_('Slug'), max_length=255, unique=False)\n     description = models.TextField(_('Description'), blank=True)\n+    meta_title = models.CharField(_('Meta title'), max_length=255, blank=True, null=True)\n+    meta_description = models.TextField(_('Meta description'), blank=True, null=True)\n \n     #: \"Kind\" of product, e.g. T-Shirt, Book, etc.\n     #: None for child products, they inherit their parent's product class\n@@ -613,6 +624,20 @@ def get_title(self):\n         return title\n     get_title.short_description = pgettext_lazy(\"Product title\", \"Title\")\n \n+    def get_meta_title(self):\n+        title = self.meta_title\n+        if not title and self.is_child:\n+            title = self.parent.meta_title\n+        return title or self.get_title()\n+    get_meta_title.short_description = pgettext_lazy(\"Product meta title\", \"Meta title\")\n+\n+    def get_meta_description(self):\n+        meta_description = self.meta_description\n+        if not meta_description and self.is_child:\n+            meta_description = self.parent.meta_description\n+        return meta_description or striptags(self.description)\n+    get_meta_description.short_description = pgettext_lazy(\"Product meta description\", \"Meta description\")\n+\n     def get_product_class(self):\n         \"\"\"\n         Return a product's item class. Child products inherit their parent's.\ndiff --git a/src/oscar/apps/catalogue/migrations/0021_auto_20201005_0844.py b/src/oscar/apps/catalogue/migrations/0021_auto_20201005_0844.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/catalogue/migrations/0021_auto_20201005_0844.py\n@@ -0,0 +1,33 @@\n+# Generated by Django 3.0.10 on 2020-10-05 07:44\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('catalogue', '0020_auto_20200801_0817'),\n+    ]\n+\n+    operations = [\n+        migrations.AddField(\n+            model_name='category',\n+            name='meta_description',\n+            field=models.TextField(blank=True, null=True, verbose_name='Meta description'),\n+        ),\n+        migrations.AddField(\n+            model_name='category',\n+            name='meta_title',\n+            field=models.CharField(blank=True, null=True, max_length=255, verbose_name='Meta title'),\n+        ),\n+        migrations.AddField(\n+            model_name='product',\n+            name='meta_description',\n+            field=models.TextField(blank=True, null=True, verbose_name='Meta description'),\n+        ),\n+        migrations.AddField(\n+            model_name='product',\n+            name='meta_title',\n+            field=models.CharField(blank=True, null=True, max_length=255, verbose_name='Meta title'),\n+        ),\n+    ]\ndiff --git a/src/oscar/apps/dashboard/catalogue/forms.py b/src/oscar/apps/dashboard/catalogue/forms.py\n--- a/src/oscar/apps/dashboard/catalogue/forms.py\n+++ b/src/oscar/apps/dashboard/catalogue/forms.py\n@@ -27,12 +27,25 @@\n \n BaseCategoryForm = movenodeform_factory(\n     Category,\n-    fields=['name', 'slug', 'description', 'image', 'is_public'],\n-    exclude=['ancestors_are_public'])\n+    fields=['name', 'slug', 'description', 'image', 'is_public', 'meta_title', 'meta_description'],\n+    exclude=['ancestors_are_public'],\n+    widgets={'meta_description': forms.Textarea(attrs={'class': 'no-widget-init'})})\n \n \n-class CategoryForm(BaseCategoryForm):\n+class SEOFormMixin:\n+    seo_fields = ['meta_title', 'meta_description', 'slug']\n \n+    def primary_form_fields(self):\n+        return [field for field in self if not field.is_hidden and not self.is_seo_field(field)]\n+\n+    def seo_form_fields(self):\n+        return [field for field in self if self.is_seo_field(field)]\n+\n+    def is_seo_field(self, field):\n+        return field.name in self.seo_fields\n+\n+\n+class CategoryForm(SEOFormMixin, BaseCategoryForm):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         if 'slug' in self.fields:\n@@ -178,7 +191,7 @@ def _attr_image_field(attribute):\n         label=attribute.name, required=attribute.required)\n \n \n-class ProductForm(forms.ModelForm):\n+class ProductForm(SEOFormMixin, forms.ModelForm):\n     FIELD_FACTORIES = {\n         \"text\": _attr_text_field,\n         \"richtext\": _attr_textarea_field,\n@@ -198,9 +211,11 @@ class ProductForm(forms.ModelForm):\n     class Meta:\n         model = Product\n         fields = [\n-            'title', 'upc', 'description', 'is_public', 'is_discountable', 'structure']\n+            'title', 'upc', 'description', 'is_public', 'is_discountable', 'structure', 'slug', 'meta_title',\n+            'meta_description']\n         widgets = {\n-            'structure': forms.HiddenInput()\n+            'structure': forms.HiddenInput(),\n+            'meta_description': forms.Textarea(attrs={'class': 'no-widget-init'})\n         }\n \n     def __init__(self, product_class, data=None, parent=None, *args, **kwargs):\n@@ -220,6 +235,9 @@ def __init__(self, product_class, data=None, parent=None, *args, **kwargs):\n             self.instance.product_class = product_class\n         self.add_attribute_fields(product_class, self.instance.is_parent)\n \n+        if 'slug' in self.fields:\n+            self.fields['slug'].required = False\n+            self.fields['slug'].help_text = _('Leave blank to generate from product title')\n         if 'title' in self.fields:\n             self.fields['title'].widget = forms.TextInput(\n                 attrs={'autocomplete': 'off'})\ndiff --git a/src/oscar/apps/dashboard/catalogue/views.py b/src/oscar/apps/dashboard/catalogue/views.py\n--- a/src/oscar/apps/dashboard/catalogue/views.py\n+++ b/src/oscar/apps/dashboard/catalogue/views.py\n@@ -628,6 +628,9 @@ def get_context_data(self, **kwargs):\n \n     def get_success_url(self):\n         messages.info(self.request, _(\"Category updated successfully\"))\n+        action = self.request.POST.get('action')\n+        if action == 'continue':\n+            return reverse('dashboard:catalogue-category-update', kwargs={\"pk\": self.object.id})\n         return super().get_success_url()\n \n \n", "test_patch": "diff --git a/tests/_site/apps/catalogue/migrations/0021_auto_20201005_0844.py b/tests/_site/apps/catalogue/migrations/0021_auto_20201005_0844.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/_site/apps/catalogue/migrations/0021_auto_20201005_0844.py\n@@ -0,0 +1,33 @@\n+# Generated by Django 3.0.10 on 2020-10-05 07:44\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('catalogue', '0020_auto_20200801_0817'),\n+    ]\n+\n+    operations = [\n+        migrations.AddField(\n+            model_name='category',\n+            name='meta_description',\n+            field=models.TextField(blank=True, null=True, verbose_name='Meta description'),\n+        ),\n+        migrations.AddField(\n+            model_name='category',\n+            name='meta_title',\n+            field=models.CharField(blank=True, null=True, max_length=255, verbose_name='Meta title'),\n+        ),\n+        migrations.AddField(\n+            model_name='product',\n+            name='meta_description',\n+            field=models.TextField(blank=True, null=True, verbose_name='Meta description'),\n+        ),\n+        migrations.AddField(\n+            model_name='product',\n+            name='meta_title',\n+            field=models.CharField(blank=True, null=True, max_length=255, verbose_name='Meta title'),\n+        ),\n+    ]\ndiff --git a/tests/unit/catalogue/test_models.py b/tests/unit/catalogue/test_models.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/unit/catalogue/test_models.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase\n+\n+from oscar.apps.catalogue.models import Product\n+from oscar.test.factories.catalogue import ProductFactory\n+\n+\n+class ProductTestCase(TestCase):\n+\n+    @staticmethod\n+    def _get_saved(model_obj):\n+        model_obj.save()\n+        model_obj.refresh_from_db()\n+        return model_obj\n+\n+    def test_get_meta_title(self):\n+        parent_title, child_title = \"P title\", \"C title\"\n+        parent_meta_title, child_meta_title = \"P meta title\", \"C meta title\"\n+        parent_product = ProductFactory(structure=Product.PARENT, title=parent_title, meta_title=parent_meta_title)\n+        child_product = ProductFactory(structure=Product.CHILD, title=child_title, meta_title=child_meta_title,\n+                                       parent=parent_product)\n+        self.assertEqual(child_product.get_meta_title(), child_meta_title)\n+        child_product.meta_title = \"\"\n+        self.assertEqual(self._get_saved(child_product).get_meta_title(), parent_meta_title)\n+        parent_product.meta_title = \"\"\n+        child_product.parent = self._get_saved(parent_product)\n+        self.assertEqual(self._get_saved(child_product).get_meta_title(), child_title)\n+\n+    def test_get_meta_description(self):\n+        parent_description, child_description = \"P description\", \"C description\"\n+        parent_meta_description, child_meta_description = \"P meta description\", \"C meta description\"\n+        parent_product = ProductFactory(structure=Product.PARENT, description=parent_description,\n+                                        meta_description=parent_meta_description)\n+        child_product = ProductFactory(structure=Product.CHILD, description=child_description,\n+                                       meta_description=child_meta_description, parent=parent_product)\n+        self.assertEqual(child_product.get_meta_description(), child_meta_description)\n+        child_product.meta_description = \"\"\n+        self.assertEqual(self._get_saved(child_product).get_meta_description(), parent_meta_description)\n+        parent_product.meta_description = \"\"\n+        child_product.parent = self._get_saved(parent_product)\n+        self.assertEqual(self._get_saved(child_product).get_meta_description(), child_description)\n", "problem_statement": "Add SEO fields to product and category models and make editable in the dashboard\nThere are a few SEO components that we regularly find clients asking for the ability to control on product and category pages:\r\n\r\n1. Meta title\r\n2. Meta description\r\n3. Slug\r\n\r\nFor products, slug, meta title and description are all auto-generated from the product title/description, with no option to override any of these. While this is fine a lot of the time, Oscar should provide the ability to override these.\r\n\r\nFor categories, meta title and description are also auto-generated from the product title/description, and there is no option to override.\r\n\r\nI think we should have a \"Search Engine Optimisation\" tab on the dashboard edit views for both of these, which allow override of these parameters.\n", "hints_text": "Hey @solarissmoke ,\r\nJust wanted to confirm that we are talking about the `AbtractProduct` and `AbstractCategory` classes from `src/oscar/apps/catalogue/abstract_models.py` right?\r\n\r\nAlso, will this issue involve changes in the model and changes to the frontend (dashboard)?\n@SameeranB yes, but note that there is [already a PR](https://github.com/django-oscar/django-oscar/pull/3522) for this feature under review.\nAah... that's great. No issues... I'll look for some other issue to resolve.", "created_at": "2020-10-05T08:34:15Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/unit/catalogue/test_models.py::ProductTestCase::test_get_meta_description", "tests/unit/catalogue/test_models.py::ProductTestCase::test_get_meta_title"], "PASS_TO_PASS": [], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3495, "instance_id": "django-oscar__django-oscar-3495", "issue_numbers": ["3074"], "base_commit": "8e1381f9c34fce456336028be3d0870836040c41", "patch": "diff --git a/src/oscar/apps/address/abstract_models.py b/src/oscar/apps/address/abstract_models.py\n--- a/src/oscar/apps/address/abstract_models.py\n+++ b/src/oscar/apps/address/abstract_models.py\n@@ -103,7 +103,7 @@ class AbstractAddress(models.Model):\n         'HT': r'^[0-9]{4}$',\n         'HU': r'^[0-9]{4}$',\n         'ID': r'^[0-9]{5}$',\n-        'IL': r'^[0-9]{7}$',\n+        'IL': r'^([0-9]{5}|[0-9]{7})$',\n         'IM': r'^IM[0-9]{2,3}[A-Z]{2}$$',\n         'IN': r'^[0-9]{6}$',\n         'IO': r'^[A-Z]{4}[0-9][A-Z]{2}$',\n", "test_patch": "diff --git a/tests/integration/address/test_models.py b/tests/integration/address/test_models.py\n--- a/tests/integration/address/test_models.py\n+++ b/tests/integration/address/test_models.py\n@@ -225,6 +225,8 @@ def test_summary_is_property(self):\n     ('BN', 'BC3615'),\n     ('TW', '104'),\n     ('TW', '10444'),\n+    ('IL', '1029200'),\n+    ('IL', '94142'),\n     # It works for small cases as well\n     ('GB', 'sw2 1rw'),\n ]\n", "problem_statement": "The postal Code validation for Israel should also take 5 digit numbers\nIn oscar.apps.address.abstract_models.AbstractAddress:\r\n\r\n`'IL': r'^[0-9]{7}$',`\r\n\r\nShould be:\r\n`'IL': r'^([0-9]{5}|[0-9]{7})$',`\r\n\r\nFor more info: https://en.wikipedia.org/wiki/Postal_codes_in_Israel\n", "hints_text": "Right, but seems 5-digit postal codes are not officially used any more, could you please mention working 5-digit postal code?\nBut they are used by our customers. So sure I can just overwrite it, which we have. \r\n\r\nTo me the key sentence in the wiki article is: \"they continue to be widely used\". As we are dealing with people and not machines, then what is official is to me not as important as what is used by our customers :)\n@ckaalund grateful if you can make a PR to address this.\nOr if you could quote working 5-digit postal code - that also would be helpful.\nOk, found reference by myself of https://en.youbianku.com/Israel.\r\n\r\nPR is coming as well.\r\n", "created_at": "2020-09-08T10:09:09Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/address/test_models.py::test_assert_valid_postcode[IL-94142]"], "PASS_TO_PASS": ["tests/integration/address/test_models.py::TestUserAddress::test_active_address_fields_skips_whitespace_only_fields", "tests/integration/address/test_models.py::TestUserAddress::test_can_be_hashed_including_non_ascii", "tests/integration/address/test_models.py::TestUserAddress::test_converts_postcode_to_uppercase_when_cleaning", "tests/integration/address/test_models.py::TestUserAddress::test_has_name_property", "tests/integration/address/test_models.py::TestUserAddress::test_has_summary_property", "tests/integration/address/test_models.py::TestUserAddress::test_hash_and_summary_values_on_model_with_custom_base_fields", "tests/integration/address/test_models.py::TestUserAddress::test_hash_and_summary_values_on_model_with_custom_hash_fields", "tests/integration/address/test_models.py::TestUserAddress::test_hash_value", "tests/integration/address/test_models.py::TestUserAddress::test_ignores_whitespace_when_hashing", "tests/integration/address/test_models.py::TestUserAddress::test_populate_shipping_address_doesnt_set_id", "tests/integration/address/test_models.py::TestUserAddress::test_populated_shipping_address_has_same_summary_user_address", "tests/integration/address/test_models.py::TestUserAddress::test_strips_whitespace_from_salutation", "tests/integration/address/test_models.py::TestUserAddress::test_strips_whitespace_in_name_property", "tests/integration/address/test_models.py::TestUserAddress::test_strips_whitespace_when_cleaning", "tests/integration/address/test_models.py::TestUserAddress::test_summary_includes_country", "tests/integration/address/test_models.py::TestUserAddress::test_summary_is_property", "tests/integration/address/test_models.py::TestUserAddress::test_summary_value", "tests/integration/address/test_models.py::TestUserAddress::test_uses_city_as_an_alias_of_line4", "tests/integration/address/test_models.py::TestUserAddress::test_uses_title_firstname_and_lastname_in_salutation", "tests/integration/address/test_models.py::test_assert_valid_postcode[GB-N1", "tests/integration/address/test_models.py::test_assert_valid_postcode[SK-991", "tests/integration/address/test_models.py::test_assert_valid_postcode[CZ-612", "tests/integration/address/test_models.py::test_assert_valid_postcode[CC-6799]", "tests/integration/address/test_models.py::test_assert_valid_postcode[CY-8240]", "tests/integration/address/test_models.py::test_assert_valid_postcode[MC-98000]", "tests/integration/address/test_models.py::test_assert_valid_postcode[SH-STHL", "tests/integration/address/test_models.py::test_assert_valid_postcode[JP-150-2345]", "tests/integration/address/test_models.py::test_assert_valid_postcode[PG-314]", "tests/integration/address/test_models.py::test_assert_valid_postcode[HN-41202]", "tests/integration/address/test_models.py::test_assert_valid_postcode[BN-BC3615]", "tests/integration/address/test_models.py::test_assert_valid_postcode[TW-104]", "tests/integration/address/test_models.py::test_assert_valid_postcode[TW-10444]", "tests/integration/address/test_models.py::test_assert_valid_postcode[IL-1029200]", "tests/integration/address/test_models.py::test_assert_valid_postcode[GB-sw2", "tests/integration/address/test_models.py::test_assert_invalid_postcode[GB-not-a-postcode]", "tests/integration/address/test_models.py::test_assert_invalid_postcode[DE-123b4]"], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3324, "instance_id": "django-oscar__django-oscar-3324", "issue_numbers": ["3323"], "base_commit": "5de733e631ad7f914011188f9a3b9a20813ff948", "patch": "diff --git a/src/oscar/apps/dashboard/catalogue/views.py b/src/oscar/apps/dashboard/catalogue/views.py\n--- a/src/oscar/apps/dashboard/catalogue/views.py\n+++ b/src/oscar/apps/dashboard/catalogue/views.py\n@@ -646,7 +646,7 @@ class ProductLookupView(ObjectLookupView):\n     model = Product\n \n     def get_queryset(self):\n-        return self.model.browsable.all()\n+        return self.model.objects.browsable().all()\n \n     def lookup_filter(self, qs, term):\n         return qs.filter(Q(title__icontains=term)\n", "test_patch": "diff --git a/tests/functional/dashboard/test_catalogue.py b/tests/functional/dashboard/test_catalogue.py\n--- a/tests/functional/dashboard/test_catalogue.py\n+++ b/tests/functional/dashboard/test_catalogue.py\n@@ -30,7 +30,8 @@ class TestCatalogueViews(WebTestCase):\n     def test_exist(self):\n         urls = [reverse('dashboard:catalogue-product-list'),\n                 reverse('dashboard:catalogue-category-list'),\n-                reverse('dashboard:stock-alert-list')]\n+                reverse('dashboard:stock-alert-list'),\n+                reverse('dashboard:catalogue-product-lookup')]\n         for url in urls:\n             self.assertIsOk(self.get(url))\n \n", "problem_statement": "product-lookup not working\n### Issue Summary\r\nCan't select related products\r\n\r\n### Steps to Reproduce\r\n\r\n1. run sandbox\r\n2. in Dashboard->products select any product eg. The shellcoder's handbook\r\n3. in product's upselling click text field `Recommended product:`\r\n4. dropdown contains `The results could not be loaded.` and console throws ` Internal Server Error: /en-gb/dashboard/catalogue/product-lookup/`\r\nwith traceback ending\r\n```\r\ndjango-oscar/src/oscar/apps/dashboard/catalogue/views.py\", line 649, in get_queryset\r\n    return self.model.browsable.all()\r\nAttributeError: type object 'Product' has no attribute 'browsable'\r\n```\r\n\r\n### Technical details\r\n\r\n* Python version: 3.7.5\r\n* Django version: 2.2.11\r\n* Oscar version: commit  5de733e\r\n\n", "hints_text": "", "created_at": "2020-03-16T10:36:49Z", "version": "2.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/dashboard/test_catalogue.py::TestCatalogueViews::test_exist"], "PASS_TO_PASS": ["tests/functional/dashboard/test_catalogue.py::TestCatalogueViews::test_is_public", "tests/functional/dashboard/test_catalogue.py::TestCatalogueViews::test_upc_filter", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_and_continue_editing_a_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_create_product_with_required_attributes", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_delete_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_delete_a_parent_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_delete_a_standalone_product", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_list_her_products", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_can_update_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestAStaffUser::test_cant_create_child_product_for_invalid_parents", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_and_continue_editing_a_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_create_product_with_required_attributes", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_delete_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_delete_a_parent_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_delete_a_standalone_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_list_her_products", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_can_update_a_product_without_stockrecord", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_cant_create_a_child_product", "tests/functional/dashboard/test_catalogue.py::TestANonStaffUser::test_cant_create_child_product_for_invalid_parents"], "environment_setup_commit": "2429ad9e88e9a432dfa60aaca703d99860f85389"}, {"repo": "django-oscar/django-oscar", "pull_number": 3506, "instance_id": "django-oscar__django-oscar-3506", "issue_numbers": ["3428"], "base_commit": "a3d255dad44ccd78299dd5230f6753f5ab90eacc", "patch": "diff --git a/src/oscar/apps/checkout/views.py b/src/oscar/apps/checkout/views.py\n--- a/src/oscar/apps/checkout/views.py\n+++ b/src/oscar/apps/checkout/views.py\n@@ -2,6 +2,7 @@\n from urllib.parse import quote\n \n from django import http\n+from django.conf import settings\n from django.contrib import messages\n from django.contrib.auth import login\n from django.shortcuts import redirect\n@@ -659,7 +660,14 @@ class ThankYouView(generic.DetailView):\n     template_name = 'oscar/checkout/thank_you.html'\n     context_object_name = 'order'\n \n-    def get_object(self):\n+    def get(self, request, *args, **kwargs):\n+        self.object = self.get_object()\n+        if self.object is None:\n+            return redirect(settings.OSCAR_HOMEPAGE)\n+        context = self.get_context_data(object=self.object)\n+        return self.render_to_response(context)\n+\n+    def get_object(self, queryset=None):\n         # We allow superusers to force an order thank-you page for testing\n         order = None\n         if self.request.user.is_superuser:\n@@ -674,9 +682,6 @@ def get_object(self):\n             if 'checkout_order_id' in self.request.session:\n                 order = Order._default_manager.get(\n                     pk=self.request.session['checkout_order_id'])\n-            else:\n-                raise http.Http404(_(\"No order found\"))\n-\n         return order\n \n     def get_context_data(self, *args, **kwargs):\n", "test_patch": "diff --git a/tests/functional/checkout/test_customer_checkout.py b/tests/functional/checkout/test_customer_checkout.py\n--- a/tests/functional/checkout/test_customer_checkout.py\n+++ b/tests/functional/checkout/test_customer_checkout.py\n@@ -1,5 +1,3 @@\n-from http import client as http_client\n-\n from django.urls import reverse\n \n from oscar.core.loading import get_class, get_model\n@@ -201,10 +199,11 @@ def test_records_use(self):\n \n class TestThankYouView(CheckoutMixin, WebTestCase):\n \n-    def tests_gets_a_404_when_there_is_no_order(self):\n+    def tests_gets_a_302_when_there_is_no_order(self):\n         response = self.get(\n             reverse('checkout:thank-you'), user=self.user, status=\"*\")\n-        self.assertEqual(http_client.NOT_FOUND, response.status_code)\n+        self.assertIsRedirect(response)\n+        self.assertRedirectsTo(response, 'catalogue:index')\n \n     def tests_custumers_can_reach_the_thank_you_page(self):\n         self.add_product_to_basket()\n@@ -230,7 +229,7 @@ def test_superusers_can_force_an_order(self):\n         response = self.get(test_url, status='*', user=user)\n         self.assertIsOk(response)\n \n-    def test_users_cannot_force_an_other_custumer_order(self):\n+    def test_users_cannot_force_an_other_customer_order(self):\n         self.add_product_to_basket()\n         self.enter_shipping_address()\n         self.place_order()\n@@ -241,8 +240,10 @@ def test_users_cannot_force_an_other_custumer_order(self):\n         test_url = '%s?order_number=%s' % (\n             reverse('checkout:thank-you'), order.number)\n         response = self.get(test_url, status='*', user=user)\n-        self.assertEqual(response.status_code, http_client.NOT_FOUND)\n+        self.assertIsRedirect(response)\n+        self.assertRedirectsTo(response, 'catalogue:index')\n \n         test_url = '%s?order_id=%s' % (reverse('checkout:thank-you'), order.pk)\n         response = self.get(test_url, status='*', user=user)\n-        self.assertEqual(response.status_code, http_client.NOT_FOUND)\n+        self.assertIsRedirect(response)\n+        self.assertRedirectsTo(response, 'catalogue:index')\ndiff --git a/tests/integration/checkout/test_views.py b/tests/integration/checkout/test_views.py\n--- a/tests/integration/checkout/test_views.py\n+++ b/tests/integration/checkout/test_views.py\n@@ -1,24 +1,32 @@\n-from django.test import TestCase\n-from django.test.utils import override_settings\n from django.urls import reverse\n \n from oscar.test.factories import OrderFactory\n+from oscar.test.testcases import WebTestCase\n \n \n-class ThankYouViewTestCase(TestCase):\n+class ThankYouViewTestCase(WebTestCase):\n+    is_anonymous = False\n \n-    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n     def test_analytics_event_triggered_only_on_first_view(self):\n-        order = OrderFactory()\n-        session = self.client.session\n-        # Put the order ID in the session, mimicking a completed order,\n-        # so that we can reach the thank you page.\n-        session['checkout_order_id'] = order.pk\n-        session.save()\n+        with self.settings(OSCAR_ALLOW_ANON_CHECKOUT=True):\n+            url = reverse('checkout:thank-you')\n+            order = OrderFactory()\n+            session = self.client.session\n+            # Put the order ID in the session, mimicking a completed order,\n+            # so that we can reach the thank you page.\n+            session['checkout_order_id'] = order.pk\n+            session.save()\n \n-        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n-        self.assertTrue(r1.context['send_analytics_event'])\n+            r1 = self.client.get(url, follow=True)\n+            self.assertTrue(r1.context['send_analytics_event'])\n \n-        # Request the view a second time\n-        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n-        self.assertFalse(r2.context['send_analytics_event'])\n+            # Request the view a second time\n+            r2 = self.client.get(url, follow=True)\n+            self.assertFalse(r2.context['send_analytics_event'])\n+\n+    def test_missing_order_id_in_the_session(self):\n+        with self.settings(OSCAR_ALLOW_ANON_CHECKOUT=True):\n+            url = reverse('checkout:thank-you')\n+            response = self.app.get(url)\n+            self.assertIsRedirect(response)\n+            self.assertRedirectsTo(response, 'catalogue:index')\n", "problem_statement": "/oscar/checkout/thank-you/` returns 404 when checkout_order_id not in session\n### Issue Summary\r\n\r\nOscar 2.0 smoke tests, `GET /oscar/checkout/thank-you/` returns 404.\r\n\r\nThe smoke test is obviously requesting this without going through the checkout process, so 403 could be appropriate.  It is a very long stretch of the meaning of 404 to use it here - the *resource* was found - it was the resource is responding that it doesnt like the *request* context.\r\n\r\n`ThankYouView` has `raise http.Http404(_(\"No order found\"))`\r\n\r\nMore interesting, it only does this if a session field `checkout_order_id` wasnt found, which that error message does not convey accurately.\r\n\r\nIf it is about a missing field, it could be a `SuspiciousOperation`.\r\n\r\nHowever as it is a GET, that page URL could be in a users browser history, in which case it could be inadvertently loaded in a new session, which isnt really suspicious, and the user shouldnt see a http error page.\r\n\r\nIt should be possible to check if there is a successful order by the user, and thank them again! ;-)\r\nFailing that, a \"there is no checkout in progress\" error message?\r\n\r\n### Steps to Reproduce\r\n\r\nc.f. setup in https://github.com/django-oscar/django-oscar/issues/3421\r\n\r\n### Technical details\r\n\r\n* Python version: 3.8\r\n* Django version: 3.0\r\n* Oscar version: 2.0\n", "hints_text": "A similar issue I'll dump here instead of creating lots of issues.\r\n\r\n410 Gone is described in Wikipedia as\r\n\r\n>  The 410 (Gone) status code indicates that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.  If the origin server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 (Not Found) ought to be used instead.\r\n\r\n> The 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed.  Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer associated with the origin server's site.  It is not necessary to mark all permanently unavailable resources as \"gone\" or to keep the mark for any length of time -- that is left to the discretion of the server owner.\r\n\r\n> A 410 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls (see Section 4.2.2 of [RFC7234]).\r\n\r\nThat is clearly inappropriate here, and even 404 is inappropriate here.  Again, 403 or 400 would be more appropriate.\r\n\r\n```py\r\nFAIL: test_smoke_GET_oscar/^accounts/^notifications/update/$ (django_smoke_tests.tests.SmokeTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/django_smoke_tests/generator.py\", line 95, in test\r\n    self_of_test.fail_test(url, method, response=response)\r\n  File \"/usr/lib/python3.8/site-packages/django_smoke_tests/tests.py\", line 44, in fail_test\r\n    self.fail(fail_msg)\r\nAssertionError: \r\nSMOKE TEST FAILED\r\nURL: /oscar/accounts/notifications/update/\r\nHTTP METHOD: GET\r\nSTATUS CODE: 410\r\n```\n> It should be possible to check if there is a successful order by the user, and thank them again! ;-)\r\nFailing that, a \"there is no checkout in progress\" error message?\r\n\r\nSounds logical to me.\nWDYT @django-oscar/core ^ ?", "created_at": "2020-09-23T11:46:35Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/checkout/test_customer_checkout.py::TestThankYouView::test_users_cannot_force_an_other_customer_order", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::tests_gets_a_302_when_there_is_no_order"], "PASS_TO_PASS": ["tests/functional/checkout/test_customer_checkout.py::TestIndexView::test_redirects_customers_to_shipping_address_view", "tests/functional/checkout/test_customer_checkout.py::TestIndexView::test_redirects_customers_with_empty_basket", "tests/functional/checkout/test_customer_checkout.py::TestIndexView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_can_select_an_existing_shipping_address", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_only_shipping_addresses_are_shown", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestShippingAddressView::test_submitting_valid_form_adds_data_to_session", "tests/functional/checkout/test_customer_checkout.py::TestUserAddressUpdateView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestUserAddressUpdateView::test_submitting_valid_form_modifies_user_address", "tests/functional/checkout/test_customer_checkout.py::TestShippingMethodView::test_redirects_when_only_one_shipping_method", "tests/functional/checkout/test_customer_checkout.py::TestShippingMethodView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestDeleteUserAddressView::test_can_delete_a_user_address_from_shipping_address_page", "tests/functional/checkout/test_customer_checkout.py::TestDeleteUserAddressView::test_requires_login", "tests/functional/checkout/test_customer_checkout.py::TestPreviewView::test_allows_order_to_be_placed", "tests/functional/checkout/test_customer_checkout.py::TestPlacingAnOrderUsingAVoucher::test_records_use", "tests/functional/checkout/test_customer_checkout.py::TestPlacingAnOrderUsingAnOffer::test_records_use", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::test_superusers_can_force_an_order", "tests/functional/checkout/test_customer_checkout.py::TestThankYouView::tests_custumers_can_reach_the_thank_you_page"], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3316, "instance_id": "django-oscar__django-oscar-3316", "issue_numbers": ["3279"], "base_commit": "6fa835e6ae2e51fed7908b5f401f3252aca23b1f", "patch": "diff --git a/src/oscar/apps/dashboard/vouchers/views.py b/src/oscar/apps/dashboard/vouchers/views.py\n--- a/src/oscar/apps/dashboard/vouchers/views.py\n+++ b/src/oscar/apps/dashboard/vouchers/views.py\n@@ -10,6 +10,7 @@\n from django.utils.translation import gettext_lazy as _\n from django.views import generic\n \n+from oscar.apps.voucher.utils import get_offer_name\n from oscar.core.loading import get_class, get_model\n from oscar.core.utils import slugify\n from oscar.views import sort_queryset\n@@ -113,7 +114,7 @@ def form_valid(self, form):\n         )\n         name = form.cleaned_data['name']\n         offer = ConditionalOffer.objects.create(\n-            name=_(\"Offer for voucher '%s'\") % name,\n+            name=get_offer_name(name),\n             offer_type=ConditionalOffer.VOUCHER,\n             benefit=benefit,\n             condition=condition,\n@@ -199,6 +200,7 @@ def form_valid(self, form):\n         offer.condition.save()\n \n         offer.exclusive = form.cleaned_data['exclusive']\n+        offer.name = get_offer_name(voucher.name)\n         offer.save()\n \n         benefit = voucher.benefit\n@@ -253,7 +255,7 @@ def form_valid(self, form):\n         )\n         name = form.cleaned_data['name']\n         offer = ConditionalOffer.objects.create(\n-            name=_(\"Offer for voucher '%s'\") % name,\n+            name=get_offer_name(name),\n             offer_type=ConditionalOffer.VOUCHER,\n             benefit=benefit,\n             condition=condition,\n@@ -322,7 +324,7 @@ def form_valid(self, form):\n             )\n             name = form.cleaned_data['name']\n             offer, __ = ConditionalOffer.objects.update_or_create(\n-                name=_(\"Offer for voucher '%s'\") % name,\n+                name=get_offer_name(name),\n                 defaults=dict(\n                     offer_type=ConditionalOffer.VOUCHER,\n                     benefit=benefit,\ndiff --git a/src/oscar/apps/voucher/apps.py b/src/oscar/apps/voucher/apps.py\n--- a/src/oscar/apps/voucher/apps.py\n+++ b/src/oscar/apps/voucher/apps.py\n@@ -10,3 +10,4 @@ class VoucherConfig(OscarConfig):\n \n     def ready(self):\n         from . import receivers  # noqa\n+        from . import signals  # noqa\ndiff --git a/src/oscar/apps/voucher/signals.py b/src/oscar/apps/voucher/signals.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/voucher/signals.py\n@@ -0,0 +1,25 @@\n+from django.db.models.signals import post_delete\n+from django.dispatch import receiver\n+\n+from oscar.apps.voucher.utils import get_offer_name\n+from oscar.core.loading import get_model\n+\n+Voucher = get_model('voucher', 'Voucher')\n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n+\n+\n+@receiver(post_delete, sender=Voucher)\n+def delete_unused_related_conditional_offer(instance, **kwargs):\n+    voucher = instance  # the object is no longer in the database\n+\n+    try:\n+        conditional_offer = ConditionalOffer.objects.get(\n+            name=get_offer_name(voucher.name),\n+            offer_type=ConditionalOffer.VOUCHER\n+        )\n+    except (ConditionalOffer.DoesNotExist, ConditionalOffer.MultipleObjectsReturned):\n+        pass\n+    else:\n+        # Only delete if not used by other vouchers\n+        if not conditional_offer.vouchers.exists():\n+            conditional_offer.delete()\ndiff --git a/src/oscar/apps/voucher/utils.py b/src/oscar/apps/voucher/utils.py\n--- a/src/oscar/apps/voucher/utils.py\n+++ b/src/oscar/apps/voucher/utils.py\n@@ -2,6 +2,7 @@\n \n from django.db import connection\n from django.utils.crypto import get_random_string\n+from django.utils.translation import gettext_lazy as _\n \n \n def generate_code(length, chars='ABCDEFGHJKLMNPQRSTUVWXYZ23456789',\n@@ -33,3 +34,11 @@ def get_unused_code(length=12, group_length=4, separator='-'):\n             \"SELECT 1 FROM voucher_voucher WHERE code=%s\", [code])\n         if not cursor.fetchall():\n             return code\n+\n+\n+def get_offer_name(voucher_name):\n+    \"\"\"\n+    Return the name used for the auto-generated offer created\n+    when a voucher is created through the dashboard.\n+    \"\"\"\n+    return _(\"Offer for voucher '%s'\") % voucher_name\n", "test_patch": "diff --git a/tests/integration/voucher/test_models.py b/tests/integration/voucher/test_models.py\n--- a/tests/integration/voucher/test_models.py\n+++ b/tests/integration/voucher/test_models.py\n@@ -5,9 +5,11 @@\n from django.core import exceptions\n from django.test import TestCase\n from django.utils.timezone import utc\n+from django.utils.translation import gettext_lazy as _\n \n from oscar.apps.voucher.models import Voucher\n from oscar.core.compat import get_user_model\n+from oscar.core.loading import get_model\n from oscar.test.factories import (\n     ConditionFactory, OrderFactory, RangeFactory, UserFactory, VoucherFactory,\n     VoucherSetFactory, create_basket, create_offer, create_product)\n@@ -15,6 +17,7 @@\n START_DATETIME = datetime.datetime(2011, 1, 1).replace(tzinfo=utc)\n END_DATETIME = datetime.datetime(2012, 1, 1).replace(tzinfo=utc)\n User = get_user_model()\n+ConditionalOffer = get_model('offer', 'ConditionalOffer')\n \n \n class TestSavingAVoucher(TestCase):\n@@ -98,6 +101,93 @@ def test_is_available_to_different_users(self):\n             self.assertFalse(is_voucher_available_to_user)\n \n \n+class TestVoucherDelete(TestCase):\n+\n+    def setUp(self):\n+        product = create_product(price=100)\n+        self.offer_range = RangeFactory(products=[product])\n+        self.offer_condition = ConditionFactory(range=self.offer_range, value=2)\n+\n+    def test_related_offer_deleted(self):\n+        # Voucher with offer name corresponding to it as used in the dashboard\n+        voucher_name = \"Voucher\"\n+        voucher = VoucherFactory(name=voucher_name, code=\"VOUCHER\")\n+        voucher.offers.add(\n+            create_offer(\n+                name=_(\"Offer for voucher '%s'\") % voucher_name,\n+                offer_type='Voucher',\n+                range=self.offer_range,\n+                condition=self.offer_condition\n+            )\n+        )\n+\n+        voucher.delete()\n+        self.assertFalse(\n+            ConditionalOffer.objects.filter(\n+                name=_(\"Offer for voucher '%s'\") % voucher_name,\n+                offer_type=ConditionalOffer.VOUCHER\n+            ).exists())\n+\n+    def test_related_offer_different_name_not_deleted(self):\n+        # Voucher with offer named differently\n+        voucher = VoucherFactory(name=\"Voucher\", code=\"VOUCHER\")\n+        voucher.offers.add(\n+            create_offer(\n+                name=\"Different name test\",\n+                offer_type='Voucher',\n+                range=self.offer_range,\n+                condition=self.offer_condition\n+            )\n+        )\n+\n+        offer_ids = list(voucher.offers.all().values_list('pk', flat=True))\n+\n+        voucher.delete()\n+        count_offers = ConditionalOffer.objects.filter(id__in=offer_ids).count()\n+        assert len(offer_ids) == count_offers\n+\n+    def test_related_offer_different_type_not_deleted(self):\n+        # Voucher with offer not of type \"Voucher\"\n+        voucher_name = \"Voucher\"\n+        voucher = VoucherFactory(name=voucher_name, code=\"VOUCHER\")\n+        voucher.offers.add(\n+            create_offer(\n+                name=_(\"Offer for voucher '%s'\") % voucher_name,\n+                offer_type='Site',\n+                range=self.offer_range,\n+                condition=self.offer_condition\n+            )\n+        )\n+\n+        offer_ids = list(voucher.offers.all().values_list('pk', flat=True))\n+\n+        voucher.delete()\n+        count_offers = ConditionalOffer.objects.filter(id__in=offer_ids).count()\n+        assert len(offer_ids) == count_offers\n+\n+    def test_multiple_related_offers_not_deleted(self):\n+        # Voucher with already used offer\n+        voucher_name = \"Voucher 1\"\n+        offer = create_offer(\n+            name=_(\"Offer for voucher '%s'\") % voucher_name,\n+            offer_type='Voucher',\n+            range=self.offer_range,\n+            condition=self.offer_condition\n+        )\n+\n+        voucher1 = VoucherFactory(name=voucher_name, code=\"VOUCHER1\")\n+        voucher1.offers.add(offer)\n+\n+        voucher2 = VoucherFactory(name=\"Voucher 2\", code=\"VOUCHER2\")\n+        voucher2.offers.add(offer)\n+\n+        offer_ids = list(voucher1.offers.all().values_list('pk', flat=True))\n+\n+        voucher1.delete()\n+        count_offers = ConditionalOffer.objects.filter(id__in=offer_ids).count()\n+        assert len(offer_ids) == count_offers\n+\n+\n class TestAvailableForBasket(TestCase):\n \n     def setUp(self):\n", "problem_statement": "Error if create voucher name matching to voucher name deleted\nGot error 500 when create voucher\r\n\r\n<img width=\"844\" alt=\"Screen Shot 2020-01-09 at 9 37 03 AM\" src=\"https://user-images.githubusercontent.com/10126934/72033027-a49d3880-32c3-11ea-819e-cbc0c8a9bbde.png\">\r\n\r\n### Steps to Reproduce\r\n1. Create new voucher\r\n2. Delete that voucher\r\n3. Create voucher again with same **voucher name** deleted\r\n\r\n\n", "hints_text": "", "created_at": "2020-03-03T11:07:40Z", "version": "2.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/voucher/test_models.py::TestVoucherDelete::test_related_offer_deleted"], "PASS_TO_PASS": ["tests/integration/voucher/test_models.py::TestVoucherSet::test_factory", "tests/integration/voucher/test_models.py::TestVoucherSet::test_min_count", "tests/integration/voucher/test_models.py::TestVoucherSet::test_num_basket_additions", "tests/integration/voucher/test_models.py::TestVoucherSet::test_num_orders", "tests/integration/voucher/test_models.py::TestSavingAVoucher::test_saves_code_as_uppercase", "tests/integration/voucher/test_models.py::TestSavingAVoucher::test_verifies_dates_are_sensible", "tests/integration/voucher/test_models.py::TestAVoucher::test_increments_total_discount_when_recording_usage", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_active_between_start_and_end_dates", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_active_on_end_date", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_active_on_start_date", "tests/integration/voucher/test_models.py::TestAVoucher::test_is_inactive_outside_of_start_and_end_dates", "tests/integration/voucher/test_models.py::TestMultiuseVoucher::test_is_available_to_same_user_multiple_times", "tests/integration/voucher/test_models.py::TestOncePerCustomerVoucher::test_is_available_to_a_user_once", "tests/integration/voucher/test_models.py::TestOncePerCustomerVoucher::test_is_available_to_different_users", "tests/integration/voucher/test_models.py::TestVoucherDelete::test_multiple_related_offers_not_deleted", "tests/integration/voucher/test_models.py::TestVoucherDelete::test_related_offer_different_name_not_deleted", "tests/integration/voucher/test_models.py::TestVoucherDelete::test_related_offer_different_type_not_deleted", "tests/integration/voucher/test_models.py::TestAvailableForBasket::test_is_available_for_basket"], "environment_setup_commit": "2429ad9e88e9a432dfa60aaca703d99860f85389"}, {"repo": "django-oscar/django-oscar", "pull_number": 3505, "instance_id": "django-oscar__django-oscar-3505", "issue_numbers": ["3425"], "base_commit": "48cc5c2e622f950a363bed5eff4760d706d098a7", "patch": "diff --git a/src/oscar/apps/catalogue/search_handlers.py b/src/oscar/apps/catalogue/search_handlers.py\n--- a/src/oscar/apps/catalogue/search_handlers.py\n+++ b/src/oscar/apps/catalogue/search_handlers.py\n@@ -2,10 +2,11 @@\n from django.utils.module_loading import import_string\n from django.views.generic.list import MultipleObjectMixin\n \n-from oscar.core.loading import get_class, get_model\n+from oscar.core.loading import get_class, get_classes, get_model\n \n BrowseCategoryForm = get_class('search.forms', 'BrowseCategoryForm')\n-SearchHandler = get_class('search.search_handlers', 'SearchHandler')\n+SearchResultsPaginationMixin, SearchHandler = get_classes(\n+    'search.search_handlers', ('SearchHandler', 'SearchResultsPaginationMixin'))\n is_solr_supported = get_class('search.features', 'is_solr_supported')\n is_elasticsearch_supported = get_class('search.features', 'is_elasticsearch_supported')\n Product = get_model('catalogue', 'Product')\n@@ -77,7 +78,7 @@ def get_search_queryset(self):\n         return sqs\n \n \n-class SimpleProductSearchHandler(MultipleObjectMixin):\n+class SimpleProductSearchHandler(SearchResultsPaginationMixin, MultipleObjectMixin):\n     \"\"\"\n     A basic implementation of the full-featured SearchHandler that has no\n     faceting support, but doesn't require a Haystack backend. It only\n@@ -89,6 +90,7 @@ class SimpleProductSearchHandler(MultipleObjectMixin):\n     paginate_by = settings.OSCAR_PRODUCTS_PER_PAGE\n \n     def __init__(self, request_data, full_path, categories=None):\n+        self.request_data = request_data\n         self.categories = categories\n         self.kwargs = {'page': request_data.get('page') or 1}\n         self.object_list = self.get_queryset()\ndiff --git a/src/oscar/apps/catalogue/views.py b/src/oscar/apps/catalogue/views.py\n--- a/src/oscar/apps/catalogue/views.py\n+++ b/src/oscar/apps/catalogue/views.py\n@@ -130,11 +130,12 @@ def get(self, request, *args, **kwargs):\n         try:\n             self.search_handler = self.get_search_handler(\n                 self.request.GET, request.get_full_path(), [])\n+            response = super().get(request, *args, **kwargs)\n         except InvalidPage:\n             # Redirect to page one.\n             messages.error(request, _('The given page number was invalid.'))\n             return redirect('catalogue:index')\n-        return super().get(request, *args, **kwargs)\n+        return response\n \n     def get_search_handler(self, *args, **kwargs):\n         return get_product_search_handler_class()(*args, **kwargs)\n@@ -172,11 +173,12 @@ def get(self, request, *args, **kwargs):\n         try:\n             self.search_handler = self.get_search_handler(\n                 request.GET, request.get_full_path(), self.get_categories())\n+            response = super().get(request, *args, **kwargs)\n         except InvalidPage:\n             messages.error(request, _('The given page number was invalid.'))\n             return redirect(self.category.get_absolute_url())\n \n-        return super().get(request, *args, **kwargs)\n+        return response\n \n     def is_viewable(self, category, request):\n         return category.is_public or request.user.is_staff\ndiff --git a/src/oscar/apps/search/search_handlers.py b/src/oscar/apps/search/search_handlers.py\n--- a/src/oscar/apps/search/search_handlers.py\n+++ b/src/oscar/apps/search/search_handlers.py\n@@ -1,5 +1,4 @@\n from django.core.paginator import InvalidPage, Paginator\n-from django.utils.translation import gettext_lazy as _\n from haystack import connections\n \n from oscar.core.loading import get_class\n@@ -9,7 +8,39 @@\n FacetMunger = get_class('search.facets', 'FacetMunger')\n \n \n-class SearchHandler(object):\n+class SearchResultsPaginationMixin:\n+    paginate_by = None\n+    paginator_class = Paginator\n+    page_kwarg = 'page'\n+\n+    def paginate_queryset(self, queryset, page_size):\n+        \"\"\"\n+        Paginate the search results. This is a simplified version of\n+        Django's MultipleObjectMixin.paginate_queryset\n+        \"\"\"\n+        paginator = self.get_paginator(queryset, page_size)\n+        page_kwarg = self.page_kwarg\n+        page_number = self.request_data.get(page_kwarg, 1)\n+        try:\n+            page_number = int(page_number)\n+        except ValueError:\n+            if page_number == 'last':\n+                page_number = paginator.num_pages\n+            else:\n+                raise InvalidPage\n+        # This can also raise an InvalidPage exception.\n+        page = paginator.page(page_number)\n+        return paginator, page, page.object_list, page.has_other_pages()\n+\n+    def get_paginator(self, queryset, per_page=None):\n+        \"\"\"\n+        Return a paginator. Override this to set settings like orphans,\n+        allow_empty, etc.\n+        \"\"\"\n+        return self.paginator_class(queryset, per_page)\n+\n+\n+class SearchHandler(SearchResultsPaginationMixin):\n     \"\"\"\n     A class that is concerned with performing a search and paginating the\n     results. The search is triggered upon initialisation (mainly to have a\n@@ -36,9 +67,6 @@ class SearchHandler(object):\n \n     form_class = None\n     model_whitelist = None\n-    paginate_by = None\n-    paginator_class = Paginator\n-    page_kwarg = 'page'\n \n     def __init__(self, request_data, full_path):\n         self.full_path = full_path\n@@ -51,8 +79,7 @@ def __init__(self, request_data, full_path):\n         self.results = self.get_search_results(self.search_form)\n         # If below raises an UnicodeDecodeError, you're running pysolr < 3.2\n         # with Solr 4.\n-        self.paginator, self.page = self.paginate_queryset(\n-            self.results, request_data)\n+        self.paginator, self.page = self.paginate_queryset(self.results, self.paginate_by)[0:2]\n \n     # Search related methods\n \n@@ -85,34 +112,6 @@ def get_search_queryset(self):\n             sqs = sqs.models(*self.model_whitelist)\n         return sqs\n \n-    # Pagination related methods\n-\n-    def paginate_queryset(self, queryset, request_data):\n-        \"\"\"\n-        Paginate the search results. This is a simplified version of\n-        Django's MultipleObjectMixin.paginate_queryset\n-        \"\"\"\n-        paginator = self.get_paginator(queryset)\n-        page_kwarg = self.page_kwarg\n-        page = request_data.get(page_kwarg, 1)\n-        try:\n-            page_number = int(page)\n-        except ValueError:\n-            if page == 'last':\n-                page_number = paginator.num_pages\n-            else:\n-                raise InvalidPage(_(\n-                    \"Page is not 'last', nor can it be converted to an int.\"))\n-        # This can also raise an InvalidPage exception.\n-        return paginator, paginator.page(page_number)\n-\n-    def get_paginator(self, queryset):\n-        \"\"\"\n-        Return a paginator. Override this to set settings like orphans,\n-        allow_empty, etc.\n-        \"\"\"\n-        return self.paginator_class(queryset, self.paginate_by)\n-\n     # Accessing the search results and meta data\n \n     def bulk_fetch_results(self, paginated_results):\n", "test_patch": "diff --git a/tests/functional/catalogue/test_catalogue.py b/tests/functional/catalogue/test_catalogue.py\n--- a/tests/functional/catalogue/test_catalogue.py\n+++ b/tests/functional/catalogue/test_catalogue.py\n@@ -103,6 +103,13 @@ def test_is_public_off(self):\n         products_on_page = list(page.context['products'].all())\n         self.assertEqual(products_on_page, [])\n \n+    def test_invalid_page_redirects_to_index(self):\n+        create_product()\n+        products_list_url = reverse('catalogue:index')\n+        response = self.app.get('%s?page=200' % products_list_url)\n+        self.assertEqual(response.status_code, 302)\n+        self.assertRedirectsTo(response, 'catalogue:index')\n+\n \n class TestProductCategoryView(WebTestCase):\n \n", "problem_statement": "InvalidPage exceptions in CatalogueView are not properly handled\nFound a bug? Please fill out the sections below.\r\n\r\n### Issue Summary\r\n\r\nOscar 2.0 (sorry if already fixed..)\r\n\r\nIf the customer is on page 2 of the Shop product list, and some products are deleted such that there is now only one page, then the customer clicks 'add to cart', they are greeted with a 404 on `\r\n/catalogue/?page=2`\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create 24 products, and set products to page to 20\r\n2. Navigate to page 2 of the shop\r\n3. Separate tab, delete 20 products but not the one about to be added to cart\r\n4. Back on the shop, click 'add to cart.'\r\n\r\n### Technical details\r\n\r\n* Python version: 3.8\r\n* Django version: 3.0\r\n* Oscar version: 2.0\n", "hints_text": "I've retitled the issue because it's not related to adding to cart - the issue is more simply that if you pass an invalid page number to the catalogue view it will always return a 404. We're supposed to be catching the `InvalidPage` exception [here](https://github.com/django-oscar/django-oscar/blob/master/src/oscar/apps/catalogue/views.py#L133) and redirecting to the first page, but the exception is being raised too late, in [`get_context_data()`](https://github.com/django-oscar/django-oscar/blob/master/src/oscar/apps/catalogue/views.py#L145).\r\n\r\nThat is: https://latest.oscarcommerce.com/en-gb/catalogue/?page=50 should redirect to https://latest.oscarcommerce.com/en-gb/catalogue/ instead of throwing a 404.\nBasically, `SimpleProductSearchHandler` inherits `MultipleObjectMixin`, which catches `InvalidPage` and would not allow to propagate it further, but return 404 - https://github.com/django/django/blob/335c9c94acf263901fb023404408880245b0c4b4/django/views/generic/list.py#L71-L75.\r\n\r\nDon't have better idea, other than rewrite this method ^.\r\n\r\n", "created_at": "2020-09-23T10:15:23Z", "version": "3.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/catalogue/test_catalogue.py::TestProductListView::test_invalid_page_redirects_to_index"], "PASS_TO_PASS": ["tests/functional/catalogue/test_catalogue.py::TestProductDetailView::test_child_to_parent_redirect", "tests/functional/catalogue/test_catalogue.py::TestProductDetailView::test_enforces_canonical_url", "tests/functional/catalogue/test_catalogue.py::TestProductDetailView::test_is_public_off", "tests/functional/catalogue/test_catalogue.py::TestProductDetailView::test_is_public_on", "tests/functional/catalogue/test_catalogue.py::TestProductListView::test_is_public_off", "tests/functional/catalogue/test_catalogue.py::TestProductListView::test_is_public_on", "tests/functional/catalogue/test_catalogue.py::TestProductListView::test_shows_add_to_basket_button_for_available_product", "tests/functional/catalogue/test_catalogue.py::TestProductListView::test_shows_not_available_for_out_of_stock_product", "tests/functional/catalogue/test_catalogue.py::TestProductListView::test_shows_pagination_navigation_for_multiple_pages", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_browsable_contains_public_child", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_browsable_hides_public_child", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_browsing_works", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_enforces_canonical_url", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_is_public_child", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_is_public_off", "tests/functional/catalogue/test_catalogue.py::TestProductCategoryView::test_is_public_on"], "environment_setup_commit": "0a01977e9cef028bd3e8985309aa4741b6a8cb33"}, {"repo": "django-oscar/django-oscar", "pull_number": 3317, "instance_id": "django-oscar__django-oscar-3317", "issue_numbers": ["3282"], "base_commit": "40a4cacc27223ac675f5e859e7568b632e3f304c", "patch": "diff --git a/src/oscar/apps/catalogue/abstract_models.py b/src/oscar/apps/catalogue/abstract_models.py\n--- a/src/oscar/apps/catalogue/abstract_models.py\n+++ b/src/oscar/apps/catalogue/abstract_models.py\n@@ -851,6 +851,10 @@ def is_file(self):\n     def __str__(self):\n         return self.name\n \n+    def clean(self):\n+        if self.type == self.BOOLEAN and self.required:\n+            raise ValidationError(_(\"Boolean attribute should not be required.\"))\n+\n     def _save_file(self, value_obj, value):\n         # File fields in Django are treated differently, see\n         # django.db.models.fields.FileField and method save_form_data\n", "test_patch": "diff --git a/tests/integration/catalogue/test_models.py b/tests/integration/catalogue/test_models.py\n--- a/tests/integration/catalogue/test_models.py\n+++ b/tests/integration/catalogue/test_models.py\n@@ -19,3 +19,9 @@ def test_product_attributes_cant_be_python_keywords():\n     attr = models.ProductAttribute(name=\"A\", code=\"import\")\n     with pytest.raises(ValidationError):\n         attr.full_clean()\n+\n+\n+def test_product_boolean_attribute_cant_be_required():\n+    attr = models.ProductAttribute(name=\"A\", code=\"a\", type=models.ProductAttribute.BOOLEAN, required=True)\n+    with pytest.raises(ValidationError):\n+        attr.full_clean()\n", "problem_statement": "Setting `required` on a ProductAttribute with type boolean is non-sensical\n### Issue Summary\r\nWhen a `ProductAttribute` with type `boolean` is set to `required=True`, it requires any underlying`ProductAttributeValue` to be set to `True`, otherwise the Product you're trying to create/change won't save in the dashboard. I don't think the `required` field makes sense for a boolean field in this case. A Boolean field could still be `False` but be required to be filled in as `False`. It's all a bit confusing. \r\n\r\nIt makes sense purely on a form, where you might need to check a checkbox to submit the form. But in this case it's a field in a database that's required. \r\n\r\n### Steps to Reproduce\r\n1. Go to dashboard\r\n1. On any `ProductType` defined, add an Attribute with type `True / False` and set the `Required` field to `True`.\r\n1. Create a new product with this `ProductType` and set the attribute on the product to `False`\r\n\r\nThe dashboard interface says it's required to be set to `True` and as such the option for `False` is not possible.\r\n\r\n### Proposed solution\r\nDon't allow `ProductAttribute`'s with type `boolean` to be set to `required=True`.\r\n\r\n### Technical details\r\nI've tested this on an older Python version. But couldn't find any reference of a fix for this in the latest version.\r\n\r\n* Python version: `2.7.17`\r\n* Django version: `1.11.23`\r\n* Oscar version: `1.6.7 `\r\n\n", "hints_text": "Thanks for this - your proposed fix makes sense, PR welcome if you have time.", "created_at": "2020-03-03T20:06:50Z", "version": "2.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/catalogue/test_models.py::test_product_boolean_attribute_cant_be_required"], "PASS_TO_PASS": ["tests/integration/catalogue/test_models.py::test_product_attributes_can_contain_underscores", "tests/integration/catalogue/test_models.py::test_product_attributes_cant_contain_hyphens", "tests/integration/catalogue/test_models.py::test_product_attributes_cant_be_python_keywords"], "environment_setup_commit": "2429ad9e88e9a432dfa60aaca703d99860f85389"}, {"repo": "django-oscar/django-oscar", "pull_number": 3677, "instance_id": "django-oscar__django-oscar-3677", "issue_numbers": ["3675"], "base_commit": "ce95a8f742c18ce4ee2c9b2556d969cf654e85d7", "patch": "diff --git a/src/oscar/apps/customer/history.py b/src/oscar/apps/customer/history.py\n--- a/src/oscar/apps/customer/history.py\n+++ b/src/oscar/apps/customer/history.py\n@@ -7,61 +7,67 @@\n Product = get_model('catalogue', 'Product')\n \n \n-def get(request):\n-    \"\"\"\n-    Return a list of recently viewed products\n-    \"\"\"\n-    ids = extract(request)\n-\n-    # Reordering as the ID order gets messed up in the query\n-    product_dict = Product.objects.browsable().in_bulk(ids)\n-    ids.reverse()\n-    return [product_dict[id] for id in ids if id in product_dict]\n-\n-\n-def extract(request, response=None):\n-    \"\"\"\n-    Extract the IDs of products in the history cookie\n-    \"\"\"\n-    ids = []\n+class CustomerHistoryManager:\n     cookie_name = settings.OSCAR_RECENTLY_VIEWED_COOKIE_NAME\n-    if cookie_name in request.COOKIES:\n-        try:\n-            ids = json.loads(request.COOKIES[cookie_name])\n-        except ValueError:\n-            # This can occur if something messes up the cookie\n-            if response:\n-                response.delete_cookie(cookie_name)\n-        else:\n-            # Badly written web crawlers send garbage in double quotes\n-            if not isinstance(ids, list):\n-                ids = []\n-    return ids\n+    cookie_kwargs = {\n+        'max_age': settings.OSCAR_RECENTLY_VIEWED_COOKIE_LIFETIME,\n+        'secure': settings.OSCAR_RECENTLY_VIEWED_COOKIE_SECURE,\n+        'httponly': True,\n+    }\n+    max_products = settings.OSCAR_RECENTLY_VIEWED_PRODUCTS\n \n+    @classmethod\n+    def get(cls, request):\n+        \"\"\"\n+        Return a list of recently viewed products\n+        \"\"\"\n+        ids = cls.extract(request)\n \n-def add(ids, new_id):\n-    \"\"\"\n-    Add a new product ID to the list of product IDs\n-    \"\"\"\n-    max_products = settings.OSCAR_RECENTLY_VIEWED_PRODUCTS\n-    if new_id in ids:\n-        ids.remove(new_id)\n-    ids.append(new_id)\n-    if (len(ids) > max_products):\n-        ids = ids[len(ids) - max_products:]\n-    return ids\n+        # Reordering as the ID order gets messed up in the query\n+        product_dict = Product.objects.browsable().in_bulk(ids)\n+        ids.reverse()\n+        return [product_dict[product_id] for product_id in ids if product_id in product_dict]\n+\n+    @classmethod\n+    def extract(cls, request, response=None):\n+        \"\"\"\n+        Extract the IDs of products in the history cookie\n+        \"\"\"\n+        ids = []\n+        if cls.cookie_name in request.COOKIES:\n+            try:\n+                ids = json.loads(request.COOKIES[cls.cookie_name])\n+            except ValueError:\n+                # This can occur if something messes up the cookie\n+                if response:\n+                    response.delete_cookie(cls.cookie_name)\n+            else:\n+                # Badly written web crawlers send garbage in double quotes\n+                if not isinstance(ids, list):\n+                    ids = []\n+        return ids\n \n+    @classmethod\n+    def add(cls, ids, new_id):\n+        \"\"\"\n+        Add a new product ID to the list of product IDs\n+        \"\"\"\n+        if new_id in ids:\n+            ids.remove(new_id)\n+        ids.append(new_id)\n+        if len(ids) > cls.max_products:\n+            ids = ids[len(ids) - cls.max_products:]\n+        return ids\n \n-def update(product, request, response):\n-    \"\"\"\n-    Updates the cookies that store the recently viewed products\n-    removing possible duplicates.\n-    \"\"\"\n-    ids = extract(request, response)\n-    updated_ids = add(ids, product.id)\n-    response.set_cookie(\n-        settings.OSCAR_RECENTLY_VIEWED_COOKIE_NAME,\n-        json.dumps(updated_ids),\n-        max_age=settings.OSCAR_RECENTLY_VIEWED_COOKIE_LIFETIME,\n-        secure=settings.OSCAR_RECENTLY_VIEWED_COOKIE_SECURE,\n-        httponly=True)\n+    @classmethod\n+    def update(cls, product, request, response):\n+        \"\"\"\n+        Updates the cookies that store the recently viewed products\n+        removing possible duplicates.\n+        \"\"\"\n+        ids = cls.extract(request, response)\n+        updated_ids = cls.add(ids, product.id)\n+        response.set_cookie(\n+            cls.cookie_name,\n+            json.dumps(updated_ids),\n+            **cls.cookie_kwargs)\ndiff --git a/src/oscar/apps/customer/receivers.py b/src/oscar/apps/customer/receivers.py\n--- a/src/oscar/apps/customer/receivers.py\n+++ b/src/oscar/apps/customer/receivers.py\n@@ -1,8 +1,9 @@\n from django.dispatch import receiver\n \n from oscar.apps.catalogue.signals import product_viewed\n+from oscar.core.loading import get_class\n \n-from . import history\n+CustomerHistoryManager = get_class('customer.history', 'CustomerHistoryManager')\n \n \n @receiver(product_viewed)\n@@ -12,4 +13,4 @@ def receive_product_view(sender, product, user, request, response, **kwargs):\n \n     Requires the request and response objects due to dependence on cookies\n     \"\"\"\n-    return history.update(product, request, response)\n+    return CustomerHistoryManager.update(product, request, response)\ndiff --git a/src/oscar/templatetags/history_tags.py b/src/oscar/templatetags/history_tags.py\n--- a/src/oscar/templatetags/history_tags.py\n+++ b/src/oscar/templatetags/history_tags.py\n@@ -4,10 +4,10 @@\n from django.urls import Resolver404, resolve\n from django.utils.translation import gettext_lazy as _\n \n-from oscar.apps.customer import history\n-from oscar.core.loading import get_model\n+from oscar.core.loading import get_class, get_model\n \n Site = get_model('sites', 'Site')\n+CustomerHistoryManager = get_class('customer.history', 'CustomerHistoryManager')\n \n register = template.Library()\n \n@@ -19,7 +19,7 @@ def recently_viewed_products(context, current_product=None):\n     Inclusion tag listing the most recently viewed products\n     \"\"\"\n     request = context['request']\n-    products = history.get(request)\n+    products = CustomerHistoryManager.get(request)\n     if current_product:\n         products = [p for p in products if p != current_product]\n     return {'products': products,\n", "test_patch": "diff --git a/tests/functional/customer/test_history.py b/tests/functional/customer/test_history.py\n--- a/tests/functional/customer/test_history.py\n+++ b/tests/functional/customer/test_history.py\n@@ -4,12 +4,13 @@\n from django.http import HttpRequest\n from django.urls import reverse\n \n-from oscar.apps.customer import history\n from oscar.core.compat import get_user_model\n+from oscar.core.loading import get_class\n from oscar.templatetags.history_tags import get_back_button\n from oscar.test.factories import create_product\n from oscar.test.testcases import WebTestCase\n \n+CustomerHistoryManager = get_class('customer.history', 'CustomerHistoryManager')\n User = get_user_model()\n COOKIE_NAME = settings.OSCAR_RECENTLY_VIEWED_COOKIE_NAME\n \n@@ -27,7 +28,7 @@ def test_id_gets_added_to_cookie(self):\n         response = self.app.get(self.product.get_absolute_url())\n         request = HttpRequest()\n         request.COOKIES[COOKIE_NAME] = _unquote(response.test_app.cookies[COOKIE_NAME])\n-        self.assertTrue(self.product.id in history.extract(request))\n+        self.assertTrue(self.product.id in CustomerHistoryManager.extract(request))\n \n     def test_get_back_button(self):\n         request = HttpRequest()\ndiff --git a/tests/integration/customer/test_history.py b/tests/integration/customer/test_history.py\n--- a/tests/integration/customer/test_history.py\n+++ b/tests/integration/customer/test_history.py\n@@ -1,7 +1,9 @@\n from django import http\n from django.test import TestCase\n \n-from oscar.apps.customer import history\n+from oscar.core.loading import get_class\n+\n+CustomerHistoryManager = get_class('customer.history', 'CustomerHistoryManager')\n \n \n class TestProductHistory(TestCase):\n@@ -11,5 +13,5 @@ def setUp(self):\n         self.response = http.HttpResponse()\n \n     def test_starts_with_empty_list(self):\n-        products = history.get(self.request)\n+        products = CustomerHistoryManager.get(self.request)\n         self.assertEqual([], products)\n", "problem_statement": "Load customer.history with get_class\n### Issue Summary\r\n\r\nAll functions of customer.history are loaded by using direct import instead of `get_class`, making it very impractical to override.\r\n\r\n### Steps to Reproduce\r\n\r\nUse cases are for example if you want to change how the object are loaded when getting recently viewed products (I wanted to use search backend instead of DB), or if you want to change some properties of the oscar_history cookie (I wanted to set `samesite` to Lax). Not all use cases can be anticipated, hence this is a good candidate for a `get_class` encapsulation. I think, contrarily to its name, that `get_class` also works for module import, but history module could also be converted to a class with static methods, what would you prefer? I can do the pull request then.\r\n\r\n### Technical details\r\n\r\n* Python version: 3.9.1\r\n* Django version: 3.1.6\r\n* Oscar version: 3.0.0\r\n\n", "hints_text": "Thanks @Chadys - this should definitely be loaded dynamically. As you note `get_class` does in fact work with modules, but I think moving these functions to a class with static methods would be helpful and more extensible in future. PR would be appreciated.", "created_at": "2021-03-09T19:07:19Z", "version": "3.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/functional/customer/test_history.py::HistoryHelpersTest::test_get_back_button", "tests/functional/customer/test_history.py::HistoryHelpersTest::test_id_gets_added_to_cookie", "tests/functional/customer/test_history.py::HistoryHelpersTest::test_viewing_product_creates_cookie", "tests/functional/customer/test_history.py::TestAUserWhoLogsOut::test_has_their_cookies_deleted_on_logout", "tests/integration/customer/test_history.py::TestProductHistory::test_starts_with_empty_list"], "PASS_TO_PASS": [], "environment_setup_commit": "04cd6a4fc750db9310147d96776f06fe289269bf"}, {"repo": "django-oscar/django-oscar", "pull_number": 3501, "instance_id": "django-oscar__django-oscar-3501", "issue_numbers": ["2772"], "base_commit": "f333a827734761d8f1b21db94f5ae9654be31169", "patch": "diff --git a/src/oscar/apps/analytics/reports.py b/src/oscar/apps/analytics/reports.py\n--- a/src/oscar/apps/analytics/reports.py\n+++ b/src/oscar/apps/analytics/reports.py\n@@ -37,6 +37,7 @@ class ProductReportHTMLFormatter(ReportHTMLFormatter):\n class ProductReportGenerator(ReportGenerator):\n     code = 'product_analytics'\n     description = _('Product analytics')\n+    model_class = ProductRecord\n \n     formatters = {\n         'CSV_formatter': ProductReportCSVFormatter,\n@@ -45,10 +46,6 @@ class ProductReportGenerator(ReportGenerator):\n     def report_description(self):\n         return self.description\n \n-    def generate(self):\n-        records = ProductRecord._default_manager.all()\n-        return self.formatter.generate_response(records)\n-\n     def is_available_to(self, user):\n         return user.is_staff\n \n@@ -89,14 +86,11 @@ class UserReportHTMLFormatter(ReportHTMLFormatter):\n class UserReportGenerator(ReportGenerator):\n     code = 'user_analytics'\n     description = _('User analytics')\n+    queryset = UserRecord._default_manager.select_related().all()\n \n     formatters = {\n         'CSV_formatter': UserReportCSVFormatter,\n         'HTML_formatter': UserReportHTMLFormatter}\n \n-    def generate(self):\n-        users = UserRecord._default_manager.select_related().all()\n-        return self.formatter.generate_response(users)\n-\n     def is_available_to(self, user):\n         return user.is_staff\ndiff --git a/src/oscar/apps/basket/reports.py b/src/oscar/apps/basket/reports.py\n--- a/src/oscar/apps/basket/reports.py\n+++ b/src/oscar/apps/basket/reports.py\n@@ -56,6 +56,7 @@ class OpenBasketReportGenerator(ReportGenerator):\n     code = 'open_baskets'\n     description = _('Open baskets')\n     date_range_field_name = 'date_created'\n+    queryset = Basket._default_manager.filter(status=Basket.OPEN)\n \n     formatters = {\n         'CSV_formatter': OpenBasketReportCSVFormatter,\n@@ -65,8 +66,7 @@ def generate(self):\n         additional_data = {\n             'start_date': self.start_date,\n             'end_date': self.end_date}\n-        baskets = Basket._default_manager.filter(status=Basket.OPEN)\n-        return self.formatter.generate_response(baskets, **additional_data)\n+        return self.formatter.generate_response(self.queryset, **additional_data)\n \n \n class SubmittedBasketReportCSVFormatter(ReportCSVFormatter):\n@@ -110,6 +110,7 @@ class SubmittedBasketReportGenerator(ReportGenerator):\n     code = 'submitted_baskets'\n     description = _('Submitted baskets')\n     date_range_field_name = 'date_submitted'\n+    queryset = Basket._default_manager.filter(status=Basket.SUBMITTED)\n \n     formatters = {\n         'CSV_formatter': SubmittedBasketReportCSVFormatter,\n@@ -119,5 +120,4 @@ def generate(self):\n         additional_data = {\n             'start_date': self.start_date,\n             'end_date': self.end_date}\n-        baskets = Basket._default_manager.filter(status=Basket.SUBMITTED)\n-        return self.formatter.generate_response(baskets, **additional_data)\n+        return self.formatter.generate_response(self.queryset, **additional_data)\ndiff --git a/src/oscar/apps/dashboard/reports/reports.py b/src/oscar/apps/dashboard/reports/reports.py\n--- a/src/oscar/apps/dashboard/reports/reports.py\n+++ b/src/oscar/apps/dashboard/reports/reports.py\n@@ -19,13 +19,17 @@ class ReportGenerator(object):\n     code = ''\n     description = '<insert report description>'\n     date_range_field_name = None\n+    model_class = None\n+    queryset = None\n \n     def __init__(self, **kwargs):\n         self.start_date = kwargs.get('start_date')\n         self.end_date = kwargs.get('end_date')\n \n-        formatter_name = '%s_formatter' % kwargs['formatter']\n+        formatter_name = '%s_formatter' % kwargs.get('formatter', 'HTML')\n         self.formatter = self.formatters[formatter_name]()\n+        self.queryset = self.get_queryset()\n+        self.queryset = self.filter_with_date_range(self.queryset)\n \n     def report_description(self):\n         return _('%(report_filter)s between %(start_date)s and %(end_date)s') \\\n@@ -34,8 +38,19 @@ def report_description(self):\n                'end_date': date(self.end_date, 'DATE_FORMAT')\n                }\n \n+    def get_queryset(self):\n+        if self.queryset is not None:\n+            return self.queryset\n+\n+        if not self.model_class:\n+            raise ValueError(\n+                \"Please define a model_class property on your report generator class, \"\n+                \"or override the qet_queryset() method.\"\n+            )\n+        return self.model_class._default_manager.all()\n+\n     def generate(self):\n-        pass\n+        return self.formatter.generate_response(self.queryset)\n \n     def filename(self):\n         \"\"\"\ndiff --git a/src/oscar/apps/dashboard/reports/views.py b/src/oscar/apps/dashboard/reports/views.py\n--- a/src/oscar/apps/dashboard/reports/views.py\n+++ b/src/oscar/apps/dashboard/reports/views.py\n@@ -47,7 +47,8 @@ def get(self, request, *args, **kwargs):\n                 if form.cleaned_data['download']:\n                     return report\n                 else:\n-                    self.set_list_view_attrs(generator, report)\n+                    self.template_name = generator.filename()\n+                    self.object_list = self.queryset = generator.queryset\n                     context = self.get_context_data(object_list=self.queryset)\n                     context['form'] = form\n                     context['description'] = generator.report_description()\n@@ -55,8 +56,3 @@ def get(self, request, *args, **kwargs):\n         else:\n             form = self.report_form_class()\n         return TemplateResponse(request, self.template_name, {'form': form})\n-\n-    def set_list_view_attrs(self, generator, report):\n-        self.template_name = generator.filename()\n-        queryset = generator.filter_with_date_range(report)\n-        self.object_list = self.queryset = queryset\ndiff --git a/src/oscar/apps/offer/reports.py b/src/oscar/apps/offer/reports.py\n--- a/src/oscar/apps/offer/reports.py\n+++ b/src/oscar/apps/offer/reports.py\n@@ -42,15 +42,17 @@ class OfferReportGenerator(ReportGenerator):\n         'HTML_formatter': OfferReportHTMLFormatter,\n     }\n \n-    def generate(self):\n+    def get_queryset(self):\n         qs = OrderDiscount._default_manager.all()\n         if self.start_date:\n             qs = qs.filter(order__date_placed__gte=self.start_date)\n         if self.end_date:\n             qs = qs.filter(order__date_placed__lt=self.end_date + datetime.timedelta(days=1))\n+        return qs\n \n+    def generate(self):\n         offer_discounts = {}\n-        for discount in qs:\n+        for discount in self.queryset:\n             if discount.offer_id not in offer_discounts:\n                 try:\n                     all_offers = ConditionalOffer._default_manager\ndiff --git a/src/oscar/apps/order/reports.py b/src/oscar/apps/order/reports.py\n--- a/src/oscar/apps/order/reports.py\n+++ b/src/oscar/apps/order/reports.py\n@@ -51,21 +51,21 @@ class OrderReportGenerator(ReportGenerator):\n         'HTML_formatter': OrderReportHTMLFormatter,\n     }\n \n-    def generate(self):\n+    def get_queryset(self):\n         qs = Order._default_manager.all()\n-\n         if self.start_date:\n             qs = qs.filter(date_placed__gte=self.start_date)\n         if self.end_date:\n             qs = qs.filter(\n                 date_placed__lt=self.end_date + datetime.timedelta(days=1))\n+        return qs\n \n+    def generate(self):\n         additional_data = {\n             'start_date': self.start_date,\n             'end_date': self.end_date\n         }\n-\n-        return self.formatter.generate_response(qs, **additional_data)\n+        return self.formatter.generate_response(self.queryset, **additional_data)\n \n     def is_available_to(self, user):\n         return user.is_staff\ndiff --git a/src/oscar/apps/voucher/reports.py b/src/oscar/apps/voucher/reports.py\n--- a/src/oscar/apps/voucher/reports.py\n+++ b/src/oscar/apps/voucher/reports.py\n@@ -34,14 +34,10 @@ class VoucherReportHTMLFormatter(ReportHTMLFormatter):\n \n \n class VoucherReportGenerator(ReportGenerator):\n-\n     code = 'vouchers'\n     description = _('Voucher performance')\n+    model_class = Voucher\n \n     formatters = {\n         'CSV_formatter': VoucherReportCSVFormatter,\n         'HTML_formatter': VoucherReportHTMLFormatter}\n-\n-    def generate(self):\n-        vouchers = Voucher._default_manager.all()\n-        return self.formatter.generate_response(vouchers)\n", "test_patch": "diff --git a/tests/integration/basket/test_report.py b/tests/integration/basket/test_report.py\n--- a/tests/integration/basket/test_report.py\n+++ b/tests/integration/basket/test_report.py\n@@ -1,12 +1,21 @@\n import datetime\n \n from django.test import TestCase\n+from django.utils.timezone import utc\n+from freezegun import freeze_time\n \n from oscar.apps.basket.reports import (\n     OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n+from oscar.core.loading import get_model\n+from oscar.test.factories import BasketFactory\n+\n+Basket = get_model('basket', 'Basket')\n \n \n class TestBasketReports(TestCase):\n+    def setUp(self) -> None:\n+        BasketFactory.create_batch(5, status=Basket.OPEN)\n+        BasketFactory.create_batch(6, status=Basket.SUBMITTED)\n \n     def test_open_report_doesnt_error(self):\n         data = {\n@@ -17,6 +26,21 @@ def test_open_report_doesnt_error(self):\n         generator = OpenBasketReportGenerator(**data)\n         generator.generate()\n \n+    def test_open_report_queryset(self):\n+        generator = OpenBasketReportGenerator()\n+        assert generator.queryset.count() == 5\n+\n+    @freeze_time('2020-05-02')\n+    def test_open_report_filtering_by_date_range(self):\n+        BasketFactory.create(status=Basket.OPEN)\n+        data = {\n+            'start_date': datetime.date(2020, 5, 1),\n+            'end_date': datetime.date(2020, 6, 1),\n+            'formatter': 'CSV'\n+        }\n+        generator = OpenBasketReportGenerator(**data)\n+        assert generator.queryset.count() == 1\n+\n     def test_submitted_report_doesnt_error(self):\n         data = {\n             'start_date': datetime.date(2012, 5, 1),\n@@ -25,3 +49,18 @@ def test_submitted_report_doesnt_error(self):\n         }\n         generator = SubmittedBasketReportGenerator(**data)\n         generator.generate()\n+\n+    def test_submitted_report_queryset(self):\n+        generator = SubmittedBasketReportGenerator()\n+        assert generator.queryset.count() == 6\n+\n+    def test_submitted_report_filtering_by_date_range(self):\n+        date_submitted = datetime.datetime(2020, 7, 3).replace(tzinfo=utc)\n+        BasketFactory.create(status=Basket.SUBMITTED, date_submitted=date_submitted)\n+        data = {\n+            'start_date': datetime.date(2020, 7, 1),\n+            'end_date': datetime.date(2020, 8, 1),\n+            'formatter': 'CSV'\n+        }\n+        generator = SubmittedBasketReportGenerator(**data)\n+        assert generator.queryset.count() == 1\n", "problem_statement": "\"Product analytics\" report on dashboard ignores date range\nFound a bug? Please fill out the sections below.\r\n\r\n### Issue Summary\r\n\"Product analytics\" report on dashboard ignores date range\r\n\r\n### Steps to Reproduce\r\nVisit the dashboard, click on the \"Reports\" tab.\r\nSelect \"Product analytics\" from the \"Report type\" dropdown.\r\nSelect a date range and click \"generate report\"\r\nThe results returned will always be for all time, despite the date range selected\r\n\r\n### Technical details\r\nAny Python / Django version, Oscar 1.6.2\r\n\r\nThe ProductReportGenerator ignores the date range, and the stored analytics do not keep track of it. It might be nice to disable the date range controls for those reports that will never store date information.  Though a date breakdown of products purchased would be a nice to have...\r\n\n", "hints_text": "You could add a new model <Insert Name Here> that contains the values on ProductRecord and has a Foreign Key to ProductRecord. This model is created/updated for each day. (If no views/additions/purchases are made then the objects would not be created) The model would have a date for that day for filtering purposes.\r\n\nJust a note that \"User analytics\" behave in the same way\nDate filtering is definitely broken for CSV exports. The [function that performs the filtering](https://github.com/django-oscar/django-oscar/blob/master/src/oscar/apps/dashboard/reports/views.py#L59) is [never called](https://github.com/django-oscar/django-oscar/blob/master/src/oscar/apps/dashboard/reports/views.py#L48) for CSV downloads. It also wouldn't work because the CSV formatter's `generate()` returns a response.", "created_at": "2020-09-21T11:54:51Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/basket/test_report.py::TestBasketReports::test_open_report_filtering_by_date_range", "tests/integration/basket/test_report.py::TestBasketReports::test_open_report_queryset", "tests/integration/basket/test_report.py::TestBasketReports::test_submitted_report_filtering_by_date_range", "tests/integration/basket/test_report.py::TestBasketReports::test_submitted_report_queryset"], "PASS_TO_PASS": ["tests/integration/basket/test_report.py::TestBasketReports::test_open_report_doesnt_error", "tests/integration/basket/test_report.py::TestBasketReports::test_submitted_report_doesnt_error"], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}, {"repo": "django-oscar/django-oscar", "pull_number": 3886, "instance_id": "django-oscar__django-oscar-3886", "issue_numbers": ["3885"], "base_commit": "0a01977e9cef028bd3e8985309aa4741b6a8cb33", "patch": "diff --git a/src/oscar/apps/dashboard/offers/forms.py b/src/oscar/apps/dashboard/offers/forms.py\n--- a/src/oscar/apps/dashboard/offers/forms.py\n+++ b/src/oscar/apps/dashboard/offers/forms.py\n@@ -123,11 +123,17 @@ def clean(self):\n \n         # Check that either a condition has been entered or a custom condition\n         # has been chosen\n-        if data.get('custom_condition'):\n-            if not data.get('range', None):\n+        if not any(data.values()):\n+            raise forms.ValidationError(\n+                _(\"Please either choose a range, type and value OR \"\n+                  \"select a custom condition\"))\n+\n+        if data['custom_condition']:\n+            if data.get('range') or data.get('type') or data.get('value'):\n                 raise forms.ValidationError(\n-                    _(\"A range is required\"))\n-        elif not all([data.get('range'), data.get('type'), data.get('value')]):\n+                    _(\"No other options can be set if you are using a \"\n+                      \"custom condition\"))\n+        elif not data.get('type'):\n             raise forms.ValidationError(\n                 _(\"Please either choose a range, type and value OR \"\n                   \"select a custom condition\"))\ndiff --git a/src/oscar/apps/offer/abstract_models.py b/src/oscar/apps/offer/abstract_models.py\n--- a/src/oscar/apps/offer/abstract_models.py\n+++ b/src/oscar/apps/offer/abstract_models.py\n@@ -732,6 +732,50 @@ def proxy_map(self):\n                 'offer.conditions', 'CoverageCondition'),\n         }\n \n+    def clean(self):\n+        # The form will validate whether this is ok or not.\n+        if not self.type:\n+            return\n+        method_name = 'clean_%s' % self.type.lower()\n+        if hasattr(self, method_name):\n+            getattr(self, method_name)()\n+\n+    def clean_count(self):\n+        errors = []\n+\n+        if not self.range:\n+            errors.append(_(\"Count conditions require a product range\"))\n+\n+        if not self.value:\n+            errors.append(_(\"Count conditions require a value\"))\n+\n+        if errors:\n+            raise exceptions.ValidationError(errors)\n+\n+    def clean_value(self):\n+        errors = []\n+\n+        if not self.range:\n+            errors.append(_(\"Value conditions require a product range\"))\n+\n+        if not self.value:\n+            errors.append(_(\"Value conditions require a value\"))\n+\n+        if errors:\n+            raise exceptions.ValidationError(errors)\n+\n+    def clean_coverage(self):\n+        errors = []\n+\n+        if not self.range:\n+            errors.append(_(\"Coverage conditions require a product range\"))\n+\n+        if not self.value:\n+            errors.append(_(\"Coverage conditions require a value\"))\n+\n+        if errors:\n+            raise exceptions.ValidationError(errors)\n+\n     def consume_items(self, offer, basket, affected_lines):\n         pass\n \n", "test_patch": "diff --git a/tests/integration/dashboard/test_offer_forms.py b/tests/integration/dashboard/test_offer_forms.py\n--- a/tests/integration/dashboard/test_offer_forms.py\n+++ b/tests/integration/dashboard/test_offer_forms.py\n@@ -202,14 +202,34 @@ def test_clean_no_value(self):\n \n     def test_clean_custom_condition(self):\n         \"\"\"\n-        If a custom condition exists, and the data for range and custom condition is supplied,\n-        the form should be valid.\n+        If a custom condition is selected, the form should be valid.\n         \"\"\"\n         custom_condition = create_condition(CustomConditionModel)\n         form = forms.ConditionForm(data={\n-            'range': self.range.id,\n+            'range': '',\n             'type': '',\n             'value': '',\n             'custom_condition': custom_condition.id\n         })\n         self.assertTrue(form.is_valid())\n+        self.assertEqual({\n+            'range': None,\n+            'type': '',\n+            'value': None,\n+            'custom_condition': str(custom_condition.id)\n+        }, form.clean())\n+\n+    def test_clean_custom_condition_with_range_type_and_value(self):\n+        \"\"\"\n+        If a custom condition is selected, but a range, type and value is selected as well,\n+        it should throw a ValidationError as you may only have a custom condition.\n+        \"\"\"\n+        custom_condition = create_condition(CustomConditionModel)\n+        form = forms.ConditionForm(data={\n+            'range': self.range.id,\n+            'type': 'Count',\n+            'value': '5',\n+            'custom_condition': custom_condition.id\n+        })\n+        self.assertFalse(form.is_valid())\n+        self.assertRaises(ValidationError, form.clean)\ndiff --git a/tests/integration/dashboard/test_offer_views.py b/tests/integration/dashboard/test_offer_views.py\n--- a/tests/integration/dashboard/test_offer_views.py\n+++ b/tests/integration/dashboard/test_offer_views.py\n@@ -356,11 +356,9 @@ def test_offer_condition_view_with_built_in_condition_type(self):\n         }])\n \n     def test_offer_condition_view_with_custom_condition_type(self):\n-        range_ = RangeFactory()\n         condition = create_condition(CustomConditionModel)\n \n         request = RequestFactory().post('/', data={\n-            'range': range_.pk,\n             'custom_condition': condition.pk,\n         })\n         request.session['offer_wizard'] = {\n@@ -379,7 +377,7 @@ def test_offer_condition_view_with_custom_condition_type(self):\n         self.assertJSONEqual(request.session['offer_wizard']['benefit_obj'], self.benefit_obj_session_data)\n         self.assertJSONEqual(request.session['offer_wizard']['condition'], {\n             'data': {\n-                'range': range_.pk,\n+                'range': None,\n                 'type': '',\n                 'value': None,\n                 'custom_condition': str(condition.pk),\n@@ -669,11 +667,9 @@ def test_offer_condition_view_with_built_in_condition_type(self):\n         }])\n \n     def test_offer_condition_view_with_custom_condition_type(self):\n-        range_ = RangeFactory()\n         condition = create_condition(CustomConditionModel)\n \n         request = RequestFactory().post('/', data={\n-            'range': range_.pk,\n             'custom_condition': condition.pk,\n         })\n         request.session['offer_wizard'] = {\n@@ -694,7 +690,7 @@ def test_offer_condition_view_with_custom_condition_type(self):\n         self.assertJSONEqual(request.session['offer_wizard'][self.benefit_obj_key], self.benefit_obj_session_data)\n         self.assertJSONEqual(request.session['offer_wizard'][self.condition_form_kwargs_key], {\n             'data': {\n-                'range': range_.pk,\n+                'range': None,\n                 'type': '',\n                 'value': None,\n                 'custom_condition': str(condition.pk),\n", "problem_statement": "When choosing a custom condition for your offer, it requires a range while it shouldn't\nWhen you are choosing a custom condition on your offer, it will throw an error if you do not select a range as well.\r\n\r\n<img width=\"752\" alt=\"image\" src=\"https://user-images.githubusercontent.com/7702200/156327295-b915ed75-48ea-4172-b1fb-98d8e67c674c.png\">\r\n\r\nHowever, the range is saved on the custom condition model so it should not be required.\r\n\r\n### Steps to Reproduce\r\n1. Create a custom condition, see [here](https://django-oscar.readthedocs.io/en/3.0.2/howto/how_to_create_a_custom_condition.html) how.\r\n2. Create an offer and choose your custom condition without choosing a range, type and value.\r\n3. Error should occur.\r\n\r\nThe logic in the the clean method of the ConditionForm seems wrong (line 127):\r\nhttps://github.com/django-oscar/django-oscar/blob/23013a61a1f84517522c071bbeddb3fd3e841ee6/src/oscar/apps/dashboard/offers/forms.py#L126-L133\r\n\r\nI think it should be like the BenefitForm does it:\r\nhttps://github.com/django-oscar/django-oscar/blob/23013a61a1f84517522c071bbeddb3fd3e841ee6/src/oscar/apps/dashboard/offers/forms.py#L178-L191\r\n\r\nOr is there any reason this is a requirement even when you choose a custom condition?\r\n\r\n### Technical details\r\n\r\n* Python version: Python 3.9.9\r\n* Django version: Version: 3.2.9\r\n* Oscar version: Version: 3.1\r\n\n", "hints_text": "I think you are right that the validation is wrong, and should be like the one on the `BenefitForm`.\nAlright, I'll work on a fix then.", "created_at": "2022-03-02T22:18:17Z", "version": "3.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/dashboard/test_offer_forms.py::TestConditionForm::test_clean_custom_condition", "tests/integration/dashboard/test_offer_forms.py::TestConditionForm::test_clean_custom_condition_with_range_type_and_value", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_condition_view_with_custom_condition_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_condition_view_with_custom_condition_type"], "PASS_TO_PASS": ["tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_range_list_view", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_list_view", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_delete_view_for_voucher_offer_without_vouchers", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_offer_delete_view_for_voucher_offer_with_vouchers", "tests/integration/dashboard/test_offer_views.py::TestDashboardOffers::test_range_product_list_view", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_clean_new_incentive", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_clean_new_incentive_only_range", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_clean_no_value_data", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_clean_only_range_custom_exists", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_clean_validation_custom_exists", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_clean_validation_with_custom_benefit", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_init_with_custom_benefit", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_init_with_custom_benefit_with_instance", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_init_without_custom_benefit", "tests/integration/dashboard/test_offer_forms.py::TestBenefitForm::test_is_valid_no_data", "tests/integration/dashboard/test_offer_forms.py::TestConditionForm::test_clean_all_data", "tests/integration/dashboard/test_offer_forms.py::TestConditionForm::test_clean_no_value", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_benefit_view_with_built_in_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_benefit_view_with_custom_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_condition_view_with_built_in_condition_type", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_meta_data_view", "tests/integration/dashboard/test_offer_views.py::TestCreateOfferWizardStepView::test_offer_restrictions_view", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_benefit_view_with_built_in_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_benefit_view_with_custom_benefit_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_condition_view_with_built_in_condition_type", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_meta_data_view", "tests/integration/dashboard/test_offer_views.py::TestUpdateOfferWizardStepView::test_offer_restrictions_view"], "environment_setup_commit": "0a01977e9cef028bd3e8985309aa4741b6a8cb33"}, {"repo": "django-oscar/django-oscar", "pull_number": 3884, "instance_id": "django-oscar__django-oscar-3884", "issue_numbers": ["3875"], "base_commit": "23013a61a1f84517522c071bbeddb3fd3e841ee6", "patch": "diff --git a/src/oscar/apps/partner/strategy.py b/src/oscar/apps/partner/strategy.py\n--- a/src/oscar/apps/partner/strategy.py\n+++ b/src/oscar/apps/partner/strategy.py\n@@ -185,17 +185,19 @@ def parent_availability_policy(self, product, children_stock):\n # Mixins - these can be used to construct the appropriate strategy class\n \n \n-class UseFirstStockRecord(object):\n+class UseFirstStockRecord:\n     \"\"\"\n     Stockrecord selection mixin for use with the ``Structured`` base strategy.\n     This mixin picks the first (normally only) stockrecord to fulfil a product.\n-\n-    This is backwards compatible with Oscar<0.6 where only one stockrecord per\n-    product was permitted.\n     \"\"\"\n \n     def select_stockrecord(self, product):\n-        return product.stockrecords.first()\n+        # We deliberately fetch by index here, to ensure that no additional database queries are made\n+        # when stockrecords have already been prefetched in a queryset annotated using ProductQuerySet.base_queryset\n+        try:\n+            return product.stockrecords.all()[0]\n+        except IndexError:\n+            pass\n \n \n class StockRequired(object):\n", "test_patch": "diff --git a/tests/integration/partner/test_selector_mixin.py b/tests/integration/partner/test_selector_mixin.py\n--- a/tests/integration/partner/test_selector_mixin.py\n+++ b/tests/integration/partner/test_selector_mixin.py\n@@ -1,5 +1,6 @@\n from django.test import TestCase\n \n+from oscar.apps.catalogue.models import Product\n from oscar.apps.partner import strategy\n from oscar.test import factories\n \n@@ -17,3 +18,12 @@ def test_selects_first_stockrecord_for_product(self):\n \n     def test_returns_none_when_no_stock_records(self):\n         self.assertIsNone(self.mixin.select_stockrecord(self.product))\n+\n+    def test_does_not_generate_additional_query_when_passed_product_from_base_queryset(self):\n+        product = Product.objects.base_queryset().first()\n+        # Regression test for https://github.com/django-oscar/django-oscar/issues/3875\n+        # If passed a product from a queryset annotated by base_queryset, then\n+        # the selector should not trigger any additional database queries because\n+        # it should rely on the prefetched stock records.\n+        with self.assertNumQueries(0):\n+            self.mixin.select_stockrecord(product)\n", "problem_statement": "Performance issue in cases where selecting strategy for product\nFound a bug? Please fill out the sections below.\r\n\r\n### Issue Summary\r\n\r\nIn Oscar 2.1, Selecting a strategy for product in [`UseFirstStockRecord`](https://github.com/django-oscar/django-oscar/blob/2.1.0b0/src/oscar/apps/partner/strategy.py#L188) used to (correctly, for performance reasons) index on the related stock records for a product to get the first. This meant, of course, that the `prefetch_related` call to `stockrecords` on `Product` was used and no additional queries generated.\r\n\r\nNow, in Oscar 3.1 [this was changed to use the queryset's `first` method](https://github.com/django-oscar/django-oscar/blob/3.1/src/oscar/apps/partner/strategy.py#L188), which unfortunately makes the prefetch invalid and causes a new query each time a product shows price info (for various reasons, this has a huge performance impact on my use case).\r\n\r\nThis change was introduced in [this commit](https://github.com/django-oscar/django-oscar/commit/3a826796d01e5cba345aa646dbc5c8ae466cbf4a), which also implemented the same pattern over various related queries, and therefore I assume has similar performance implications (but I haven't checked).\r\n\r\n### Steps to Reproduce\r\n\r\nTry to render a page with various snippets of pricing info for a collection of hundreds of products - use a tool like Django Debug Toolbar to see the query multiplication :)\r\n\r\n### Technical details\r\n\r\n* Python version: Run `python --version`: 3.10\r\n* Django version: Look in your requirements.txt, or run `pip show django | grep Version` 3.2.12\r\n* Oscar version: Look in your requirements.txt, or run `pip show django-oscar | grep Version`. 3.1\r\n\n", "hints_text": "Interesting, I would have thought that the [0] indexing was done because queryset.first() didn't exist at the time this was written.\ncould you show us a screenshot of your usecase or add a url? I think it would be good to be able to replicate the scenario.\nHey @specialunderwear \r\n\r\nI don't have a public URL but you can see the docs for `prefetch_related` that this is the expected behaviour (that the prefetch is redundant because we've chained a new clause to the query):\r\n\r\nhttps://docs.djangoproject.com/en/4.0/ref/models/querysets/#prefetch-related\r\n\r\nThe \"note\" section there clearly illustrates, using `.filter`, but the principle is the same as using `.first`, and easily observed by looking at the quanity of queries fired if one switches from using `.first` to `[0]`.\r\n\r\nSo, using `.first()` has negative performance implications with this change in Oscar - it means the optimization of prefetching the stock records is redundant, and that the query performance from that optimization is therefore no longer present).\nHah, this is interesting. I too had just assumed that this was legacy code that was written before `first()` was introduced. I think we need to revert the changes made to this query in commit, but also add docstrings explaining why it's done that way, as it's not immediately obvious. Having had a look at the whole commit through, I think it needs to be only partially reverted - other instances of using this pattern do just seem to be legacy code.\n@solarissmoke \r\n\r\nYes, it is not obvious from the code, and a way to document it better would also be to emphasize where Oscar does `select_related` and `prefetch_related` queries - I assume there will be Oscar users who don't know the details of Django's ORM and won't be aware that any customization they may do to queries will make Oscar's use of `select_related` and `prefetch_related` redundant, impacting performance.\r\n\r\nAlso see the [docs](https://docs.djangoproject.com/en/4.0/ref/models/querysets/#first) and the [implementation](https://github.com/django/django/blob/main/django/db/models/query.py#L862) for `.first()` - Because of the stuff around ordering, I would be careful about using it in Oscar to be honest - `first()` and `all()[0]` are *not* guaranteed to return the same instance due to how ordering may or may not be implemented.", "created_at": "2022-03-02T05:01:53Z", "version": "3.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/partner/test_selector_mixin.py::TestUseFirstStockRecordMixin::test_does_not_generate_additional_query_when_passed_product_from_base_queryset"], "PASS_TO_PASS": ["tests/integration/partner/test_selector_mixin.py::TestUseFirstStockRecordMixin::test_returns_none_when_no_stock_records", "tests/integration/partner/test_selector_mixin.py::TestUseFirstStockRecordMixin::test_selects_first_stockrecord_for_product"], "environment_setup_commit": "0a01977e9cef028bd3e8985309aa4741b6a8cb33"}, {"repo": "django-oscar/django-oscar", "pull_number": 3311, "instance_id": "django-oscar__django-oscar-3311", "issue_numbers": ["3308"], "base_commit": "9574ce2a56f3d99836c2e20785c116da12af6c42", "patch": "diff --git a/src/oscar/core/customisation.py b/src/oscar/core/customisation.py\n--- a/src/oscar/core/customisation.py\n+++ b/src/oscar/core/customisation.py\n@@ -36,6 +36,11 @@ def subfolders(path):\n \n \n def inherit_app_config(local_app_folder_path, local_app_name, app_config):\n+    create_file(\n+        join(local_app_folder_path, '__init__.py'),\n+        \"default_app_config = '{app_name}.apps.{app_config_class_name}'\\n\".format(\n+            app_name=local_app_name,\n+            app_config_class_name=app_config.__class__.__name__))\n     create_file(\n         join(local_app_folder_path, 'apps.py'),\n         \"import {app_config_class_module} as apps\\n\\n\\n\"\n", "test_patch": "diff --git a/tests/__init__.py b/tests/__init__.py\n--- a/tests/__init__.py\n+++ b/tests/__init__.py\n@@ -15,3 +15,16 @@ def __enter__(self):\n \n     def __exit__(self, exc_type, exc_value, traceback):\n         sys.path = self.original_paths\n+\n+\n+def delete_from_import_cache(module_name):\n+    \"\"\"\n+    Deletes imported modules from the cache, so that they do not interfere with\n+    subsequent imports of different modules of the same names.\n+\n+    Useful in situations where dynamically-created files are imported.\n+    \"\"\"\n+    parts = module_name.split('.')\n+    for i, _ in enumerate(parts, 1):\n+        submodule_name = '.'.join(parts[:i])\n+        del sys.modules[submodule_name]\ndiff --git a/tests/integration/core/test_customisation.py b/tests/integration/core/test_customisation.py\n--- a/tests/integration/core/test_customisation.py\n+++ b/tests/integration/core/test_customisation.py\n@@ -8,6 +8,7 @@\n from django.test import TestCase, override_settings\n \n from oscar.core import customisation\n+from tests import delete_from_import_cache\n \n VALID_FOLDER_PATH = 'tests/_site/apps'\n \n@@ -39,12 +40,22 @@ def test_creates_new_folder(tmpdir):\n     path.join('order').ensure_dir()\n \n \n-def test_creates_init_file(tmpdir):\n+def test_creates_init_file(tmpdir, monkeypatch):\n     path = tmpdir.mkdir('fork')\n     customisation.fork_app('order', str(path), 'order')\n \n     path.join('order').join('__init__.py').ensure()\n \n+    monkeypatch.syspath_prepend(str(tmpdir))\n+\n+    config_module = __import__('fork.order.apps', fromlist=['OrderConfig'])\n+    delete_from_import_cache('fork.order.apps')\n+\n+    expected_string = \"default_app_config = '{}.apps.OrderConfig\".format(\n+        config_module.OrderConfig.name)\n+    contents = path.join('order').join('__init__.py').read()\n+    assert expected_string in contents\n+\n \n def test_handles_dashboard_app(tmpdir):\n     # Dashboard apps are fiddly as they aren't identified by a single app\n", "problem_statement": "Class loader throws an error after forking dashboard\n## Issue Summary\r\n\r\nUsing a forked dashboard application results in an error.\r\n\r\n## Steps to Reproduce\r\n\r\n1. Set up an Oscar project named `foo` as described in the section titled \"Building your own shop\"\r\n2. Run `./manage.py oscar_fork_app dashboard foo`\r\n3. Substitute `foo.dashboard` for `oscar.apps.dashboard` in `foo/settings.py`\r\n4. Run `./manage.py`\r\n\r\nThe following exception is thrown:\r\n\r\n<pre>Traceback (most recent call last):\r\n  File \"./manage.py\", line 22, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/usr/lib/python3.8/site-packages/django/core/management/__init__.py\", line 364, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/usr/lib/python3.8/site-packages/django/core/management/__init__.py\", line 338, in execute\r\n    django.setup()\r\n  File \"/usr/lib/python3.8/site-packages/django/__init__.py\", line 27, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/usr/lib/python3.8/site-packages/django/apps/registry.py\", line 116, in populate\r\n    app_config.ready()\r\n  File \"/usr/lib/python3.8/site-packages/oscar/apps/dashboard/reports/apps.py\", line 16, in ready\r\n    self.index_view = get_class('dashboard.reports.views', 'IndexView')\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 31, in get_class\r\n    return get_classes(module_label, [classname], module_prefix)[0]\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 41, in get_classes\r\n    return class_loader(module_label, classnames, module_prefix)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 99, in default_class_loader\r\n    oscar_module = _import_module(oscar_module_label, classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 133, in _import_module\r\n    return __import__(module_label, fromlist=classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py\", line 9, in <module>\r\n    ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 31, in get_class\r\n    return get_classes(module_label, [classname], module_prefix)[0]\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 41, in get_classes\r\n    return class_loader(module_label, classnames, module_prefix)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 99, in default_class_loader\r\n    oscar_module = _import_module(oscar_module_label, classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 133, in _import_module\r\n    return __import__(module_label, fromlist=classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/apps/dashboard/reports/forms.py\", line 7, in <module>\r\n    GeneratorRepository = get_class('dashboard.reports.utils',\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 31, in get_class\r\n    return get_classes(module_label, [classname], module_prefix)[0]\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 41, in get_classes\r\n    return class_loader(module_label, classnames, module_prefix)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 99, in default_class_loader\r\n    oscar_module = _import_module(oscar_module_label, classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 133, in _import_module\r\n    return __import__(module_label, fromlist=classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/apps/dashboard/reports/utils.py\", line 3, in <module>\r\n    OrderReportGenerator = get_class('order.reports', 'OrderReportGenerator')\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 31, in get_class\r\n    return get_classes(module_label, [classname], module_prefix)[0]\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 41, in get_classes\r\n    return class_loader(module_label, classnames, module_prefix)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 99, in default_class_loader\r\n    oscar_module = _import_module(oscar_module_label, classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 133, in _import_module\r\n    return __import__(module_label, fromlist=classnames)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/apps/order/reports.py\", line 7, in <module>\r\n    ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 31, in get_class\r\n    return get_classes(module_label, [classname], module_prefix)[0]\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 41, in get_classes\r\n    return class_loader(module_label, classnames, module_prefix)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 104, in default_class_loader\r\n    app_name = _find_registered_app_name(module_label)\r\n  File \"/usr/lib/python3.8/site-packages/oscar/core/loading.py\", line 188, in _find_registered_app_name\r\n    raise AppNotFoundError(\r\noscar.core.exceptions.AppNotFoundError: Couldn't find an Oscar app to import dashboard.reports.reports from\r\n</pre>\r\n\r\n## Technical Details\r\n\r\n* Python version: 3.8.1\r\n* Django version: 1.11.28\r\n* Oscar version: 2.0.4\r\n\n", "hints_text": "I suspect this is because you haven't forked any of the dashboard's sub-apps? You need to fork at least one of those as well - e.g., you need `foo.dashboard.catalogue` to exist in addition to `foo.dashboard`.\nI did some further investigation on this. Forking additional dashboard applications did not solve the problem, but using`foo.dashbord.apps.DashboardConfig` in `INSTALLED_APPS` or adding\r\n`default_app_config = 'foo.dashbord.apps.DashboardConfig'` to `foo/dashboard/__init__.py` did the trick.\r\n\r\nAccording to the section titled \"Customising Oscar\" in the documentation, using the module path should suffice. However, the current implementation of `oscar_fork_app` no longer sets `default_app_config`. Is there a good reason for not setting it?\r\n\nI think this was probably just an oversight. The documentation has been updated on master to [use the explicit app config](https://github.com/django-oscar/django-oscar/blob/master/docs/source/topics/customisation.rst), will try and get that onto readthedocs soon.\r\n\r\nLeaving this open as a reminder to look into the `default_app_config`.", "created_at": "2020-02-28T06:57:22Z", "version": "2.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/core/test_customisation.py::test_creates_init_file"], "PASS_TO_PASS": ["tests/integration/core/test_customisation.py::TestUtilities::test_subfolder_extraction", "tests/integration/core/test_customisation.py::test_raises_exception_for_nonexistant_app_label", "tests/integration/core/test_customisation.py::test_raises_exception_if_app_has_already_been_forked", "tests/integration/core/test_customisation.py::test_creates_new_folder", "tests/integration/core/test_customisation.py::test_handles_dashboard_app", "tests/integration/core/test_customisation.py::test_creates_models_and_admin_file", "tests/integration/core/test_customisation.py::test_copies_in_migrations_when_needed", "tests/integration/core/test_customisation.py::test_dashboard_app_config", "tests/integration/core/test_customisation.py::TestForkApp::test_absolute_target_path", "tests/integration/core/test_customisation.py::TestForkApp::test_fork_third_party", "tests/integration/core/test_customisation.py::TestForkApp::test_local_folder"], "environment_setup_commit": "2429ad9e88e9a432dfa60aaca703d99860f85389"}, {"repo": "django-oscar/django-oscar", "pull_number": 3572, "instance_id": "django-oscar__django-oscar-3572", "issue_numbers": ["3162"], "base_commit": "a4d07e028454ce49a7753dd3b2a3bb898a238883", "patch": "diff --git a/src/oscar/apps/basket/utils.py b/src/oscar/apps/basket/utils.py\n--- a/src/oscar/apps/basket/utils.py\n+++ b/src/oscar/apps/basket/utils.py\n@@ -143,7 +143,7 @@ def consumed(self, offer=None):\n     def consumers(self):\n         return [x for x in self._offers.values() if self.consumed(x)]\n \n-    def available(self, offer=None) -> int: # noqa (too complex (11))\n+    def available(self, offer=None) -> int:\n         \"\"\"\n         check how many items are available for offer\n \n@@ -186,8 +186,4 @@ def available(self, offer=None) -> int: # noqa (too complex (11))\n                 if check and offer not in x.combined_offers:\n                     return 0\n \n-            # respect max_affected_items\n-            if offer.benefit.max_affected_items:\n-                max_affected_items = min(offer.benefit.max_affected_items, max_affected_items)\n-\n         return max_affected_items - self.consumed(offer)\ndiff --git a/src/oscar/apps/offer/benefits.py b/src/oscar/apps/offer/benefits.py\n--- a/src/oscar/apps/offer/benefits.py\n+++ b/src/oscar/apps/offer/benefits.py\n@@ -67,6 +67,7 @@ def apply(self, basket, condition, offer, discount_percent=None,\n         max_affected_items = self._effective_max_affected_items()\n         affected_lines = []\n         for price, line in line_tuples:\n+            affected_items += line.quantity_with_offer_discount(offer)\n             if affected_items >= max_affected_items:\n                 break\n             if discount_amount_available == 0:\ndiff --git a/src/oscar/apps/offer/conditions.py b/src/oscar/apps/offer/conditions.py\n--- a/src/oscar/apps/offer/conditions.py\n+++ b/src/oscar/apps/offer/conditions.py\n@@ -47,7 +47,7 @@ def is_satisfied(self, offer, basket):\n         num_matches = 0\n         for line in basket.all_lines():\n             if self.can_apply_condition(line):\n-                num_matches += line.quantity_without_offer_discount(None)\n+                num_matches += line.quantity_without_offer_discount(offer)\n             if num_matches >= self.value:\n                 return True\n         return False\n", "test_patch": "diff --git a/tests/integration/basket/test_utils.py b/tests/integration/basket/test_utils.py\n--- a/tests/integration/basket/test_utils.py\n+++ b/tests/integration/basket/test_utils.py\n@@ -76,7 +76,7 @@ def test_available_with_offer(self):\n         offer1 = ConditionalOfferFactory(name='offer1', benefit=benefit)\n         lines = basket.all_lines()\n         assert lines[0].consumer.available(offer1) == 1\n-        assert lines[1].consumer.available(offer1) == 5\n+        assert lines[1].consumer.available(offer1) == 10\n \n     def test_consumed_with_offer(self, filled_basket):\n         offer1 = ConditionalOfferFactory(name='offer1')\ndiff --git a/tests/integration/offer/test_condition.py b/tests/integration/offer/test_condition.py\n--- a/tests/integration/offer/test_condition.py\n+++ b/tests/integration/offer/test_condition.py\n@@ -3,13 +3,17 @@\n \n import pytest\n from django.test import TestCase\n+from django.utils.timezone import now\n \n from oscar.apps.basket.models import Basket\n-from oscar.apps.offer import custom, models\n+from oscar.apps.offer import applicator, custom, models\n+from oscar.core.loading import get_class\n from oscar.test import factories\n from oscar.test.basket import add_product\n from tests._site.model_tests_app.models import BasketOwnerCalledBarry\n \n+Selector = get_class('partner.strategy', 'Selector')\n+\n \n @pytest.fixture\n def products_some():\n@@ -329,3 +333,47 @@ def test_is_not_satisfied_by_non_match(self):\n     def test_is_satisfied_by_match(self):\n         self.basket.owner = factories.UserFactory(first_name=\"Barry\")\n         assert self.offer.is_condition_satisfied(self.basket)\n+\n+\n+class TestOffersWithCountCondition(TestCase):\n+\n+    def setUp(self):\n+        super().setUp()\n+\n+        self.basket = factories.create_basket(empty=True)\n+\n+        # Create range and add one product to it.\n+        rng = factories.RangeFactory(name='All products', includes_all_products=True)\n+        self.product = factories.ProductFactory()\n+        rng.add_product(self.product)\n+\n+        # Create a non-exclusive offer #1.\n+        condition1 = factories.ConditionFactory(range=rng, value=D('1'))\n+        benefit1 = factories.BenefitFactory(range=rng, value=D('10'))\n+        self.offer1 = factories.ConditionalOfferFactory(\n+            condition=condition1, benefit=benefit1, start_datetime=now(),\n+            name='Test offer #1', exclusive=False,\n+        )\n+\n+        # Create a non-exclusive offer #2.\n+        condition2 = factories.ConditionFactory(range=rng, value=D('1'))\n+        benefit2 = factories.BenefitFactory(range=rng, value=D('5'))\n+        self.offer2 = factories.ConditionalOfferFactory(\n+            condition=condition2, benefit=benefit2, start_datetime=now(),\n+            name='Test offer #2', exclusive=False,\n+        )\n+\n+    def add_product(self):\n+        self.basket.add_product(self.product)\n+        self.basket.strategy = Selector().strategy()\n+        applicator.Applicator().apply(self.basket)\n+\n+    def assertOffersApplied(self, offers):\n+        applied_offers = self.basket.applied_offers()\n+        self.assertEqual(len(offers), len(applied_offers))\n+        for offer in offers:\n+            self.assertIn(offer.id, applied_offers, msg=offer)\n+\n+    def test_both_non_exclusive_offers_are_applied(self):\n+        self.add_product()\n+        self.assertOffersApplied([self.offer1, self.offer2])\n", "problem_statement": "Exclusive with Count Condition not work anymore\n# Issue Summary\r\n\r\nI create 2 offers with count condition, **Both are not exclusive**, After oscar version 2.0, It seem like it just apply only 1 offers not apply both anymore\r\n\r\n### Steps to Reproduce\r\n1. Create 2 offers like this \r\n![Screen Shot 2019-08-29 at 17 02 19](https://user-images.githubusercontent.com/8855366/63931190-01b7f080-ca7f-11e9-8e34-d93f01c3d102.png)\r\n\r\n2. Only 1 offer apply\r\n![Screen Shot 2019-08-29 at 17 06 09](https://user-images.githubusercontent.com/8855366/63931399-67a47800-ca7f-11e9-8989-988bd9cf5b05.png)\r\n\r\n**Expected**\r\n1. Should apply both offers if it does not exclusive.?\r\n\r\nNote\r\nI try to dig into the issue and  compare the load, I found out that, in condition.py they are some changed about is_satisfied like this image below\r\n\r\n<img width=\"1606\" alt=\"Screen Shot 2019-08-29 at 17 08 11\" src=\"https://user-images.githubusercontent.com/8855366/63931528-a6d2c900-ca7f-11e9-8f08-24e6a7966516.png\">\r\n\r\nWhen I reverse code back it work like a charm, Any idea why you guy change that?\r\n\r\n### Technical details\r\n\r\n* Python version: 3.6.8\r\n* Django version: 1.11.5\r\n* Oscar version: 2.0.1.\r\n\n", "hints_text": "Indeed, this was changed in https://github.com/django-oscar/django-oscar/commit/c1c61ef5c5112068fbaeadf5714423becec8ba25#diff-008132744b4a8f62da8f13ae6286db70R49-R50, but only for `CountCondition`, not for `CoverageCondition` and `ValueCondition`, so I think this was an error.\nOr the reason could also be in the `Condition.can_apply_condition` method. As the author of the change, could you please suggest @pjstevns what was the motivation of the change?\nAre there any news on this issue? Or could I help with something. \n@bruecksen it needs someone to spend a bit of time working out a fix - if you have time to do so that would be appreciated.", "created_at": "2020-11-13T16:05:50Z", "version": "3.0", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_available_with_offer", "tests/integration/offer/test_condition.py::TestOffersWithCountCondition::test_both_non_exclusive_offers_are_applied"], "PASS_TO_PASS": ["tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_no_offer", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_offer", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consume", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_exclusive_offer_1", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_exclusive_offer_2", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_by_application", "tests/integration/basket/test_utils.py::TestLineOfferConsumer::test_consumed_with_combined_offer", "tests/integration/offer/test_condition.py::TestCountCondition::test_description", "tests/integration/offer/test_condition.py::TestCountCondition::test_is_not_satisfied_by_empty_basket", "tests/integration/offer/test_condition.py::TestCountCondition::test_not_discountable_product_fails_condition", "tests/integration/offer/test_condition.py::TestCountCondition::test_empty_basket_fails_partial_condition", "tests/integration/offer/test_condition.py::TestCountCondition::test_smaller_quantity_basket_passes_partial_condition", "tests/integration/offer/test_condition.py::TestCountCondition::test_smaller_quantity_basket_upsell_message", "tests/integration/offer/test_condition.py::TestCountCondition::test_matching_quantity_basket_fails_partial_condition", "tests/integration/offer/test_condition.py::TestCountCondition::test_matching_quantity_basket_passes_condition", "tests/integration/offer/test_condition.py::TestCountCondition::test_greater_quantity_basket_passes_condition", "tests/integration/offer/test_condition.py::TestCountCondition::test_consumption", "tests/integration/offer/test_condition.py::TestCountCondition::test_is_satisfied_accounts_for_consumed_items", "tests/integration/offer/test_condition.py::TestValueCondition::test_description", "tests/integration/offer/test_condition.py::TestValueCondition::test_empty_basket_fails_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_empty_basket_fails_partial_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_less_value_basket_fails_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_not_discountable_item_fails_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_upsell_message", "tests/integration/offer/test_condition.py::TestValueCondition::test_matching_basket_fails_partial_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_less_value_basket_passes_partial_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_matching_basket_passes_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_greater_than_basket_passes_condition", "tests/integration/offer/test_condition.py::TestValueCondition::test_consumption", "tests/integration/offer/test_condition.py::TestValueCondition::test_consumption_with_high_value_product", "tests/integration/offer/test_condition.py::TestValueCondition::test_is_consumed_respects_quantity_consumed", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_empty_basket_fails", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_empty_basket_fails_partial_condition", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_single_item_fails", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_not_discountable_item_fails", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_single_item_passes_partial_condition", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_upsell_message", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_duplicate_item_fails", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_duplicate_item_passes_partial_condition", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_covering_items_pass", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_covering_items_fail_partial_condition", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_covering_items_are_consumed", "tests/integration/offer/test_condition.py::TestCoverageCondition::test_consumed_items_checks_affected_items", "tests/integration/offer/test_condition.py::TestConditionProxyModels::test_name_and_description", "tests/integration/offer/test_condition.py::TestConditionProxyModels::test_proxy", "tests/integration/offer/test_condition.py::TestCustomCondition::test_is_not_satisfied_by_non_match", "tests/integration/offer/test_condition.py::TestCustomCondition::test_is_satisfied_by_match"], "environment_setup_commit": "04cd6a4fc750db9310147d96776f06fe289269bf"}, {"repo": "django-oscar/django-oscar", "pull_number": 3823, "instance_id": "django-oscar__django-oscar-3823", "issue_numbers": ["3785"], "base_commit": "7da350296abf970a6a329b7c7c9041a00026964d", "patch": "diff --git a/src/oscar/apps/catalogue/abstract_models.py b/src/oscar/apps/catalogue/abstract_models.py\n--- a/src/oscar/apps/catalogue/abstract_models.py\n+++ b/src/oscar/apps/catalogue/abstract_models.py\n@@ -870,6 +870,7 @@ class Meta:\n         ordering = ['code']\n         verbose_name = _('Product attribute')\n         verbose_name_plural = _('Product attributes')\n+        unique_together = ('code', 'product_class')\n \n     @property\n     def is_option(self):\ndiff --git a/src/oscar/apps/catalogue/migrations/0024_remove_duplicate_attributes.py b/src/oscar/apps/catalogue/migrations/0024_remove_duplicate_attributes.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/catalogue/migrations/0024_remove_duplicate_attributes.py\n@@ -0,0 +1,69 @@\n+# Generated by Django 3.2.9 on 2022-01-25 19:01\n+\n+from django.db import migrations\n+from django.db.models import CharField, Count, Value\n+from django.db.models.functions import Concat\n+\n+def remove_duplicate_attributes(apps, schema_editor):\n+    \"\"\"\n+    Removes duplicate attributes that have the same code and product class.\n+    \"\"\"\n+    ProductAttribute = apps.get_model('catalogue', 'ProductAttribute')\n+    ProductClass = apps.get_model(\"catalogue\", \"ProductClass\")\n+\n+    # Instead of iterating over all attributes, we concat the code and product class pk\n+    # with a \"|\" so we can find duplicate attributes in one query.\n+    duplicate_attributes = ProductAttribute.objects.annotate(\n+        code_and_product_class=Concat('code', Value('|'), 'product_class__pk', output_field=CharField())\n+    ).values('code_and_product_class').annotate(\n+        same_code_count=Count('code_and_product_class')\n+    ).filter(same_code_count__gt=1)\n+\n+    for attribute in duplicate_attributes:\n+        attribute_code, product_class_pk = attribute[\"code_and_product_class\"].split(\"|\")\n+        product_class = ProductClass.objects.get(pk=product_class_pk)\n+        attributes = ProductAttribute.objects.filter(\n+            code=attribute_code,\n+            product_class=product_class\n+        )\n+        used_attributes = attributes.filter(productattributevalue__isnull=False)\n+        used_attribute_count = used_attributes.distinct().count()\n+\n+        # In most cases, the used attributes count will be one or zero as\n+        # the dashboard will always show one attribute. If the used attribute\n+        # count is one, we exclude this from attributes and remove the others.\n+        # If it's zero, we pick the last created and delete others.\n+        if used_attribute_count == 1:\n+            attributes.exclude(pk=used_attributes.first().pk).delete()\n+            continue\n+        elif used_attribute_count == 0:\n+            attributes.exclude(pk=attributes.last().pk).delete()\n+            continue\n+\n+        # If we found multiple attributes that have values linked to them,\n+        # we must move them to one attribute and then delete the others.\n+        # We can only do this if the value_types are all the same!\n+        ASSERTION_MESSAGE = \"\"\"Duplicate attribute found with code: %s but different types!\n+        You could fix this by renaming the duplicate codes or by matching all types to one\n+        type and update the attribute values accordingly for their new type. After that you can\n+        re-run the migration.\"\"\" % attribute_code\n+        assert used_attributes.values(\"type\").distinct().count() == 1, ASSERTION_MESSAGE\n+\n+        # Choose one attribute that will be used to move to and others to be deleted.\n+        to_be_used_attribute = used_attributes.first()\n+        to_be_deleted_attributes = used_attributes.exclude(pk=to_be_used_attribute.pk)\n+        for attribute in to_be_deleted_attributes:\n+            attribute.productattributevalue_set.all().update(attribute=to_be_used_attribute)\n+            attribute.delete()\n+\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('catalogue', '0023_auto_20210824_1414'),\n+    ]\n+\n+    operations = [\n+        migrations.RunPython(remove_duplicate_attributes, migrations.RunPython.noop)\n+    ]\ndiff --git a/src/oscar/apps/catalogue/migrations/0025_attribute_code_uniquetogether_constraint.py b/src/oscar/apps/catalogue/migrations/0025_attribute_code_uniquetogether_constraint.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/oscar/apps/catalogue/migrations/0025_attribute_code_uniquetogether_constraint.py\n@@ -0,0 +1,17 @@\n+# Generated by Django 3.2.9 on 2022-01-25 20:17\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('catalogue', '0024_remove_duplicate_attributes'),\n+    ]\n+\n+    operations = [\n+        migrations.AlterUniqueTogether(\n+            name='productattribute',\n+            unique_together={('code', 'product_class')},\n+        ),\n+    ]\n", "test_patch": "diff --git a/tests/integration/catalogue/test_attributes.py b/tests/integration/catalogue/test_attributes.py\n--- a/tests/integration/catalogue/test_attributes.py\n+++ b/tests/integration/catalogue/test_attributes.py\n@@ -4,7 +4,7 @@\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.test import TestCase\n \n-from oscar.apps.catalogue.models import Product, ProductAttribute\n+from oscar.apps.catalogue.models import Product, ProductAttribute, ProductClass\n from oscar.test import factories\n \n \n@@ -44,6 +44,17 @@ def test_attributes_refresh(self):\n         product.attr.refresh()\n         assert product.attr.a1 == \"v2\"\n \n+    def test_attribute_code_uniquenesss(self):\n+        product_class = factories.ProductClassFactory()\n+        attribute1 = ProductAttribute.objects.create(name='a1', code='a1', product_class=product_class)\n+        attribute1.full_clean()\n+        attribute2 = ProductAttribute.objects.create(name='a1', code='a1', product_class=product_class)\n+        with self.assertRaises(ValidationError):\n+            attribute2.full_clean()\n+        another_product_class = ProductClass.objects.create(name=\"another product class\")\n+        attribute3 = ProductAttribute.objects.create(name='a1', code='a1', product_class=another_product_class)\n+        attribute3.full_clean()\n+\n \n class TestBooleanAttributes(TestCase):\n \n", "problem_statement": "ProductAttribute.code should be a unique field\n### Issue Summary\r\n\r\nThe product attribute should have a unique code. \r\nYou can only assign one attribute with that code in the dashboard-product anyway. \r\n\r\n### Steps to Reproduce\r\n\r\n1. In dashboard, go to `product-type` - `product attributes` page: _/dashboard/catalogue/product-type/1/update/_\r\n2. Add two product attributes with the same name. (I use name att1 and type text.)\r\n3. Save the form. Both attributes with the same code are saved and shown on the page. \r\n4. Go to one `dashboard/products` page for that product class, _/dashboard/catalogue/products/8/?upc=&title=shirt_, only one attribute name is shown on the form. \r\n5. Note that even I create attributes with different types, only one attribute of that code will be shown on the `dashboard/products` page. \r\n\r\n![Screen Shot 2021-10-14 at 11 30 32 AM](https://user-images.githubusercontent.com/11536831/137376274-b0b32263-f2cd-492e-bbef-dcd8fedfa802.png)\r\n\r\n![Screen Shot 2021-10-14 at 11 30 14 AM](https://user-images.githubusercontent.com/11536831/137376244-875b59c7-7ced-40b4-b4da-690479c8ea0e.png)\r\n\r\n#### Expected result:\r\n* Give Exception when saving the attribute - \"Duplicate product attributes code / attributes with this code already exists.\" \r\n* Enforce the `uniqueness` of `AbstractProductAttribute.code`. This is a SlugField. \r\n* Another way is to enforce the unique_together of (code, type), while the data retrieval part needs to be updated as well. \r\n* I can work on the PR for this issue, please let me know. \r\n\r\n\r\n#### Cause\r\nHere have the assumption that `attribute.code` should be unique. \r\n\r\n```python\r\nFile: src/oscar/apps/dashboard/catalogue/forms.py\r\n    def set_initial_attribute_values(self, product_class, kwargs):\r\n        ...\r\n        for attribute in product_class.attributes.all():\r\n            try:\r\n                value = instance.attribute_values.get(\r\n                    attribute=attribute).value\r\n            except exceptions.ObjectDoesNotExist:\r\n                pass\r\n            else:\r\n                kwargs['initial']['attr_%s' % attribute.code] = value\r\n```\r\n\r\n\r\n\r\n\r\n### Technical details\r\n\r\n* Python version: 3.9.7\r\n* Django version: 3.2.7\r\n* Oscar version: master\r\n\n", "hints_text": "We cannot globally enforce uniqueness of attribute codes, because Oscar permits reusing the same attribute code on different product types (and this can be useful to be able to do). I think the solution here would be to add validation on the formset for any given product class, to ensure that a code isn't repeated for that product class. PR welcome for this - note that it will be a bit messy to properly handle validation of deleted rows etc.\n> We cannot globally enforce uniqueness of attribute codes, because Oscar permits reusing the same attribute code on different product types (and this can be useful to be able to do). I think the solution here would be to add validation on the formset for any given product class, to ensure that a code isn't repeated for that product class. PR welcome for this - note that it will be a bit messy to properly handle validation of deleted rows etc.\r\n\r\nCan't we just add`unique_together = ('code', 'product_class',)` on the ProductAttribute model?\nNo, for the reason I mentioned in my comment: Oscar permits reusing the same attribute code on different product types. Imagine you have 20 product types which all share one attribute - Oscar currently allows that and it is (from my experience) a common use case.\nNot sure if I'm misunderstanding you, but I understand the reusing the same attribute code on multiple product types is common. However, if you add `unique_together = ('code', 'product_class',)` on the ProductAttribute model's Meta class, it prevents you from using the same code for the product type you're editing. You can still use the same code on other product types.\nMy apologies, you're right and I misunderstood - `unique_together` as you describe would work.", "created_at": "2021-12-07T19:44:05Z", "version": "3.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/integration/catalogue/test_attributes.py::TestContainer::test_attribute_code_uniquenesss"], "PASS_TO_PASS": ["tests/integration/catalogue/test_attributes.py::TestContainer::test_attributes_initialised_before_write", "tests/integration/catalogue/test_attributes.py::TestContainer::test_attributes_refresh", "tests/integration/catalogue/test_attributes.py::TestBooleanAttributes::test_validate_boolean_values", "tests/integration/catalogue/test_attributes.py::TestBooleanAttributes::test_validate_invalid_boolean_values", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_delete_multi_option_value", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_multi_option_value_as_text", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_save_multi_option_value", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_validate_invalid_multi_option_values", "tests/integration/catalogue/test_attributes.py::TestMultiOptionAttributes::test_validate_multi_option_values", "tests/integration/catalogue/test_attributes.py::TestOptionAttributes::test_option_value_as_text", "tests/integration/catalogue/test_attributes.py::TestDatetimeAttributes::test_validate_datetime_values", "tests/integration/catalogue/test_attributes.py::TestDatetimeAttributes::test_validate_invalid_datetime_values", "tests/integration/catalogue/test_attributes.py::TestDateAttributes::test_validate_date_values", "tests/integration/catalogue/test_attributes.py::TestDateAttributes::test_validate_datetime_values", "tests/integration/catalogue/test_attributes.py::TestDateAttributes::test_validate_invalid_date_values", "tests/integration/catalogue/test_attributes.py::TestIntegerAttributes::test_validate_integer_values", "tests/integration/catalogue/test_attributes.py::TestIntegerAttributes::test_validate_invalid_integer_values", "tests/integration/catalogue/test_attributes.py::TestIntegerAttributes::test_validate_str_integer_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_float_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_integer_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_invalid_float_values", "tests/integration/catalogue/test_attributes.py::TestFloatAttributes::test_validate_str_float_values", "tests/integration/catalogue/test_attributes.py::TestTextAttributes::test_validate_invalid_float_values", "tests/integration/catalogue/test_attributes.py::TestTextAttributes::test_validate_string_and_unicode_values", "tests/integration/catalogue/test_attributes.py::TestFileAttributes::test_validate_file_values"], "environment_setup_commit": "0a01977e9cef028bd3e8985309aa4741b6a8cb33"}, {"repo": "django-oscar/django-oscar", "pull_number": 3398, "instance_id": "django-oscar__django-oscar-3398", "issue_numbers": ["3397"], "base_commit": "0a3f300fdd27e93f5b25a22a58b87eb34287f989", "patch": "diff --git a/src/oscar/apps/basket/forms.py b/src/oscar/apps/basket/forms.py\n--- a/src/oscar/apps/basket/forms.py\n+++ b/src/oscar/apps/basket/forms.py\n@@ -148,7 +148,7 @@ def _create_parent_product_fields(self, product):\n         \"\"\"\n         choices = []\n         disabled_values = []\n-        for child in product.children.all():\n+        for child in product.children.public():\n             # Build a description of the child, including any pertinent\n             # attributes\n             attr_summary = child.attribute_summary\ndiff --git a/src/oscar/apps/catalogue/managers.py b/src/oscar/apps/catalogue/managers.py\n--- a/src/oscar/apps/catalogue/managers.py\n+++ b/src/oscar/apps/catalogue/managers.py\n@@ -107,6 +107,12 @@ def browsable(self):\n         \"\"\"\n         return self.filter(parent=None, is_public=True)\n \n+    def public(self):\n+        \"\"\"\n+        Excludes non-public products\n+        \"\"\"\n+        return self.filter(is_public=True)\n+\n     def browsable_dashboard(self):\n         \"\"\"\n         Products that should be browsable in the dashboard.\ndiff --git a/src/oscar/apps/partner/strategy.py b/src/oscar/apps/partner/strategy.py\n--- a/src/oscar/apps/partner/strategy.py\n+++ b/src/oscar/apps/partner/strategy.py\n@@ -150,7 +150,7 @@ def select_children_stockrecords(self, product):\n         Select appropriate stock record for all children of a product\n         \"\"\"\n         records = []\n-        for child in product.children.all():\n+        for child in product.children.public():\n             # Use tuples of (child product, stockrecord)\n             records.append((child, self.select_stockrecord(child)))\n         return records\n", "test_patch": "diff --git a/tests/unit/catalogue/test_managers.py b/tests/unit/catalogue/test_managers.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/unit/catalogue/test_managers.py\n@@ -0,0 +1,11 @@\n+import pytest\n+\n+from oscar.apps.catalogue.models import Product\n+from oscar.test.factories import ProductFactory\n+\n+\n+@pytest.mark.django_db\n+def test_public_queryset_method_filters():\n+    ProductFactory(is_public=True)\n+    ProductFactory(is_public=False)\n+    assert Product.objects.public().count() == 1\n", "problem_statement": "is_public flag is not respected when listing child products\n### Issue Summary\r\n\r\nWhen rendering product variants (e.g., in the detail view for a parent product), Oscar does not check whether those variants are public. It uses `product.children.all`.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set `is_public=False` on a child product!\r\n2. Notice that it is still listed in the parent product detail view.\n", "hints_text": "", "created_at": "2020-06-10T11:31:57Z", "version": "2.1", "ERROR_TO_ERROR": [], "FAIL_TO_PASS": ["tests/unit/catalogue/test_managers.py::test_public_queryset_method_filters"], "PASS_TO_PASS": [], "environment_setup_commit": "226b173bf1b9b36bcabe5bae6bd06cff3013a20c"}]