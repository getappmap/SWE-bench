name: Make AppMaps
run-name: Mapping ${{ inputs.projectFilter }} (${{ inputs.comment }})

on:
  workflow_dispatch:
    inputs:
      instances:
        description: 'Instances to map'
        required: true
        default: 'princeton-nlp/SWE-bench'
      projectFilter:
        description: 'Project or instance to filter for'
        required: true
      appmapMaxEvents:
        description: 'Max Events per AppMap'
        required: true
        default: '25000'
      appmapMaxTime:
        description: 'Max time per appmap creation'
        required: true
        default: '30'
      comment:
        description: 'Say something if you want'
        required: false

permissions:
  contents: write
  actions: write

jobs:
  run:
    runs-on: SWE-Bench_Larger
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Display Input Values
      run: |
        echo "Instances: ${{ github.event.inputs.instances }}"
        echo "Project Filter: ${{ github.event.inputs.projectFilter }}"
        echo "AppMap Max Events: ${{ github.event.inputs.appmapMaxEvents }}"
        echo "AppMap Max Time: ${{ github.event.inputs.appmapMaxTime }}"

    - name: Install AppMap tools
      uses: getappmap/install-action@v1
      with:
        install-appmap-library: false
        tools-url: https://github.com/getappmap/appmap-js/releases/download/%40appland%2Fappmap-v3.147.0/appmap-linux-x64

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        cache: 'pip'
   
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: 3.9

    - name: Make dirs
      run: |
        mkdir -p appmaps appmap_logs /tmp/swe-appmaps
        
    - name: Create conda env
      run: |
        conda init bash
        conda env create -f environment.yml

    - name: Make Appmaps
      env:
        INSTANCES: ${{ inputs.instances }}
        APPMAP_MAX_TIME: ${{ inputs.appmapMaxTime }}
        APPMAP_MAX_EVENTS: ${{ inputs.appmapMaxEvents }} 
      run: |
          source /home/runner/.bashrc
          conda activate swe-bench
          conda info
          ./swe_appmap/make_appmaps-github-actions.sh --filter ${{ inputs.projectFilter }}

    - name: Get Artifact Name
      id: get-artifact-name
      run: |
        file=$(ls appmaps/ | head -n 1)
        echo "file_name=$file" >> $GITHUB_ENV
        echo "::set-output name=file_name::$file" 
    
    - name: Upload AppMaps
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-artifact-name.outputs.file_name }}
        path: ./appmaps/${{ steps.get-artifact-name.outputs.file_name }}

    - name: Upload SWE Bench Logs
      uses: actions/upload-artifact@v4
      with:
        name: appmap-logs.zip
        path: ./appmap_logs/

    # If the build fails leave a terminal open for 5 minutes 
    # we can investigate if needed
    - name: Setup upterm session
      uses: owenthereal/action-upterm@v1
      if: ${{ failure() }}
      with:
        wait-timeout-minutes: 5